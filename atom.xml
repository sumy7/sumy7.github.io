<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>SumyBlog</title>
  
  <subtitle>SumyGG的博客</subtitle>
  <link href="https://sumygg.com/atom.xml" rel="self"/>
  
  <link href="https://sumygg.com/"/>
  <updated>2021-05-31T16:37:16.543Z</updated>
  <id>https://sumygg.com/</id>
  
  <author>
    <name>Sumy</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>基于WSL2搭建Win10开发环境</title>
    <link href="https://sumygg.com/2021/05/31/web-development-on-win-10-with-wsl2/"/>
    <id>https://sumygg.com/2021/05/31/web-development-on-win-10-with-wsl2/</id>
    <published>2021-05-31T15:47:24.000Z</published>
    <updated>2021-05-31T16:37:16.543Z</updated>
    
    <content type="html"><![CDATA[<p>距离微软发布 Windows Subsystem for Linux (WSL) 有好一段时间了，也一直没想到什么场景下能够用到这个子系统。最近给新电脑 Win10 系统搭建开发环境的时候，感觉好多开发软件不是特别顺手。猛然间想起了还有子系统，随即尝试了一下。作为开发环境没有什么问题的，下面把基本过程记录一下。</p><span id="more"></span><blockquote><p>适用于 Linux 的 Windows 子系统可让开发人员按原样运行 GNU/Linux 环境 - 包括大多数命令行工具、实用工具和应用程序 - 且不会产生传统虚拟机或双启动设置开销。<br /><a href="https://docs.microsoft.com/zh-cn/windows/wsl/about">什么是适用于 Linux 的 Windows 子系统 | Microsoft Docs</a></p></blockquote><p>使用WSL有以下一些优点：</p><ol><li>外壳系统还是 Windows，但是可以运行 Linux 的一些命令</li><li>可以使用 Linux 的包管理，使用 Linux 的软件和调试环境</li><li>开发环境可以借助 VSCode 和 Intellij IDEA 访问 WSL 中的代码</li></ol><h1 id="安装wsl2"><a class="markdownIt-Anchor" href="#安装wsl2"></a> 安装WSL2</h1><p>官方提供了安装WSL的教程<a href="https://docs.microsoft.com/zh-cn/windows/wsl/install-win10">在 Windows 10 上安装 WSL | Microsoft Docs</a>。重新总结一下安装步骤：</p><ol><li>更新 Win10 系统</li><li>在Windows设置里搜索【启动或关闭Windows功能】</li></ol><p><img src="1.png" alt="设置" /></p><ol start="3"><li>找到其中的【适用于 Linux 的 Windows 子系统】选中，点【确定】，等待安装重启</li></ol><p><img src="2.png" alt="启用或关闭 Windows 功能" /></p><ol start="4"><li>打开 PowerShell（右键开始菜单按钮，选择【Windows PowerShell（管理员）】），输入以下命令将WSL默认版本切换到WSL2</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wsl --set-default-version 2</span><br></pre></td></tr></table></figure><p>关于一代和二代的区别，可以参考这篇文章<a href="https://docs.microsoft.com/zh-cn/windows/wsl/compare-versions">比较 WSL 1 和 WSL 2 | Microsoft Docs</a></p><ol start="5"><li>在Windows Store商店里安装Ubuntu发行版</li></ol><p><img src="3.png" alt="商店安装Ubuntu发行版" /></p><p>商店里也有CentOS的发行版，但是需要<s>花钱</s>。。。</p><ol start="6"><li>在终端（命令提示符 或 PowerShell）中输入bash就可以启动WSL了。之后就可以像是用 Linux 一样用这个系统了。</li></ol><h1 id="安装windows-terminal可选"><a class="markdownIt-Anchor" href="#安装windows-terminal可选"></a> 安装Windows Terminal（可选）</h1><p>Windows发布了一个命令行终端，可以尝试一下。</p><p><a href="https://github.com/Microsoft/Terminal">GitHub - microsoft/terminal: The new Windows Terminal and the original Windows console host, all in the same place!</a></p><p><img src="4.png" alt="Windows Terminal" /></p><h1 id="配置node开发环境"><a class="markdownIt-Anchor" href="#配置node开发环境"></a> 配置Node开发环境</h1><p>直接上教程，按照说明操作一遍即可<a href="https://docs.microsoft.com/zh-cn/windows/dev-environment/javascript/nodejs-on-wsl">在 WSL 2 上设置 NodeJS | Microsoft Docs</a>。</p><p>VSCode 需要安装 <strong>Remote - WSL</strong> 插件才能打开存储在 WSL 中的项目。IDEA 可以直接打开 WSL 中的项目。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;距离微软发布 Windows Subsystem for Linux (WSL) 有好一段时间了，也一直没想到什么场景下能够用到这个子系统。最近给新电脑 Win10 系统搭建开发环境的时候，感觉好多开发软件不是特别顺手。猛然间想起了还有子系统，随即尝试了一下。作为开发环境没有什么问题的，下面把基本过程记录一下。&lt;/p&gt;</summary>
    
    
    
    <category term="高效生活" scheme="https://sumygg.com/categories/%E9%AB%98%E6%95%88%E7%94%9F%E6%B4%BB/"/>
    
    
    <category term="windows" scheme="https://sumygg.com/tags/windows/"/>
    
    <category term="前端" scheme="https://sumygg.com/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="wsl2" scheme="https://sumygg.com/tags/wsl2/"/>
    
    <category term="开发环境" scheme="https://sumygg.com/tags/%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/"/>
    
  </entry>
  
  <entry>
    <title>在Github上玩贪吃蛇游戏吧</title>
    <link href="https://sumygg.com/2021/05/15/play-snake-game-on-github-contribute-graph/"/>
    <id>https://sumygg.com/2021/05/15/play-snake-game-on-github-contribute-graph/</id>
    <published>2021-05-15T05:16:38.000Z</published>
    <updated>2021-05-18T03:09:12.999Z</updated>
    
    <content type="html"><![CDATA[<p>说好不想再挖坑的，结果还是没有控制住自己，结果又开了一个新坑，明明有那么多的坑已经填不完了。。。这次玩点不一样的内容，写一个贪吃蛇游戏吧。但是也不能仅仅是一个贪吃蛇游戏，还想在其中增加些不一样的内容。Kotlin跨平台开发出来好久了，这次就体验一下Kotlin2JS的能力。另一方面，只做一个贪吃蛇游戏没有什么意思，最近经常逛Github，看到贡献墙眼前一亮，为什么不在这里进行游戏呢？将自己的代码逻辑嵌入网站，还是做成一个扩展比较方便。于是就打算按照扩展的模式开发。</p><p>本文的重点不在于贪吃蛇游戏逻辑的实现，在于感受Kotlin跨端开发的体验和最后扩展上线的流程。</p><h1 id="项目概览"><a class="markdownIt-Anchor" href="#项目概览"></a> 项目概览</h1><p>贪吃蛇游戏的名称叫 <strong>gitsnackhub</strong>，其实简单来说就是在github的中间插入了snack的英文。</p><p>图标也是仿照Github贡献墙的配色，在其中画出贪吃蛇的形状。</p><p><img src="./2-2.png" alt="gitsnackhub图标" /></p><p>最终游戏的呈现方式，代码已开源到<a href="https://github.com/sumy7/gitsnackhub">Github</a>，欢迎进行指导。</p><p><img src="./2-1.png" alt="gitsnackhub" /></p><h1 id="创建跨平台项目"><a class="markdownIt-Anchor" href="#创建跨平台项目"></a> 创建跨平台项目</h1><p>使用IntelliJ IDEA可以创建Kotlin/JS类型的项目。</p><ol><li>打开Intellij IDEA，新建一个新的项目。</li><li>项目类型选择 Kotlin。</li><li>输入项目名称后，选择 <strong>Browser Application</strong> 项目，点击下一步<br /><img src="./1-1.png" alt="新建项目" /></li><li>保持默认配置，选择完成项目。<br /><img src="./1-2.png" alt="配置项目模板" /></li></ol><h1 id="开发过程体验"><a class="markdownIt-Anchor" href="#开发过程体验"></a> 开发过程体验</h1><p>项目创建完成后，会出现 <code>build.gradle.kts</code> 配置文件，其中包含 <code>kotlin(&quot;js&quot;)</code> 的插件和其它依赖。</p><p>KotlinJs相对于普通的JavaScript项目而言，其内部也是通过webpack进行的构建，但是各种配置都通过js插件整合到gradle配置中。</p><h2 id="npm依赖与webpack配置"><a class="markdownIt-Anchor" href="#npm依赖与webpack配置"></a> npm依赖与webpack配置</h2><p>如果想增加npm依赖包，可以在Gradle中通过配置引入：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">dependencies &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    implementation(npm(<span class="string">&quot;is-sorted&quot;</span>, <span class="string">&quot;1.0.5&quot;</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不要忘记Kotlin是一个类型安全语言，要使用引入包中的函数，还要通过<code>external</code>的方式将函数声明导出。期望以后能够通过types文件直接导出函数声明。</p><p>当然也可以在Gradle中配置一些webpack配置项，例如将输出项从默认的<code>umd</code>改为<code>commonjs2</code>：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">webpackTask &#123;</span><br><span class="line">    outputFileName = <span class="string">&quot;mycustomfilename.js&quot;</span></span><br><span class="line">    output.libraryTarget = <span class="string">&quot;commonjs2&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上配置可以在Kotlin的教程中查看，<a href="https://kotlinlang.org/docs/js-project-setup.html#webpack-bundling">https://kotlinlang.org/docs/js-project-setup.html#webpack-bundling</a></p><p>KotlinJS的构建过程是，先将kotlin代码转换成JavaScript代码，然后生成webpack配置，基于webpack构建和打包生成最后代码。</p><h2 id="类型安全"><a class="markdownIt-Anchor" href="#类型安全"></a> 类型安全</h2><p>使用Kotlin开发JavaScript最大的感受就是类型安全，虽然类型安全能够在编译阶段发现问题，但是相对于JavaScript这种动态语言来说，就丧失了很多动态性。</p><p>例如通过<code>document.querySelector()</code>可以获取到指定的元素，这个方法会类型为<code>Element?</code>的对象。要想获取对应的属性值，根据查询到的DOM类型，将这个<code>Element</code>父类强制转换成我们需要的对象类型。例如查询<code>&lt;rect&gt;</code>标签需要将其当做<code>SVGRectElement</code>类型进行处理。</p><p>在JavaScript中，DOM对象作为一个普通的对象，可以以对象的方式在其中增加修改对象属性。但是在Kotlin中，一个对象中含有的属性是固定的，很难进行增加属性的操作。</p><h2 id="动态语言支持"><a class="markdownIt-Anchor" href="#动态语言支持"></a> 动态语言支持</h2><p>为了支持JavaScript的动态语言的特性，Kotlin在语言层面也做了一些改变。</p><p>增加<code>dynamic</code>类型，表示这个类型是一个<strong>动态</strong>类型。针对动态类型Kotlin编译器有一些特权操作，动态类型可以代表任何值，编译器会跳过类型检查，你可以用任意参数调用动态类型的任意方法（包括不存在的方法）。</p><p>还可以在Kotlin中直接书写JavaScript代码，使用<code>js()</code>函数可以以字符串方式执行一段JavaScript代码，类似于<code>eval()</code>函数。该函数的返回值类型也是<code>dynamic</code>类型的。</p><h1 id="扩展的基本结构"><a class="markdownIt-Anchor" href="#扩展的基本结构"></a> 扩展的基本结构</h1><p>扩展能够使用的表现模式有好多种：</p><ul><li>点击图标弹出一个浮窗</li><li>右键菜单</li><li>嵌入式脚本</li><li>devtools插件</li><li>后台进程</li></ul><p>这些类型的具体功能可以查阅相关的资料。扩展需要引用的资源和使用的权限通过一个叫 <code>manifest.json</code> 的文件控制。</p><p>gitsnackhub通过将脚本注入到github个人信息页的方式，实现操控页面的逻辑。这里就使用了扩展的嵌入式的方式。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;content_scripts&quot;</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;css&quot;</span>: [],</span><br><span class="line">      <span class="attr">&quot;js&quot;</span>: [</span><br><span class="line">        <span class="string">&quot;gitsnackhub.js&quot;</span></span><br><span class="line">      ],</span><br><span class="line">      <span class="attr">&quot;matches&quot;</span>: [</span><br><span class="line">        <span class="string">&quot;https://github.com/*&quot;</span></span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>content_scripts</code> 的作用是会将其指定的css和js文件，在 <strong>matches</strong> 匹配后，插入到页面中。gitsnackhub只用到了js文件，并打算将其插入到github的域名中。</p><h1 id="上架扩展"><a class="markdownIt-Anchor" href="#上架扩展"></a> 上架扩展</h1><p>为了让用户方便的下载到你的扩展，最好的方式就是上架到Chrome Web Store应用商店里。</p><p>第一次上架需要消费5$激活开发者账号。打开<a href="https://chrome.google.com/webstore/devconsole">https://chrome.google.com/webstore/devconsole</a>，第一次会提示以下内容：</p><p><img src="./4-1.png" alt="激活扩展" /></p><p>这里的支付可以国内的visa信用卡，注意账单地址需要填写一个地图上真实的账单地址。</p><p>注册完成后，新建一个新内容，上传打包好的扩展压缩zip包。第一次上架填写的内容比较多，需要注意以下项目的填写：</p><ul><li>扩展说明，需要详细说明扩展的使用方式，不要直接复制manifest.json中的摘要信息，会被驳回</li><li>商店图标，注意尺寸</li><li>截图，注意尺寸</li><li>单一用途，描述扩展的单一用途</li><li>请求权限，需要描述所有你扩展声明的权限，并说明必要原因</li></ul><p><s>截止目前，我的扩展还没有审核通过。审核频率大概1天1次。第一次因为扩展描述太随便而被驳回。重新修改提交审核即可。</s></p><p>终于，扩展审核通过了，<a href="https://chrome.google.com/webstore/detail/gitsnackhub/emngeeijijgenmejojhkdigiblicfdbe">Gitsnackhub - Chrome 网上应用店</a>。找了位勇士试用了一下，后面再慢慢把一些细节优化一下。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;说好不想再挖坑的，结果还是没有控制住自己，结果又开了一个新坑，明明有那么多的坑已经填不完了。。。这次玩点不一样的内容，写一个贪吃蛇游戏吧。但是也不能仅仅是一个贪吃蛇游戏，还想在其中增加些不一样的内容。Kotlin跨平台开发出来好久了，这次就体验一下Kotlin2JS的能力。</summary>
      
    
    
    
    <category term="游戏人生" scheme="https://sumygg.com/categories/%E6%B8%B8%E6%88%8F%E4%BA%BA%E7%94%9F/"/>
    
    
    <category term="github" scheme="https://sumygg.com/tags/github/"/>
    
    <category term="kolin" scheme="https://sumygg.com/tags/kolin/"/>
    
    <category term="kotlin-js" scheme="https://sumygg.com/tags/kotlin-js/"/>
    
    <category term="snake" scheme="https://sumygg.com/tags/snake/"/>
    
    <category term="game" scheme="https://sumygg.com/tags/game/"/>
    
    <category term="chrome-extension" scheme="https://sumygg.com/tags/chrome-extension/"/>
    
  </entry>
  
  <entry>
    <title>VueRouter4路由权重</title>
    <link href="https://sumygg.com/2021/05/11/vue-router-4-path-ranking/"/>
    <id>https://sumygg.com/2021/05/11/vue-router-4-path-ranking/</id>
    <published>2021-05-11T02:14:45.000Z</published>
    <updated>2021-05-14T02:17:04.501Z</updated>
    
    <content type="html"><![CDATA[<p>Vue3正式版发布也有一段时间了，各个相关组件也趋于稳定。前些天听了VueRouter4的一个分享会，了解到了新版的设计理念和一些主要的改动，其中一个改动就是舍弃了原来的路由顺序匹配，改为计算权重的方式。趁着这个上午，把其中的部分逻辑研究一下。</p><span id="more"></span><h1 id="路由权重"><a class="markdownIt-Anchor" href="#路由权重"></a> 路由权重</h1><p>路由权重也不是一个新的概念，在nginx里就有类似的实现。nginx将路径匹配分为：精确匹配、普通字符匹配、正则匹配。location的书写顺序只会影响同类的匹配，nginx会按照一个特定的分类顺序进行匹配。总的来说nginx匹配的目标是精确、规则优先，最后才会考虑采用最长前缀匹配的方式。</p><p>除了nginx里有隐性权重（按照大类+顺序）这个概念外，CSS选择器的选择也有这种思想。此处不再过多描述。</p><p>这次vuerouter4舍弃了顺序匹配的方式，采用了计算路径权重（Path Ranking）的方式。相对于nginx的这种约定式的权重，vuerouter4采用了更加明确的量化路由权重。在多个路由满足匹配规则的情况下，优先选择权重高的路由。</p><h1 id="转换路径"><a class="markdownIt-Anchor" href="#转换路径"></a> 转换路径</h1><p>vuerouter4还是采用将路由转换成正则方式进行匹配，但是为了方便记录路由权重，没有再采用以前path-to-regexp库进行直接转换。</p><p>在源码<code>pathTokenizer.ts</code>文件中，vuerouter4通过语法分析的方式，将路由定义拆分成静态路径(Static)、命名路径(Param)、带正则的命名路径(ParamRegExp)、可重复带正则的命名路径(ParamRegExpEnd)这四类路径，然后将每个路径都会是一个Token。</p><p>举例来说，<code>/about</code>这种是静态路径，<code>/:userId</code>这种是命名路径，<code>/:orderId(\\d+)</code>这种在命名后面包含一个正则表达式的是带正则的命名路径，最后<code>/:chapters+</code>这种在最后存在存在重复记号的是可重复带正则的命名路径。</p><p>下面是命名路径的TokenParam定义，其余的也将类似。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> TokenParam &#123;</span><br><span class="line">  <span class="attr">type</span>: TokenType.Param  <span class="comment">// 路径类型</span></span><br><span class="line">  regexp?: <span class="built_in">string</span>        <span class="comment">// 路径正则</span></span><br><span class="line">  <span class="attr">value</span>: <span class="built_in">string</span>          <span class="comment">// 路径值</span></span><br><span class="line">  <span class="attr">optional</span>: <span class="built_in">boolean</span>      <span class="comment">// 是否可选</span></span><br><span class="line">  <span class="attr">repeatable</span>: <span class="built_in">boolean</span>    <span class="comment">// 是否重复</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>将路径的每段解析成Token之后，会在计算路由权重得分时转换成正则表达式。这里简单介绍一下各类路径的正则转换规则。</p><ol><li>静态路径直接使用原先的路径值，注意也需要转义其中的一些特殊字符。</li><li>命名路径会使用<code>([^/]+)</code>（至少有一个字符不是斜杠 / ）正则来匹配路径。</li><li>带有正则表达式的，会尝试用路径中书写的正则表达式，即TokenParam中的regexp所定义的内容。</li><li>可重复的会使用<code>((?:$&#123;re&#125;)(?:/(?:$&#123;re&#125;))*)</code>（至少匹配一次路径表达式）来重新拼装正则表达式。</li><li>可选的会在最后拼接<code>?</code>（0个或1个）选项。</li></ol><h1 id="计算权重"><a class="markdownIt-Anchor" href="#计算权重"></a> 计算权重</h1><p>转换正则表达式和计算得分的逻辑在<code>pathParserRanker.ts</code>文件中。首先看一下vuerouter4对得分的定义。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Scoring values used in tokensToParser</span></span><br><span class="line"><span class="keyword">const</span> <span class="built_in">enum</span> PathScore &#123;</span><br><span class="line">  _multiplier = <span class="number">10</span>,</span><br><span class="line">  Root = <span class="number">9</span> * _multiplier, <span class="comment">// just /</span></span><br><span class="line">  Segment = <span class="number">4</span> * _multiplier, <span class="comment">// /a-segment</span></span><br><span class="line">  SubSegment = <span class="number">3</span> * _multiplier, <span class="comment">// /multiple-:things-in-one-:segment</span></span><br><span class="line">  Static = <span class="number">4</span> * _multiplier, <span class="comment">// /static</span></span><br><span class="line">  Dynamic = <span class="number">2</span> * _multiplier, <span class="comment">// /:someId</span></span><br><span class="line">  BonusCustomRegExp = <span class="number">1</span> * _multiplier, <span class="comment">// /:someId(\\d+)</span></span><br><span class="line">  BonusWildcard = -<span class="number">4</span> * _multiplier - BonusCustomRegExp, <span class="comment">// /:namedWildcard(.*) we remove the bonus added by the custom regexp</span></span><br><span class="line">  BonusRepeatable = -<span class="number">2</span> * _multiplier, <span class="comment">// /:w+ or /:w*</span></span><br><span class="line">  BonusOptional = -<span class="number">0.8</span> * _multiplier, <span class="comment">// /:w? or /:w*</span></span><br><span class="line">  <span class="comment">// these two have to be under 0.1 so a strict /:page is still lower than /:a-:b</span></span><br><span class="line">  BonusStrict = <span class="number">0.07</span> * _multiplier, <span class="comment">// when options strict: true is passed, as the regex omits \/?</span></span><br><span class="line">  BonusCaseSensitive = <span class="number">0.025</span> * _multiplier, <span class="comment">// when options strict: true is passed, as the regex omits \/?</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>分数计算的基础倍数是10倍，每条路由计算先按照路径分隔符拆分分别计算，最后形成一个分数列表。</p><ul><li>每一段默认会得到Segment的40分</li><li>静态路径会额外得到Static的+40分，如<code>/about</code>默认是40+40=80分</li><li>命名路径会额外得到Dynamic的+20分，如<code>/:userId</code>是40+20=80分</li><li>只有一个/的路径只能得到Root的90分</li><li>命名路径中带有表达式，会额外获得BonusCustomRegExp的+10分，如<code>/:orderId(\\d+)</code>是40+20+10=70分</li><li>如果路径正则表达式是<code>.*</code>（匹配所有字符），还会扣除动态路径和正则表达式的分数BonusWildcard的-50分，如<code>/:orderId(.*)</code>是40+20+10-50=20分</li><li>如果路径是重复或可选的，会对应扣除BonusRepeatable的-20分和BonusOptional的-8分，如<code>/:chapters+</code>是40+20-20=40分</li><li>如果对路径设置了绝对匹配和不忽略大小写选项，会增加BonusStrict的0.7分（只针对最后一段路径有效）和BonusCaseSensitive的0.25分（对所有路径有效）</li></ul><h1 id="路由匹配"><a class="markdownIt-Anchor" href="#路由匹配"></a> 路由匹配</h1><p>在路由匹配之前，需要先对路由进行加权排序。前面提到对每段路径计算得分后，会得到一个分数列表，例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">/user/:id         -&gt; [80 | 60]</span><br><span class="line">/user/:id/profile -&gt; [80 | 60 | 80]</span><br><span class="line">/user/:id/posts   -&gt; [80 | 60 | 80]</span><br></pre></td></tr></table></figure><p><img src="./path-ranker.jpg" alt="path-ranker" /></p><p>排序的时候会按照每段分别比较，相同位置得分比较大的靠前，所有得分都一致的情况下才考虑路由的定义顺序。</p><p>按照权重排好序后，在排序好的列表里就可以按照顺序来匹配路径和结果了。</p><h1 id="总结"><a class="markdownIt-Anchor" href="#总结"></a> 总结</h1><p>通过计算路由权重匹配的方式，可以让描述越精确的路由能够越先匹配到。相比上版本使用的顺序匹配，能够大大降低人为顺序对匹配结果的影响，减少出错几率。而且对动态路由来说，计算路径权重的方式也能使新增加的路由按照一致的逻辑处理，而不用考虑插入的顺序问题。</p><p>以上vuerouter4路由解析的结果，可以通过<a href="https://paths.esm.dev/">Vue Router Path Parser</a>进行查看，可以看到各个路径计算的得分，也支持将你的路由分享给其他人。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;Vue3正式版发布也有一段时间了，各个相关组件也趋于稳定。前些天听了VueRouter4的一个分享会，了解到了新版的设计理念和一些主要的改动，其中一个改动就是舍弃了原来的路由顺序匹配，改为计算权重的方式。趁着这个上午，把其中的部分逻辑研究一下。&lt;/p&gt;</summary>
    
    
    
    <category term="果然还是前端" scheme="https://sumygg.com/categories/%E6%9E%9C%E7%84%B6%E8%BF%98%E6%98%AF%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="vuerouter" scheme="https://sumygg.com/tags/vuerouter/"/>
    
    <category term="路由" scheme="https://sumygg.com/tags/%E8%B7%AF%E7%94%B1/"/>
    
  </entry>
  
  <entry>
    <title>再次从零开始捣鼓一个Electron应用——菜单和再次发布</title>
    <link href="https://sumygg.com/2021/05/09/restart-from-the-very-beginning-for-electron-with-menu-and-release-2/"/>
    <id>https://sumygg.com/2021/05/09/restart-from-the-very-beginning-for-electron-with-menu-and-release-2/</id>
    <published>2021-05-09T10:35:17.000Z</published>
    <updated>2021-05-11T12:16:27.685Z</updated>
    
    <content type="html"><![CDATA[<p>时隔一段时间，其实每天还是在断断续续的“水”Electron的功能，本次在菜单和构建问题上又进了一步。i18n功能需要一个切换语言的位置，由于没有设置专门的设置窗口，就把切换语言放置在菜单栏中。Electron默认已经有一部分菜单了，这次就需要在菜单上加上语言列表。另一项任务是发布，每次手动发布也好麻烦（其实也就手动发布了一次而已），这次看看能不能利用Github Actions功能将构建和发布自动化。</p><span id="more"></span><h1 id="菜单"><a class="markdownIt-Anchor" href="#菜单"></a> 菜单</h1><p>Electron的菜单通过一个<code>(MenuItemConstructorOptions | MenuItem)[]</code>类型数组进行声明，然后在窗口的ready事件后才能执行修改菜单的命令。</p><p>修改菜单先是要将菜单模板构建成菜单对象，然后再应用到ApplcationMenu上。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> menu = Menu.buildFromTemplate([<span class="comment">/* 菜单在这里 */</span>])</span><br><span class="line">Menu.setApplicationMenu(menu)</span><br></pre></td></tr></table></figure><p>以一个简单菜单来说，一个独立的菜单包含label、accelerator、role这三项。label是菜单展示；accelerator是菜单快捷键；role是菜单角色，有些内置的菜单角色可以触发系统的默认行为，比如undo就会触发撤销行为等。将type设置为separator会绘制一个菜单分隔条。如果默认角色没有符合要求的也可以使用click属性向菜单绑定点击事件。</p><p>下面是菜单的一个简单用法：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">label</span>: <span class="string">&#x27;Edit&#x27;</span>,</span><br><span class="line">  <span class="attr">submenu</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">label</span>: <span class="string">&#x27;Undo&#x27;</span>,</span><br><span class="line">      <span class="attr">accelerator</span>: <span class="string">&#x27;CmdOrCtrl+Z&#x27;</span>,</span><br><span class="line">      <span class="attr">role</span>: <span class="string">&#x27;undo&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">type</span>: <span class="string">&#x27;separator&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">label</span>: <span class="string">&#x27;Reload&#x27;</span>,</span><br><span class="line">      <span class="attr">accelerator</span>: <span class="string">&#x27;CmdOrCtrl+R&#x27;</span>,</span><br><span class="line">      <span class="attr">click</span>: <span class="function"><span class="keyword">function</span> (<span class="params">item, focusedWindow</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (focusedWindow) &#123;</span><br><span class="line">          focusedWindow.reload()</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用了自定义菜单之后，会丢失默认菜单的配置，如果还想保留默认菜单，建议将默认菜单项重新拷贝一遍，与新菜单合并放置在一起。可以使用<a href="https://github.com/carter-thaxton/electron-default-menu/blob/master/index.js">https://github.com/carter-thaxton/electron-default-menu/blob/master/index.js</a>提供的模板稍加修改。</p><h1 id="发布"><a class="markdownIt-Anchor" href="#发布"></a> 发布</h1><p>上篇文章之后，就一直在捣鼓怎么进行更有效的发布操作，初步想法是用Github Actions在push tags操作后，触发构建然后推送将成品推送到release中，以此来替代手动构建上传的操作。</p><p>后来发现，原来<a href="https://www.electron.build/">electron-builder</a>存在构建后自动上传github的方式，而使用的<a href="https://github.com/nklayman/vue-cli-plugin-electron-builder">vue-cli-plugin-electron-builder</a>引用了electron-builder，自然也存在这项功能。</p><p>要想在本地使用，首先需要申请Github Token。打开<a href="https://github.com/settings/tokens">Personal Access Tokens</a>，选择“Generate new token”，然后将repo下的所有权限选中，生成一个新的token。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">export GH_TOKEN=xxx_xxxxxxxxxxxxxxxxx</span><br><span class="line">vue-cli-service electron:build --mac --win --linux deb tar.xz -p always</span><br></pre></td></tr></table></figure><p>这样就会在本地构建mac、windows、linux的成品，并上传Github对应仓库的releases里。</p><p>除了在本地操作，还可以将这个步骤整理成一个Github Actions，在push的时候自动进行。新建.github/workflows/build.yml文件，并输入以下内容。</p><figure class="highlight yaml"><figcaption><span>.github/workflows/build.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">Build/release</span></span><br><span class="line"></span><br><span class="line"><span class="attr">on:</span> <span class="string">push</span></span><br><span class="line"></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">release:</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">$</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">strategy:</span></span><br><span class="line">      <span class="attr">matrix:</span></span><br><span class="line">        <span class="attr">os:</span> [<span class="string">macos-latest</span>, <span class="string">ubuntu-latest</span>, <span class="string">windows-latest</span>]</span><br><span class="line"></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Check</span> <span class="string">out</span> <span class="string">Git</span> <span class="string">repository</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/checkout@v2.3.4</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Install</span> <span class="string">Node.js,</span> <span class="string">NPM</span> <span class="string">and</span> <span class="string">Yarn</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/setup-node@v2.1.5</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">node-version:</span> <span class="number">14</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Yarn</span> <span class="string">install</span> <span class="string">and</span> <span class="string">release</span></span><br><span class="line">        <span class="attr">env:</span></span><br><span class="line">          <span class="attr">GH_TOKEN:</span> <span class="string">$</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line"><span class="string">          yarn install</span></span><br><span class="line"><span class="string">          yarn run electron:release-$</span></span><br><span class="line"><span class="string"></span></span><br></pre></td></tr></table></figure><p>步骤就是用macos、ubuntu和windows这三个操作系统，分别去构建成品。如果存在GH_TOKEN环境变量，会自动触发上传操作。当然这个GH_TOKEN也不需要配置和填写，执行的时候Github会自动生成token并进行替换。</p><p>这个Actions构建依赖几个命令，可以提前放在package.json里：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    <span class="attr">&quot;electron:release-all&quot;</span>: <span class="string">&quot;vue-cli-service electron:build --mac --win --linux deb tar.xz -p always&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;electron:release-macos-latest&quot;</span>: <span class="string">&quot;vue-cli-service electron:build --mac -p always&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;electron:release-ubuntu-latest&quot;</span>: <span class="string">&quot;vue-cli-service electron:build --linux deb tar.xz -p always&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;electron:release-windows-latest&quot;</span>: <span class="string">&quot;vue-cli-service electron:build --win -p always&quot;</span>,</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后将文件push到仓库里，就自动创建Github Actions了。以后有push操作的时候，都会自动构建。还会根据当前最新的tag创建版本号，但是这样自动创建的releases是一个草稿状态，还需要手动编辑然后进行发布操作。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;时隔一段时间，其实每天还是在断断续续的“水”Electron的功能，本次在菜单和构建问题上又进了一步。i18n功能需要一个切换语言的位置，由于没有设置专门的设置窗口，就把切换语言放置在菜单栏中。Electron默认已经有一部分菜单了，这次就需要在菜单上加上语言列表。另一项任务是发布，每次手动发布也好麻烦（其实也就手动发布了一次而已），这次看看能不能利用Github Actions功能将构建和发布自动化。&lt;/p&gt;</summary>
    
    
    
    <category term="体验Electron" scheme="https://sumygg.com/categories/%E4%BD%93%E9%AA%8CElectron/"/>
    
    
    <category term="electron" scheme="https://sumygg.com/tags/electron/"/>
    
    <category term="release" scheme="https://sumygg.com/tags/release/"/>
    
    <category term="github-actions" scheme="https://sumygg.com/tags/github-actions/"/>
    
  </entry>
  
  <entry>
    <title>美化你的Github个人信息页</title>
    <link href="https://sumygg.com/2021/04/25/beautify-your-github-profile-readme/"/>
    <id>https://sumygg.com/2021/04/25/beautify-your-github-profile-readme/</id>
    <published>2021-04-25T14:42:01.000Z</published>
    <updated>2021-04-25T15:48:35.363Z</updated>
    
    <content type="html"><![CDATA[<p>闲逛Github的时候，会发现有的Profile页面出现了一个README的头部，里面可以使用markdown自定义一些信息进行展示。查询了一下发现是Github新出现的一个秘密功能模块。不由分说，赶紧弄起来。</p><span id="more"></span><h1 id="新建个人仓库"><a class="markdownIt-Anchor" href="#新建个人仓库"></a> 新建个人仓库</h1><p>要展示这个特殊的模块，就需要新建一个”特殊“的仓库。这个仓库名称与你的Github用户名相同。如果你以Github用户名新建仓库，就会提示一段话：</p><p><img src="./create-repository.png" alt="secret" /></p><blockquote><p>You found a secret! sumy7/sumy7 is a ✨special ✨ repository that you can use to add a <a href="http://README.md">README.md</a> to your GitHub profile. Make sure it’s public and initialize it with a README to get started.</p></blockquote><p>记得创建仓库的时候初始化一个README.md文件。</p><h1 id="编辑readmemd文件"><a class="markdownIt-Anchor" href="#编辑readmemd文件"></a> 编辑README.md文件</h1><p>打开README.md文件，就会发现Github已经创建好了一段信息，给你补充的灵感。当然，也可以按照自己的想法进行修改。</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> 🔭 I’m currently working on …</span><br><span class="line"><span class="bullet">-</span> 🌱 I’m currently learning …</span><br><span class="line"><span class="bullet">-</span> 👯 I’m looking to collaborate on …</span><br><span class="line"><span class="bullet">-</span> 🤔 I’m looking for help with …</span><br><span class="line"><span class="bullet">-</span> 💬 Ask me about …</span><br><span class="line"><span class="bullet">-</span> 📫 How to reach me: …</span><br><span class="line"><span class="bullet">-</span> 😄 Pronouns: …</span><br><span class="line"><span class="bullet">-</span> ⚡ Fun fact: …</span><br></pre></td></tr></table></figure><p>编辑好文件打开个人首页就可以看到效果了。</p><h1 id="展示控件"><a class="markdownIt-Anchor" href="#展示控件"></a> 展示控件</h1><p>下面介绍几个不错的展示组件和灵感来源。</p><h2 id="动态github-readme-stats"><a class="markdownIt-Anchor" href="#动态github-readme-stats"></a> 动态GitHub Readme Stats</h2><p><a href="https://github.com/anuraghazra/github-readme-stats">anuraghazra/github-readme-stats</a>提供了一个展示Github动态的方式，支持展示Github基本信息、编码语言分布、仓库信息。最常用的还是Github基本信息和仓库信息。</p><p><img src="./github-stats.png" alt="github-stats" /></p><p>引用也是非常简单，按照仓库的说明文档，将其中的用户名替换成自己的用户名即可。比如我的就是：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">![Readme Card</span>](<span class="link">https://github-readme-stats.vercel.app/api?username=sumy7&amp;show_icons=true&amp;title_color=ffffff&amp;icon_color=bb2acf&amp;text_color=daf7dc&amp;bg_color=151515</span>)](<span class="link">https://github.com/anuraghazra/github-readme-stats</span>)</span><br><span class="line"></span><br><span class="line">[<span class="string">![Top Langs</span>](<span class="link">https://github-readme-stats.vercel.app/api/top-langs/?username=sumy7&amp;layout=compact&amp;exclude_repo=sumy7.github.io&amp;title_color=ffffff&amp;icon_color=bb2acf&amp;text_color=daf7dc&amp;bg_color=151515</span>)](<span class="link">https://github.com/anuraghazra/github-readme-stats</span>)</span><br></pre></td></tr></table></figure><h2 id="awesome-readmes"><a class="markdownIt-Anchor" href="#awesome-readmes"></a> Awesome READMEs</h2><p>如果没有灵感，可以参考一下其他人的Github个人信息页。这里有个仓库收集了一些人的Github信息页，可以翻翻参考一下。</p><p><a href="https://github.com/kautukkundan/Awesome-Profile-README-templates">https://github.com/kautukkundan/Awesome-Profile-README-templates</a></p><h2 id="访问计数"><a class="markdownIt-Anchor" href="#访问计数"></a> 访问计数</h2><p>可以添加访问计数的徽章，这类服务不少，也可以自己搭建一个。这里列举一些只需要将其中的用户名替换成自己的用户名。</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">+</span> ![<span class="string">sumy7</span>](<span class="link">https://komarev.com/ghpvc/?username=sumy7</span>)</span><br><span class="line"><span class="bullet">+</span> ![<span class="string">sumy7</span>](<span class="link">https://visitor-badge.glitch.me/badge?page_id=sumy7.profile</span>)</span><br></pre></td></tr></table></figure><h2 id="图标徽章"><a class="markdownIt-Anchor" href="#图标徽章"></a> 图标徽章</h2><p>很多仓库都有这类图标徽章 <img src="https://img.shields.io/badge/github-%2324292e.svg?&style=for-the-badge&logo=github&logoColor=white" alt="github"/>，<a href="https://shields.io/">https://shields.io/</a>提供了好多预制的徽章信息可供选择。</p><p>除了预制的徽章，shields也能自定义徽章样式。先从<a href="https://simpleicons.org/">https://simpleicons.org/</a>选择一个图标，shields支持直接使用simpleicons的图标。然后按照对应部分修改或替换到以下地址中，具体参数还是继续查看官网说明吧。</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">![<span class="string">Nintendo Switch</span>](<span class="link">https://img.shields.io/badge/-Nintendo%20Switch-e60012?style=flat-square&amp;logo=nintendo%20switch&amp;logoColor=ffffff</span>) ![<span class="string">Steam</span>](<span class="link">https://img.shields.io/badge/Steam-171a21?style=flat-square&amp;logo=steam&amp;logoColor=ffffff</span>)</span><br></pre></td></tr></table></figure><h2 id="模板"><a class="markdownIt-Anchor" href="#模板"></a> 模板</h2><p>各种布局、配件、模板真是挑花了了眼，尤其是其中技能图标，一个一个找好麻烦。幸好这里有一个Github <a href="https://profilinator.rishav.dev/">profilinator</a>模板生成器，一部分一部分的选择，可以快速生成需要的首页信息。</p><p>生成的README.md文件不只是局限于使用他的模板，更重要的是将其中的元素提取出来，复用其中的元素。比如技能图标<img src="https://profilinator.rishav.dev/skills-assets/vuejs-original-wordmark.svg" alt="Vue.js" height="25" /> 等。</p><h1 id="我的成果"><a class="markdownIt-Anchor" href="#我的成果"></a> 我的成果</h1><p>最后我的首页就是这样子了，欢迎前来参观。</p><p><a href="https://github.com/sumy7">https://github.com/sumy7/</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;闲逛Github的时候，会发现有的Profile页面出现了一个README的头部，里面可以使用markdown自定义一些信息进行展示。查询了一下发现是Github新出现的一个秘密功能模块。不由分说，赶紧弄起来。&lt;/p&gt;</summary>
    
    
    
    <category term="高效生活" scheme="https://sumygg.com/categories/%E9%AB%98%E6%95%88%E7%94%9F%E6%B4%BB/"/>
    
    
    <category term="github" scheme="https://sumygg.com/tags/github/"/>
    
    <category term="markdown" scheme="https://sumygg.com/tags/markdown/"/>
    
    <category term="profile" scheme="https://sumygg.com/tags/profile/"/>
    
    <category term="readme" scheme="https://sumygg.com/tags/readme/"/>
    
  </entry>
  
  <entry>
    <title>再次从零开始捣鼓一个Electron应用——监控、构建与发布</title>
    <link href="https://sumygg.com/2021/04/24/restart-from-the-very-beginning-for-electron-with-monitor-build-and-publish/"/>
    <id>https://sumygg.com/2021/04/24/restart-from-the-very-beginning-for-electron-with-monitor-build-and-publish/</id>
    <published>2021-04-24T08:11:17.000Z</published>
    <updated>2021-04-25T06:14:11.723Z</updated>
    
    <content type="html"><![CDATA[<p>在连续捣鼓了这个应用好几天后，感觉大部分功能实现的差不多了，就打算发布一版看一下。这次打算将成品包直接放到github上，github提供了release功能。本次发布过程还只是手动的，后续考虑如何自动的构建成品并进行发布操作。不知道Github Action支不支持这个功能。</p><span id="more"></span><h1 id="应用监控"><a class="markdownIt-Anchor" href="#应用监控"></a> 应用监控</h1><p>发布之后如何快速获取到应用崩溃的信息？这个时候就需要一个监控来帮忙了。Sentry 是一个开源的实时错误追踪系统，提供了多种语言的错误上报接入和在线的错误分析平台，还有官方试用或者自建上报服务端的功能。</p><p>接入sentry也是非常简单，首先访问 <a href="https://sentry.io/">https://sentry.io/</a> 注册并登陆，创建或使用默认的组织。</p><p>在项目中增加sentry客户端的依赖</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Using yarn</span></span><br><span class="line">yarn add @sentry/electron</span><br><span class="line"></span><br><span class="line"><span class="comment"># Using npm</span></span><br><span class="line">npm install @sentry/electron</span><br></pre></td></tr></table></figure><p>在 <code>background.ts</code> 和 <code>main.ts</code> 开始的位置增加启动监控的代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> Sentry <span class="keyword">from</span> <span class="string">&quot;@sentry/electron&quot;</span>;</span><br><span class="line"></span><br><span class="line">Sentry.init(&#123; <span class="attr">dsn</span>: <span class="string">&quot;https://xxx.xxx.xxx&quot;</span> &#125;);</span><br></pre></td></tr></table></figure><p>需要注意的是不同项目的dsn是不同的，在官网的引导中会明确指出需要填写的dsn。而且官网的文档也有更详细的说明。</p><h1 id="构建"><a class="markdownIt-Anchor" href="#构建"></a> 构建</h1><p>执行项目默认的构建命令，就可以在 <code>dist_electron</code> 中生成对应操作系统的成品包：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn run electron:build</span><br></pre></td></tr></table></figure><p>需要注意的是，在某个平台构建，只能生成对应平台的安装和运行包。比如在Windows平台下会生成.exe文件，在Mac平台下会生成.dmg镜像文件。如果要生成全部的三个平台就需要找齐对应平台的系统进行构建。</p><h1 id="发布"><a class="markdownIt-Anchor" href="#发布"></a> 发布</h1><p>在github仓库页面，可以新增Releases。</p><p><img src="./github-release.png" alt="Github-Releases" /></p><p>需要填写的内容：</p><ul><li>选择需要发布的分支，版本号。填写的版本号会自动创建Tag。</li><li>填写发布标题。</li><li>填写发布说明。</li><li>上传构建的成品包。</li></ul><p>保存后就成功发布了一个版本了。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;在连续捣鼓了这个应用好几天后，感觉大部分功能实现的差不多了，就打算发布一版看一下。这次打算将成品包直接放到github上，github提供了release功能。本次发布过程还只是手动的，后续考虑如何自动的构建成品并进行发布操作。不知道Github Action支不支持这个功能。&lt;/p&gt;</summary>
    
    
    
    <category term="体验Electron" scheme="https://sumygg.com/categories/%E4%BD%93%E9%AA%8CElectron/"/>
    
    
    <category term="electron" scheme="https://sumygg.com/tags/electron/"/>
    
    <category term="sentry" scheme="https://sumygg.com/tags/sentry/"/>
    
    <category term="build" scheme="https://sumygg.com/tags/build/"/>
    
    <category term="git-release" scheme="https://sumygg.com/tags/git-release/"/>
    
  </entry>
  
  <entry>
    <title>再次从零开始捣鼓一个Electron应用——项目配置</title>
    <link href="https://sumygg.com/2021/04/23/restart-from-the-very-beginning-for-electron-with-configure-project/"/>
    <id>https://sumygg.com/2021/04/23/restart-from-the-very-beginning-for-electron-with-configure-project/</id>
    <published>2021-04-23T13:28:26.000Z</published>
    <updated>2021-04-25T06:13:50.173Z</updated>
    
    <content type="html"><![CDATA[<p>上一篇介绍如何从新搭建了一个项目，本篇重点说明一下在开发过程中遇到的一些问题，以及如何解决。鲁迅曾说过，世界上没有两个相同的程序。本系列也不会介绍代码如何编写，只是将开发过程中遇到的重点的问题记录一下，避免以后出现相同的问题。</p><span id="more"></span><h1 id="vue-devtools-无法使用未解决"><a class="markdownIt-Anchor" href="#vue-devtools-无法使用未解决"></a> Vue Devtools 无法使用（未解决）</h1><p>安装DevTools的代码在 <code>background.ts</code> 文件中，<code>installExtension()</code> 方法会尝试从应用商店下载插件。但是由于已知原因，经常无法下载，导致无法正常安装调试插件。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (isDevelopment &amp;&amp; !process.env.IS_TEST) &#123;</span><br><span class="line">  <span class="comment">// Install Vue Devtools</span></span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">// await session.defaultSession.loadExtension(path.join(__dirname, &#x27;../vue-devtools&#x27;))</span></span><br><span class="line">    <span class="keyword">await</span> installExtension(VUEJS_DEVTOOLS)</span><br><span class="line">  &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">    <span class="built_in">console</span>.error(<span class="string">&#x27;Vue Devtools failed to install:&#x27;</span>, e.toString())</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>尝试过将插件解压到本地进行加载的方式，也无法使用。最终只有将上述代码注释掉。</p><h1 id="进程通信"><a class="markdownIt-Anchor" href="#进程通信"></a> 进程通信</h1><p>在electron中分为 <code>渲染进程</code> 和 <code>主进程</code> 。渲染进程负责展示界面，有着跟浏览器一样的沙盒系统，无法直接接触原生资源。主进程负责操作原生数据，启动渲染进程展示界面。这两个进程之间通常需要传输数据。</p><p>一般方法可以在渲染进程中使用<code>require('electron').remote</code>获取到主进程对象，从而直接操作方法同步获取数据。但是这种方法有安全问题，现在已经默认关闭不推荐使用，打开需要在<code>background.ts</code>文件中创建Window的时候指定参数打开：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mainWindow = <span class="keyword">new</span> BrowserWindow(&#123;</span><br><span class="line">    <span class="attr">webPreferences</span>: &#123;</span><br><span class="line">      <span class="attr">nodeIntegration</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="attr">enableRemoteModule</span>: <span class="literal">true</span>, <span class="comment">// 增加这个配置，打开remote对象</span></span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure><p>现在比较推荐的方法是使用ipc进行通信，主进程和渲染进程之间通过事件传递信息操作数据。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 主进程中</span></span><br><span class="line"><span class="keyword">const</span> ipcMain = <span class="built_in">require</span>(<span class="string">&#x27;electron&#x27;</span>).ipcMain;</span><br><span class="line"><span class="comment">// 注册事件</span></span><br><span class="line">ipcMain.on(<span class="string">&#x27;async-event&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params">event, payload</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(payload);</span><br><span class="line">  event.sender.send(<span class="string">&#x27;async-response&#x27;</span>, <span class="string">&#x27;world&#x27;</span>); <span class="comment">// 回应异步消息</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">ipcMain.on(<span class="string">&#x27;sync-event&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params">event, payload</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(arg);</span><br><span class="line">  event.returnValue = <span class="string">&#x27;world&#x27;</span>; <span class="comment">// 回应同步消息</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 渲染进程</span></span><br><span class="line"><span class="keyword">const</span> ipcRenderer = <span class="built_in">require</span>(<span class="string">&#x27;electron&#x27;</span>).ipcRenderer;</span><br><span class="line"><span class="built_in">console</span>.log(ipcRenderer.sendSync(<span class="string">&#x27;sync-event&#x27;</span>, <span class="string">&#x27;hello&#x27;</span>)); <span class="comment">// 同步消息</span></span><br><span class="line"><span class="comment">// 注册事件</span></span><br><span class="line">ipcRenderer.on(<span class="string">&#x27;async-response&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params">event, payload</span>) </span>&#123; <span class="comment">// 异步回应事件</span></span><br><span class="line">  <span class="built_in">console</span>.log(payload);</span><br><span class="line">&#125;);</span><br><span class="line">ipcRenderer.send(<span class="string">&#x27;async-event&#x27;</span>, <span class="string">&#x27;hello&#x27;</span>); <span class="comment">// 异步消息</span></span><br></pre></td></tr></table></figure><p>使用事件的好处是可以分离主进程和渲染进程之间的逻辑，而无需关注真正的代码和方法名称。</p><h1 id="ipc通信的精简"><a class="markdownIt-Anchor" href="#ipc通信的精简"></a> ipc通信的精简</h1><p>electron一般只需要存在主进程中，但是上面的方法在使用<code>require('electron')</code>的时候，会将整个electron模块引入到渲染进程中，而在渲染进程中往往只需要访问 <code>ipcRenderer</code> 即可。</p><p>可以使用一个前置脚本 <code>preload.ts</code> 将 <code>ipcRenderer</code> 导出并挂载到window对象里。</p><figure class="highlight javascript"><figcaption><span>preload.ts</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; ipcRenderer &#125; <span class="keyword">from</span> <span class="string">&#x27;electron&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">window</span>.ipcRenderer = ipcRenderer</span><br></pre></td></tr></table></figure><p>然后在vue.config.js文件里挂载preload脚本：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="attr">pluginOptions</span>: &#123;</span><br><span class="line">    <span class="attr">electronBuilder</span>: &#123;</span><br><span class="line">      <span class="attr">preload</span>: resolve(<span class="string">&#x27;src/preload.ts&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在background.ts脚本中也要指定preload脚本：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Create the browser window.</span></span><br><span class="line"><span class="keyword">const</span> win = <span class="keyword">new</span> BrowserWindow(&#123;</span><br><span class="line">  <span class="attr">width</span>: <span class="number">800</span>,</span><br><span class="line">  <span class="attr">height</span>: <span class="number">600</span>,</span><br><span class="line">  <span class="attr">webPreferences</span>: &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Required for Spectron testing</span></span><br><span class="line">    <span class="attr">enableRemoteModule</span>: <span class="literal">true</span>,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Use pluginOptions.nodeIntegration, leave this alone</span></span><br><span class="line">    <span class="comment">// See nklayman.github.io/vue-cli-plugin-electron-builder/guide/security.html#node-integration for more info</span></span><br><span class="line">    <span class="attr">nodeIntegration</span>: (process.env.ELECTRON_NODE_INTEGRATION <span class="keyword">as</span> unknown) <span class="keyword">as</span> boolean,</span><br><span class="line">    <span class="attr">preload</span>: path.join(__dirname, <span class="string">&#x27;preload.js&#x27;</span>) <span class="comment">// 指定preload.js脚本</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>如果你使用的typescript，还需要在window对象上补充声明ipcRenderer的类型。</p><figure class="highlight typescript"><figcaption><span>global-window.d.ts</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; IpcRenderer &#125; <span class="keyword">from</span> <span class="string">&#x27;electron&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">declare</span> <span class="built_in">global</span> &#123;</span><br><span class="line">  <span class="keyword">interface</span> Window &#123;</span><br><span class="line">    <span class="attr">ipcRenderer</span>: IpcRenderer;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="无法编译本地模块"><a class="markdownIt-Anchor" href="#无法编译本地模块"></a> 无法编译本地模块</h1><p>如果项目依赖的包包含了操作系统相关的本地绑定模块（如fsevents.node），那么在构建打包的时候会出现以下异常：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">error  in ./node_modules/fsevents/fsevents.node</span><br><span class="line"></span><br><span class="line">Module parse failed: Unexpected character &#x27;�&#x27; (1:0)</span><br></pre></td></tr></table></figure><p>这是因为打包构建的时候没有找打合适的处理器来处理.node后缀的文件，但事实上这类文件本身不需要处理。就可以通过vue.config.js配置项，将这类模块进行排除。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// vue.config.js</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="attr">pluginOptions</span>: &#123;</span><br><span class="line">    <span class="attr">electronBuilder</span>: &#123;</span><br><span class="line">      <span class="comment">// List native deps here if they don&#x27;t work</span></span><br><span class="line">      <span class="attr">externals</span>: [<span class="string">&#x27;chokidar&#x27;</span>, <span class="string">&#x27;fs&#x27;</span>, <span class="string">&#x27;hexo-fs&#x27;</span>],</span><br><span class="line">      <span class="comment">// If you are using Yarn Workspaces, you may have multiple node_modules folders</span></span><br><span class="line">      <span class="comment">// List them all here so that VCP Electron Builder can find them</span></span><br><span class="line">      <span class="attr">nodeModulesPath</span>: [<span class="string">&#x27;../../node_modules&#x27;</span>, <span class="string">&#x27;./node_modules&#x27;</span>]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;上一篇介绍如何从新搭建了一个项目，本篇重点说明一下在开发过程中遇到的一些问题，以及如何解决。鲁迅曾说过，世界上没有两个相同的程序。本系列也不会介绍代码如何编写，只是将开发过程中遇到的重点的问题记录一下，避免以后出现相同的问题。&lt;/p&gt;</summary>
    
    
    
    <category term="体验Electron" scheme="https://sumygg.com/categories/%E4%BD%93%E9%AA%8CElectron/"/>
    
    
    <category term="electron" scheme="https://sumygg.com/tags/electron/"/>
    
    <category term="node" scheme="https://sumygg.com/tags/node/"/>
    
  </entry>
  
  <entry>
    <title>再次从零开始捣鼓一个Electron应用——使用electron-builder</title>
    <link href="https://sumygg.com/2021/04/22/restart-from-the-very-beginning-for-electron-with-electron-builder/"/>
    <id>https://sumygg.com/2021/04/22/restart-from-the-very-beginning-for-electron-with-electron-builder/</id>
    <published>2021-04-22T15:05:51.000Z</published>
    <updated>2021-04-24T12:33:13.070Z</updated>
    
    <content type="html"><![CDATA[<p>自从17年接触过electron后，不知过了多久就弃坑，实在想不到会重起这个系列。</p><p>先说一下重起的原因，Github会扫描仓库中使用的npm包的版本，如果发现使用了含有漏洞的版本会给出提示，需要进行升级。于是就尝试升级了一下老项目的版本依赖，在升级到最新版本之后，很自然的项目跑不起来了。</p><p>考虑到一个一个的适配版本太麻烦，而且当时使用的一些内容也过时了，所以想着不如推倒再次从零开始捣鼓一个Electron应用。希望这次能够顺利按照思路走下去，不要再无缘无故鸽了。</p><h1 id="新建的思路"><a class="markdownIt-Anchor" href="#新建的思路"></a> 新建的思路</h1><p>要新建一个electron项目，按照3年前的思路是，首先新建一个空白的electron工程，然后想办法在渲染层引入vue进行构建。</p><p>最近发现另一个思路，基于electron-builder可以在现有的vue项目上，增加electron的测试、调试和构建功能。</p><p>然后我们就按照这次的思路走下去。</p><h1 id="新建一个vue3项目"><a class="markdownIt-Anchor" href="#新建一个vue3项目"></a> 新建一个Vue3项目</h1><p>本次我们使用的是最新的Vue3作为基础，需要先检查一下目前的vue-cli版本。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash"> vue -V</span></span><br><span class="line">&lt; @vue/cli 4.5.10</span><br></pre></td></tr></table></figure><p>截止目前我的vue-cli版本是4.5.10，低版本可能无法正常创建vue项目。</p><p>创建Vue项目vue-cli提供了两种方式，命令行交互方式和网页方式。这里使用命令行交互方式：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash"> vue create electron-vue-demo</span></span><br></pre></td></tr></table></figure><p>接下来的各种选项也不进行详细说明了，根据自身的需要选择。最后vue-cli会创建默认项目并尝试安装依赖。</p><p>到达这一步的时候，使用启动命令，就能看到默认的vue页面了。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash"> yarn run serve</span></span><br></pre></td></tr></table></figure><h1 id="增加electron-builder构建"><a class="markdownIt-Anchor" href="#增加electron-builder构建"></a> 增加electron-builder构建</h1><p>electron-builder 是一个vue-cli插件，帮助我们在原来的vue-cli基础上增加electron打包功能。</p><p>在项目的目录里执行：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vue add electron-builder</span><br></pre></td></tr></table></figure><p>选择electron版本后等待安装完成。</p><p>electron-builder 会在原有项目里增加一些内容：</p><ul><li>默认测试方法</li><li>主进程启动方法</li><li>vue.config.js相关配置</li></ul><h1 id="基本操作"><a class="markdownIt-Anchor" href="#基本操作"></a> 基本操作</h1><p>在上面的一系列操作之后，一个简单的electron+Vue构建的项目就完成了。electron-builder已经在package.json中注入了一部分操作，可以使用这些命令进行本地的调试工作。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 以本地调试的方式启动</span></span><br><span class="line">yarn run electron:serve</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 构建成品</span></span><br><span class="line">yarn run electron:build</span><br></pre></td></tr></table></figure><p>现在项目已经重新搭建完毕了，可以再次愉快的编码了。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;自从17年接触过electron后，不知过了多久就弃坑，实在想不到会重起这个系列。&lt;/p&gt;
&lt;p&gt;先说一下重起的原因，Github会扫描仓库中使用的npm包的版本，如果发现使用了含有漏洞的版本会给出提示，需要进行升级。于是就尝试升级了一下老项目的版本依赖，在升级到最新版本之</summary>
      
    
    
    
    <category term="体验Electron" scheme="https://sumygg.com/categories/%E4%BD%93%E9%AA%8CElectron/"/>
    
    
    <category term="electron" scheme="https://sumygg.com/tags/electron/"/>
    
    <category term="vue" scheme="https://sumygg.com/tags/vue/"/>
    
    <category term="vue-cli" scheme="https://sumygg.com/tags/vue-cli/"/>
    
    <category term="electron-builder" scheme="https://sumygg.com/tags/electron-builder/"/>
    
  </entry>
  
  <entry>
    <title>从视频网站下载视频的那件事</title>
    <link href="https://sumygg.com/2021/04/08/find-m3u8-file-to-download-video-from-video-website/"/>
    <id>https://sumygg.com/2021/04/08/find-m3u8-file-to-download-video-from-video-website/</id>
    <published>2021-04-08T15:30:41.000Z</published>
    <updated>2021-04-26T03:36:41.001Z</updated>
    
    <content type="html"><![CDATA[<p>最近有朋友想从视频网站下载视频，于是稍微研究了一下如何下载。想当年下载视频的时候都有工具能够自动解析，随着时间的发展，这类工具要不不再更新了，要不无法支持某些视频网站的下载。这里使用的工具是m3u8-downloader，主要探讨如何手动获取各个视频网站的m3u8文件。找到m3u8文件后，通过m3u8-downloader工具就可以实现视频片段的下载和自动合并工作。</p><h1 id="腾讯视频"><a class="markdownIt-Anchor" href="#腾讯视频"></a> 腾讯视频</h1><p>首先吐槽一下腾讯视频的广告时间好长。广告时间过去后，在播放器右键选择【复制调试信息】，会得到一串JSON格式串。</p><p><img src="1-1.png" alt="复制调试信息" /></p><p>找一个格式化JSON的网站，可以更方便的看到里面的结构。其中的vurl部分就是被编码的m3u8地址。</p><p><img src="1-2.png" alt="格式化JSON串" /></p><p>再使用一个urlDecode的工具，解码出来地址就可以使用了。</p><p><img src="1-3.png" alt="解码地址" /></p><h1 id="优酷视频"><a class="markdownIt-Anchor" href="#优酷视频"></a> 优酷视频</h1><p>优酷视频就比较简单了，打开控制台，切换下对应的清晰度，在Network标签页，搜索m3u8就可以看到对应的地址了，这个地址直接可以下载。需要注意的是VIP和超前点播有加密，虽然能下载但是却无法播放。另外想吐槽的是，优酷的水印居然不是加在视频上的。</p><p><img src="2-1.png" alt="控制台获取地址" /></p><h1 id="芒果tv"><a class="markdownIt-Anchor" href="#芒果tv"></a> 芒果TV</h1><p>芒果TV和优酷视频一样，也是打开控制台，然后搜索对应的m3u8文件。但是不同的是直接下载的话会提示下载失败，需要提供【请求头】。这部分信息也可以在控制台里找到，复制【Request Headers】里的内容到下载器里即可。</p><p><img src="3-1.png" alt="控制台获取地址" /></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;最近有朋友想从视频网站下载视频，于是稍微研究了一下如何下载。想当年下载视频的时候都有工具能够自动解析，随着时间的发展，这类工具要不不再更新了，要不无法支持某些视频网站的下载。这里使用的工具是m3u8-downloader，主要探讨如何手动获取各个视频网站的m3u8文件。找到</summary>
      
    
    
    
    <category term="高效生活" scheme="https://sumygg.com/categories/%E9%AB%98%E6%95%88%E7%94%9F%E6%B4%BB/"/>
    
    
    <category term="m3u8" scheme="https://sumygg.com/tags/m3u8/"/>
    
    <category term="视频" scheme="https://sumygg.com/tags/%E8%A7%86%E9%A2%91/"/>
    
    <category term="下载" scheme="https://sumygg.com/tags/%E4%B8%8B%E8%BD%BD/"/>
    
  </entry>
  
  <entry>
    <title>使用Jetpack Compose For Desktop创建生成式艺术和算法创作探索程序</title>
    <link href="https://sumygg.com/2021/04/05/generative-art-explorer-in-kotin-with-jetpack-compse-for-desktop/"/>
    <id>https://sumygg.com/2021/04/05/generative-art-explorer-in-kotin-with-jetpack-compse-for-desktop/</id>
    <published>2021-04-04T16:12:49.000Z</published>
    <updated>2021-04-20T13:24:04.257Z</updated>
    
    <content type="html"><![CDATA[<p>日常刷微博的时候，发现了有人推荐一个生成式艺术的github仓库，看到里面的样例图片，展示出的艺术形式看起来很不错。不过这个代码是用go语言编写的，而且只支持命令行模式，没有图像化的界面。本着重复造轮子的思想，就想着能不能用kotlin重新来一遍，又考虑到最近关注的 <strong>jetpack compose for desktop</strong> ，就这样一个整合式的想法就诞生了。</p><p>这个程序到底是干什么？也没有什么定论。不要问，问就是 <strong>艺术</strong> ！总之喜欢什么就往里放什么，最后会变成一个大杂烩的形式。</p><p>在开始说明之前，欢迎大家前来体验，并给个三连<a href="https://github.com/sumy7/an-arts">sumy7/an-arts</a>。</p><h1 id="生成式艺术"><a class="markdownIt-Anchor" href="#生成式艺术"></a> 生成式艺术</h1><p>如何理解生成式艺术（generative）？</p><blockquote><p>自动生成艺术是指如果仔细观察艺术家与科学家利用计算机所做的事情，那就是让赋予计算机自主性，设计了一定的规则让它们自由发挥，从而得到了无法复制、美丽的结果。</p></blockquote><p>我的理解是根据输入参数（大小、颜色、多少）和一些随机数，经过一系列的绘制变换，最终生成的一幅图像。这个过程离程序自主学习、自由发挥的场景还比较遥远。还是只能以人工的方式介入一个固定的算法。</p><p>说到绘制图像，不得不提到 Canvas ，这个神奇的名字不止出现的前端Web领域，在Android和Java也有一席之地。为了兼顾效率和成本，生成式艺术不得不借助此类技术。幸运的是，处于开发阶段的 <strong>jetpack compose for desktop</strong> 对 canvas 有了实现，这就为本程序鉴定了基础。</p><h1 id="程序架构"><a class="markdownIt-Anchor" href="#程序架构"></a> 程序架构</h1><p>第一印象下构想出来的界面是一个左右分栏，左边可以对Arts进行配置，右侧展示配置后的效果。</p><p><img src="CircleLoop.png" alt="第一个完成的Arts" /></p><p>上图展示了浏览界面的一个效果，topbar展示当前浏览的Arts名称，点击左侧的按钮可以出现一个列表用于快速切换到其它Arts。</p><h1 id="可配置化表单"><a class="markdownIt-Anchor" href="#可配置化表单"></a> 可配置化表单</h1><p>借助于 <strong>jetpack compse</strong> 使得对响应式变量的改变能够迅速反映到界面上，有一种正在写vue的感觉。而恰恰是这种响应式，让我可以将以前在Web端构想的“自定义表单”模式在此处加以实现。</p><p>使用反射获取到配置类中的各个属性，判断属性上是否有对应的注解。根据注解的类型渲染出对应的表单项，并将注解所在的响应式变量与表单项进行绑定。</p><p>一个典型的表单项配置如下：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * CircleGridScale 表单项配置定义</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CircleGridScaleConfig</span> : <span class="type">ArtsConfig</span></span>() &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 背景色</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@get:ColorChooseFormItem</span>(title = <span class="string">&quot;background&quot;</span>)</span><br><span class="line">    <span class="keyword">val</span> background = mutableStateOf(Color.White)</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 前景色</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@get:ColorChooseFormItem</span>(title = <span class="string">&quot;foreground&quot;</span>)</span><br><span class="line">    <span class="keyword">val</span> foreground = mutableStateOf(Color.Black)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>@ColorChooseFormItem</code> 就是一个用于单个渲染颜色选择器的注解。目前已实现了静态文本、输入框、滑块、单选框、单个颜色选择和系列颜色选择的注解表单项。后续还会根据需要不断补充和完善。</p><p>操作表单项会引起绑定的响应式属性的变化，而属性的变化又会间接影响到渲染内容的刷新。整个过程就这样一气呵成。</p><h1 id="支持动画"><a class="markdownIt-Anchor" href="#支持动画"></a> 支持动画</h1><p>我不仅考虑了静态Arts，还想将动态的Arts也一并展示出来。谁又不爱魔性的动画呢？</p><p>说起动画就不得不提到动画渲染和主循环，动画渲染这里仍然使用Canvas进行渲染，那么主循环该如何实现？一般动画的主循环要完成两件事情——Update和Draw。Update阶段对属性进行重新计算，更新对应属性值。Draw阶段则会利用新的属性值重新绘制（这里没有使用增量过程）所有的画面。每循环一次就会完成一帧画面，不断的循环量不断的重绘，动画就这样出现了。</p><p>要支持动画就要解决Update和Draw这两个问题。Draw阶段借助于 <strong>jetpack compse</strong> 的 <strong>recompse</strong> 过程，只要将一些关键属性设置为响应式模式，修改这些关键属性自然会引起重绘。Draw虽然解决了，但是Update还是需要一个循环来控制它。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">LaunchedEffect(<span class="built_in">Unit</span>) &#123;</span><br><span class="line">  <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">      <span class="keyword">var</span> lastNanos = System.nanoTime()</span><br><span class="line">      withFrameNanos &#123;</span><br><span class="line">          <span class="keyword">val</span> elapsedNanos = (it - lastNanos).coerceAtLeast(<span class="number">0L</span>)</span><br><span class="line">          lastNanos = it</span><br><span class="line">          <span class="keyword">if</span> (artsModel.artsType.animated &amp;&amp; !isPause) &#123;</span><br><span class="line">              artsModel.arts.onUpdate(elapsedNanos)</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里借助协程切入到动画效果更新中。由此作为主循环执行Update操作。</p><p>于是每个Arts就要出现三个生命周期，onInit、onUpdate和onDraw。在这三个生命周期里onInit完成变量的初始化，onUpdate对关键属性进行更新，onDraw描绘单次绘制的方法。而动画Arts和普通Arts差异仅仅体现在onUpdate是否会进行调用。</p><p><img src="Hearts.png" alt="从svg+js迁移的动画" /></p><p>有了动画Arts类型之后，我又尝试收集一些动画效果进行实现，其中不乏对svg和javascript动画效果的迁移。</p><p>这里还实现了一个暂停播放的功能，也是非常的简单，主要原理是在循环中停掉Update的过程，相对应的Draw过程也会停止，即使发生了重绘，由于属性值没有发生变化，与上一帧也会是相同的。</p><h1 id="未来"><a class="markdownIt-Anchor" href="#未来"></a> 未来</h1><p>目前已经实现（借鉴？抄？迁移？）了一些生成式艺术的算法，总体感觉来说还是可以接受的。但是也不会止步于此，后续有时间还会继续进行补充，目标是《十万个生成式艺术》。</p><p>现在一进入程序就会出现一个默认的（字母序第一个）Arts，考虑到后续增多，可以考虑做个首页，从首页进入各自的详情页。</p><p>当然还有几个方面不太理想，界面还需要继续打磨，现在用的还只是默认样式，相信随着学习的深入，一定会变得越来越能看的。图像只能观看不能保存，这个暂时没有找到什么好方法解决，等以后解决了再单独开个文章进行讲解吧。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;日常刷微博的时候，发现了有人推荐一个生成式艺术的github仓库，看到里面的样例图片，展示出的艺术形式看起来很不错。不过这个代码是用go语言编写的，而且只支持命令行模式，没有图像化的界面。本着重复造轮子的思想，就想着能不能用kotlin重新来一遍，又考虑到最近关注的 &lt;st</summary>
      
    
    
    
    <category term="艺术人生" scheme="https://sumygg.com/categories/%E8%89%BA%E6%9C%AF%E4%BA%BA%E7%94%9F/"/>
    
    
    <category term="kotlin" scheme="https://sumygg.com/tags/kotlin/"/>
    
    <category term="generative-art" scheme="https://sumygg.com/tags/generative-art/"/>
    
    <category term="generative" scheme="https://sumygg.com/tags/generative/"/>
    
    <category term="jetpack-compose" scheme="https://sumygg.com/tags/jetpack-compose/"/>
    
  </entry>
  
  <entry>
    <title>博客评论系统迁移到Valine</title>
    <link href="https://sumygg.com/2021/03/29/blog-switch-to-valine-comments-plugin/"/>
    <id>https://sumygg.com/2021/03/29/blog-switch-to-valine-comments-plugin/</id>
    <published>2021-03-29T07:58:01.000Z</published>
    <updated>2021-04-20T13:24:04.257Z</updated>
    
    <content type="html"><![CDATA[<p>原来博客的评论系统使用的disqus，个人还是比较喜欢disqus评论的，无奈被“限制”的太厉害，常年加载不出来。无奈只好寻求其它的解决方案。</p><p>参考几个评论系统，有几款基于Github Issues的评论系统，有专门的评论系统（来必力等）。基于Github Issues的在存储上不成问题，但是考虑到评论导入的问题，就不太好操作了，切换到这类评论系统需要舍弃以前的评论信息。第三方的评论系统就要考虑随时被墙的问题，而且打开速度也有影响。</p><p>最后选择了Valine，主要看中了其没有后端，可以操作数据库，“伪造”评论 <img class="emoji" draggable="false" alt="😅" src="https://twemoji.maxcdn.com/2/72x72/1f605.png"/>。</p><h1 id="添加评论系统"><a class="markdownIt-Anchor" href="#添加评论系统"></a> 添加评论系统</h1><p>首先需要获取评论系统使用的appId和appKey，这个就不多介绍了，可以参考<a href="https://valine.js.org/">valine</a>文档中的快速开始部分进行获取。</p><p>本博客使用了 maupassant 主题，没有配置对应的评论模块，需要自己手动添加。</p><p>先在博客配置文件 _config.yml 中增加关于valine主题的配置。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">valine:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span> <span class="comment">#valine全局开关</span></span><br><span class="line">  <span class="attr">app_id:</span> <span class="comment">#获取的appId</span></span><br><span class="line">  <span class="attr">app_key:</span> <span class="comment">#获取的appKey</span></span><br><span class="line">  <span class="attr">visitor:</span> <span class="literal">true</span> <span class="comment">#是否启用访问统计</span></span><br></pre></td></tr></table></figure><p>添加好配置后，找到评论渲染的位置 _partial/comments.pug 文件，引入公共js并渲染评论控件。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">if theme.valine.enable</span><br><span class="line">  script(src=&quot;//unpkg.com/valine/dist/Valine.min.js&quot;) </span><br><span class="line">  #vcomments</span><br><span class="line">    script.</span><br><span class="line">      new Valine(&#123;</span><br><span class="line">          el: &#x27;#vcomments&#x27;,</span><br><span class="line">          appId: &#x27;#&#123;theme.valine.app_id&#125;&#x27;,</span><br><span class="line">          appKey: &#x27;#&#123;theme.valine.app_key&#125;&#x27;,</span><br><span class="line">          path: &#x27;#&#123;page.path&#125;&#x27;,</span><br><span class="line">          visitor: #&#123;theme.valine.visitor&#125;</span><br><span class="line">      &#125;)</span><br></pre></td></tr></table></figure><p>可以用valine的访问统计替换掉busuanzi的访问统计，找到 post.pug 文件中的访问统计位置，增加以下模板：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">if theme.valine.enable &amp;&amp; theme.valine.visitor</span><br><span class="line">  span#valine_container_page_pv= &#x27; | &#x27;</span><br><span class="line">    span(id=page.path class=&#x27;leancloud_visitors&#x27;)</span><br><span class="line">      span.leancloud-visitors-count</span><br><span class="line">        i.fa.fa-spinner.fa-spin</span><br><span class="line">      span= &#x27; &#x27; + __(&#x27;Hits&#x27;)</span><br></pre></td></tr></table></figure><p>这样基本上就能使用了。</p><h1 id="迁移评论数据"><a class="markdownIt-Anchor" href="#迁移评论数据"></a> 迁移评论数据</h1><p>接下来需要将评论数据从disqus迁移到valine中。从disqus导出评论数据。在disqus后台，Export可以导出所有的评论数据。导出后从邮件里就会获取一个所有评论的xml文件。</p><p>下载完数据后，找到一个disqus导入valine数据的网站，<a href="https://taosky.github.io/disqus-to-valine/">https://taosky.github.io/disqus-to-valine/</a>可以将disqus评论数据转换成valine并直接导入到数据库中。</p><p>导入完成之后，还需要调整下数据权限，防止客户端随便删除评论。</p><p>LeanCloud上有个批量操作数据的功能，将所有数据的ALC更新成 <code>&#123;&quot;*&quot;:&#123;&quot;read&quot;:true&#125;&#125;</code> 即可。</p><p><img src="1.png" alt="更新数据权限" /></p><p>这样数据迁移就完成了。</p><h1 id="其它"><a class="markdownIt-Anchor" href="#其它"></a> 其它</h1><p>现在评论已经切换到valine中，还有一些功能，比如 <strong>最近评论列表</strong> 和需要展示的 <strong>评论数量</strong> 看怎么能实现，目前这两个功能暂时先空缺了。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;原来博客的评论系统使用的disqus，个人还是比较喜欢disqus评论的，无奈被“限制”的太厉害，常年加载不出来。无奈只好寻求其它的解决方案。&lt;/p&gt;
&lt;p&gt;参考几个评论系统，有几款基于Github Issues的评论系统，有专门的评论系统（来必力等）。基于Github I</summary>
      
    
    
    
    <category term="网站" scheme="https://sumygg.com/categories/%E7%BD%91%E7%AB%99/"/>
    
    
    <category term="valine" scheme="https://sumygg.com/tags/valine/"/>
    
    <category term="评论" scheme="https://sumygg.com/tags/%E8%AF%84%E8%AE%BA/"/>
    
  </entry>
  
  <entry>
    <title>使用树莓派制作一个电子日历</title>
    <link href="https://sumygg.com/2021/03/23/raspberry-pi-with-ink-screen-to-build-electronic-calendar/"/>
    <id>https://sumygg.com/2021/03/23/raspberry-pi-with-ink-screen-to-build-electronic-calendar/</id>
    <published>2021-03-22T16:13:30.000Z</published>
    <updated>2021-04-20T13:24:04.257Z</updated>
    
    <content type="html"><![CDATA[<p>闲暇时候看到一篇文章，介绍可以用树莓派加一块墨水屏制作一个电子日历，然后心血来潮就打算自己也制作一个。前前后后磨蹭了一年的时间，终于克服了懒癌在去年十一假期的时候制作出来了。这段时间看到小米有品也出了一款电子日历，算下来成本和自己制作的差不多。但是怎么说，自己制作的日历可是带了一个树莓派呀，四舍五入就价值一个亿了呀。</p><p>先来看一下成品：</p><p><img src="1.jpeg" alt="电子日历" /></p><p>整个日历用一个收纳盒包装起来，日历展示了时间、日期、天气和一年进度。这个展示模板只是考虑尽量不联网情况下的内容。不得不说，在不联网的情况下能够展示的资源比较少，基于网络上的其它API进行功能的扩展，可用性就大大增强了。</p><h1 id="材料准备"><a class="markdownIt-Anchor" href="#材料准备"></a> 材料准备</h1><p>主要“材料”是一个树莓派、一块电子墨水屏和两张sd卡。</p><ul><li>树莓派使用的是树莓派3b+，某宝上可以搜索一下，很容易找到</li><li>电子墨水屏用的是微雪4.3inch e-Paper</li><li>两张sd卡和读卡器，一张用来做树莓派的存储安装系统，另一张为墨水屏展示提供图片素材存储，容量不需要太大</li><li>建议再准备一套外接的键盘、鼠标、显示器和hdmi线，方便在树莓派上调试和操作</li></ul><h1 id="树莓派准备"><a class="markdownIt-Anchor" href="#树莓派准备"></a> 树莓派准备</h1><h2 id="安装系统"><a class="markdownIt-Anchor" href="#安装系统"></a> 安装系统</h2><p>首先需要安装系统，从官网<a href="https://www.raspberrypi.org/downloads/raspberry-pi-os/">https://www.raspberrypi.org/downloads/raspberry-pi-os/</a>下载系统镜像，选择 <strong>Raspberry Pi OS with desktop and recommended software</strong>进行下载。</p><p>下载完镜像之后，需要一个软件<a href="https://sourceforge.net/projects/win32diskimager/">win32diskimager</a>将镜像写入到sd卡中，<strong>Image File</strong> 选择刚下载的系统镜像，<strong>Device</strong> 选择sd卡的盘符，注意不要选错了。写入完成后将sd卡插入到树莓派中，然后就可以开机使用树莓派了。</p><h2 id="硬件连接"><a class="markdownIt-Anchor" href="#硬件连接"></a> 硬件连接</h2><p>我也是嵌入式苦手，在接线这点也卡了好久，主要是确定哪个引脚叫什么比较麻烦，参考了好多个教程才搞定。这里提供树莓派和墨水屏的引脚图进行参考。</p><p><img src="2.png" alt="树莓派引脚图" /></p><p>墨水屏的引脚说明图在连线的下方，很容易就能找到。</p><p><img src="3.jpg" alt="墨水屏引脚图" /></p><p>按照以下进行连接，线色仅供参考。再提一句，树莓派3V的引脚在实物图的左侧。</p><table><thead><tr><th>屏幕</th><th>树莓派</th><th>线色</th></tr></thead><tbody><tr><td>DIN</td><td>TX(GPIO14)</td><td>绿</td></tr><tr><td>DOUT</td><td>RX(GPIO15)</td><td>白</td></tr><tr><td>GND</td><td>GND</td><td>黑</td></tr><tr><td>VCC</td><td>3V</td><td>红</td></tr></tbody></table><h2 id="软件配置"><a class="markdownIt-Anchor" href="#软件配置"></a> 软件配置</h2><p>树莓派默认的串口已经有其它用途，所以需要释放串口用于控制墨水屏。</p><p>先连接无线网络，常规操作更新一下系统</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get upgrade</span><br></pre></td></tr></table></figure><p>编辑 /boot/config.txt 添加一行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dtoverlay=pi3-miniuart-bt</span><br></pre></td></tr></table></figure><p>禁用自带蓝牙</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl disable hciuart</span><br></pre></td></tr></table></figure><p>释放串口，编辑 /boot/cmdline.txt</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">删掉 console=ttyAMA0,115200</span><br></pre></td></tr></table></figure><p>安装墨水屏驱动</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install python-requests python-lxml python-serial git build-essential python-dev</span><br><span class="line">git clone https://github.com/adafruit/Adafruit_Python_DHT.git</span><br><span class="line">cd Adafruit_Python_DHT</span><br><span class="line">sudo python ./setup.py install</span><br></pre></td></tr></table></figure><h2 id="电子日历展示程序"><a class="markdownIt-Anchor" href="#电子日历展示程序"></a> 电子日历展示程序</h2><p>这个墨水屏是通过屏幕里的sd加载图片资源和字体资源的，所以需要将sd卡格式化成FAT32格式，分配单元大小选择 4096 字节，然后把展示程序附带的资源拷贝到sd卡中，再插入到屏幕卡槽里使用。</p><p>这里可以使用我提供的展示程序 <a href="https://github.com/sumy7/rasepbarry-pi-epaper">https://github.com/sumy7/rasepbarry-pi-epaper</a>，或者参考附录里提供的展示程序也可以。只要注意屏幕的资源相匹配即可（俩用的应该是相同的资源）。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /home/pi</span><br><span class="line">git clone https://github.com/sumy7/rasepbarry-pi-epaper</span><br></pre></td></tr></table></figure><p>在程序目录 /home/pi/rasepbarry-pi-epaper/ 里执行 <code>python ./main.py</code> 命令，就可以看到屏幕刷新了。</p><h2 id="定时程序"><a class="markdownIt-Anchor" href="#定时程序"></a> 定时程序</h2><p>屏幕不是自动刷新的，而是每执行一次命令则刷新一次。这样需要配置一个定时任务让屏幕可以自动刷新。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sudo crontab -e</span><br><span class="line"></span><br><span class="line"># 在其中增加以下代码，注意展示程序放置的目录</span><br><span class="line"></span><br><span class="line">*/1 * * * * cd /home/pi/rasepbarry-pi-epaper/ &amp;&amp; python ./main.py</span><br></pre></td></tr></table></figure><p>命令配置的是每个1分钟刷新一次，间隔不用太长，墨水屏的刷新率本身就很低。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;闲暇时候看到一篇文章，介绍可以用树莓派加一块墨水屏制作一个电子日历，然后心血来潮就打算自己也制作一个。前前后后磨蹭了一年的时间，终于克服了懒癌在去年十一假期的时候制作出来了。这段时间看到小米有品也出了一款电子日历，算下来成本和自己制作的差不多。但是怎么说，自己制作的日历可是</summary>
      
    
    
    
    <category term="实践" scheme="https://sumygg.com/categories/%E5%AE%9E%E8%B7%B5/"/>
    
    
    <category term="树莓派" scheme="https://sumygg.com/tags/%E6%A0%91%E8%8E%93%E6%B4%BE/"/>
    
    <category term="电子日历" scheme="https://sumygg.com/tags/%E7%94%B5%E5%AD%90%E6%97%A5%E5%8E%86/"/>
    
    <category term="墨水屏" scheme="https://sumygg.com/tags/%E5%A2%A8%E6%B0%B4%E5%B1%8F/"/>
    
    <category term="raspberry_pi" scheme="https://sumygg.com/tags/raspberry-pi/"/>
    
  </entry>
  
  <entry>
    <title>解析用户输入表达式的值，简易的JS沙箱</title>
    <link href="https://sumygg.com/2021/03/22/eval-js-expression-that-can-only-use-allowed-functions/"/>
    <id>https://sumygg.com/2021/03/22/eval-js-expression-that-can-only-use-allowed-functions/</id>
    <published>2021-03-22T15:42:01.000Z</published>
    <updated>2021-04-20T13:24:04.256Z</updated>
    
    <content type="html"><![CDATA[<p>有时候我们需要解析用户输入的表达式，用户输入的表达式千奇百怪，如何控制只能使用指定的函数，制作一个简易的沙箱环境？</p><p>参考Vue的代码，实现以下效果：</p><ol><li>获取用户输入表达式字符串的值</li><li>只能访问指定对象上的值</li><li>不能访问global/window上定义的变量属性</li></ol><p>代码及测试代码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">makeMap</span>(<span class="params">str, expectsLowerCase</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> map = <span class="built_in">Object</span>.create(<span class="literal">null</span>);</span><br><span class="line">    <span class="keyword">var</span> list = str.split(<span class="string">&#x27;,&#x27;</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; list.length; i++) &#123;</span><br><span class="line">        map[list[i]] = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> expectsLowerCase ?</span><br><span class="line">        <span class="function"><span class="keyword">function</span> (<span class="params">val</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> map[val.toLowerCase()];</span><br><span class="line">        &#125; :</span><br><span class="line">        <span class="function"><span class="keyword">function</span> (<span class="params">val</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> map[val];</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> allowedGlobal = makeMap(<span class="string">&#x27;Infinity,undefined,NaN,isFinite,isNaN,&#x27;</span> +</span><br><span class="line">    <span class="string">&#x27;parseFloat,parseInt,decodeURI,decodeURIComponent,encodeURI,encodeURIComponent,&#x27;</span> +</span><br><span class="line">    <span class="string">&#x27;Math,Number,Date,Array,Object,Boolean,String,RegExp,Map,Set,JSON,Intl,&#x27;</span> +</span><br><span class="line">    <span class="string">&#x27;require&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> hasHandler = &#123;</span><br><span class="line">    <span class="attr">has</span>: <span class="function"><span class="keyword">function</span> <span class="title">has</span>(<span class="params">target, key</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">const</span> hasKey = key <span class="keyword">in</span> target;</span><br><span class="line">        <span class="keyword">const</span> isAllowed = allowedGlobal(key);</span><br><span class="line">        <span class="keyword">return</span> hasKey || !isAllowed;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> vm = &#123;</span><br><span class="line">    <span class="attr">foo</span>: -<span class="number">1</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> vm = <span class="keyword">new</span> <span class="built_in">Proxy</span>(vm, hasHandler);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> buildFunction = <span class="function"><span class="keyword">function</span> (<span class="params">vm, expression</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> fun = <span class="keyword">new</span> <span class="built_in">Function</span>(<span class="string">&quot;vm&quot;</span>, <span class="string">`</span></span><br><span class="line"><span class="string">        with(vm) &#123;</span></span><br><span class="line"><span class="string">            return <span class="subst">$&#123;expression&#125;</span>;</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">    `</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> fun(vm);</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 尝试访问vm上的foo对象，和全局定义的Math对象</span></span><br><span class="line"><span class="keyword">var</span> okExpression = <span class="string">&#x27;Math.abs(foo)&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> okEval = buildFunction(vm, okExpression);</span><br><span class="line">okEval();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 尝试访问全局的test_foo</span></span><br><span class="line"><span class="built_in">window</span>.test_foo = <span class="string">&quot;Hello there&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> errExpression = <span class="string">&#x27;test_foo || window.test_foo&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> errEval = buildFunction(vm, errExpression);</span><br><span class="line">errEval();</span><br></pre></td></tr></table></figure><p>稍微解释一下原理：使用JS的Proxy代理，hasHandler用于拦截判断某个属性是否存在对象上的操作。这里用到了Proxy的两个拦截器——<code>has</code> 和 <code>get</code>。<code>has</code> 用于表明给定的属性是否在该对象内，如果不在引擎会尝试向外层作用于查找。<code>get</code> 用于从查找到的作用于里获取对应属性的值。</p><p>这里使用了 <code>has</code> 进行拦截操作：</p><ul><li>如果访问的属性已经存在vm对象上，则 <code>has</code> 直接声明存在当前对象上</li><li>如果属性不在vm对象上，但是在allowedGlobal中，则 <code>has</code> 声明变量不在该对象上，引擎会往外层作用域查找，最终找到window/global对象上的属性</li><li>如果属性不在vm对象上，也不在allowedGlobal中，则 <code>has</code> 声明变量在该对象上，拦截引擎的外层作用域查找操作。后续通过 <code>get</code> 在当前对象返回属性值时只能获取到 <strong>undefined</strong>，达到拦截对window/global属性访问的目的</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;有时候我们需要解析用户输入的表达式，用户输入的表达式千奇百怪，如何控制只能使用指定的函数，制作一个简易的沙箱环境？&lt;/p&gt;
&lt;p&gt;参考Vue的代码，实现以下效果：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;获取用户输入表达式字符串的值&lt;/li&gt;
&lt;li&gt;只能访问指定对象上的值&lt;/li&gt;
&lt;</summary>
      
    
    
    
    <category term="果然还是前端" scheme="https://sumygg.com/categories/%E6%9E%9C%E7%84%B6%E8%BF%98%E6%98%AF%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="javascript" scheme="https://sumygg.com/tags/javascript/"/>
    
    <category term="expression" scheme="https://sumygg.com/tags/expression/"/>
    
    <category term="表达式" scheme="https://sumygg.com/tags/%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    
    <category term="沙箱" scheme="https://sumygg.com/tags/%E6%B2%99%E7%AE%B1/"/>
    
  </entry>
  
  <entry>
    <title>使用Bootstrap的popovers时鼠标移动到tips也保持展示</title>
    <link href="https://sumygg.com/2021/03/17/keep-bootstrap-popovers-alive-while-hovered-tips/"/>
    <id>https://sumygg.com/2021/03/17/keep-bootstrap-popovers-alive-while-hovered-tips/</id>
    <published>2021-03-17T15:24:45.000Z</published>
    <updated>2021-04-20T13:24:04.256Z</updated>
    
    <content type="html"><![CDATA[<p>目的是需要制作一个点击可以打开OA进行聊天的链接，鼠标放置上去可以展示当前人的邮箱等联系方式。</p><p>以前的平台使用的是Bootstrap的前端控件，所以选择popover控件作为实现的基础控件。但是使用时发现，popover控件提供的几种方式，hover模式下鼠标移开之后tips就会关闭，而click的体验不太好。想要的效果是，鼠标移动展示邮箱tips，鼠标移动到tips上可以进一步操作（选中复制邮箱等）。</p><p>参考了Stack Overflow上的一个问题，最终实现了该功能。</p><p>核心代码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&#x27;.pop&#x27;</span>).popover(&#123;</span><br><span class="line">    <span class="attr">trigger</span>: <span class="string">&#x27;manual&#x27;</span>,</span><br><span class="line">    <span class="attr">html</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">animation</span>: <span class="literal">false</span></span><br><span class="line">&#125;)</span><br><span class="line">.on(<span class="string">&#x27;mouseenter&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> _this = <span class="built_in">this</span>;</span><br><span class="line">    $(<span class="built_in">this</span>).popover(<span class="string">&#x27;show&#x27;</span>);</span><br><span class="line">    $(<span class="string">&#x27;.popover&#x27;</span>).on(<span class="string">&#x27;mouseleave&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      $(_this).popover(<span class="string">&#x27;hide&#x27;</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;).on(<span class="string">&#x27;mouseleave&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> _this = <span class="built_in">this</span>;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!$(<span class="string">&#x27;.popover:hover&#x27;</span>).length) &#123;</span><br><span class="line">          $(_this).popover(<span class="string">&#x27;hide&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;, <span class="number">300</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>实现的大体思想是，将popover的触发模式改为手动manual。然后监听鼠标进入离开的事件。</p><ul><li>如果鼠标进入触发位置，则弹出popover，并注册一个离开tips则隐藏的事件</li><li>如果鼠标离开触发位置，则300ms后判断，鼠标不在tips时则隐藏</li><li>鼠标离开tips时，触发进入时注册的事件，进行隐藏</li></ul><p>实现效果：</p><iframe height="532" style="width: 100%;" scrolling="no" title="QWGRqbw" src="https://codepen.io/sumy7/embed/preview/QWGRqbw?height=532&theme-id=light&default-tab=result" frameborder="no" loading="lazy" allowtransparency="true" allowfullscreen="true">  See the Pen <a href='https://codepen.io/sumy7/pen/QWGRqbw'>QWGRqbw</a> by sumy  (<a href='https://codepen.io/sumy7'>@sumy7</a>) on <a href='https://codepen.io'>CodePen</a>.</iframe><p>直接使用的是Stack Overflow的栗子，可以进行适当改进，原理还是差不多的。如果有幸能找到以前的代码，会再修改完善一下。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;目的是需要制作一个点击可以打开OA进行聊天的链接，鼠标放置上去可以展示当前人的邮箱等联系方式。&lt;/p&gt;
&lt;p&gt;以前的平台使用的是Bootstrap的前端控件，所以选择popover控件作为实现的基础控件。但是使用时发现，popover控件提供的几种方式，hover模式下鼠标</summary>
      
    
    
    
    <category term="果然还是前端" scheme="https://sumygg.com/categories/%E6%9E%9C%E7%84%B6%E8%BF%98%E6%98%AF%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="jquery" scheme="https://sumygg.com/tags/jquery/"/>
    
    <category term="bootstrap" scheme="https://sumygg.com/tags/bootstrap/"/>
    
    <category term="popover" scheme="https://sumygg.com/tags/popover/"/>
    
  </entry>
  
  <entry>
    <title>Maven构建Spring时连同进行npm构建并合并部署</title>
    <link href="https://sumygg.com/2021/03/16/spring-maven-package-with-npm-build-dist/"/>
    <id>https://sumygg.com/2021/03/16/spring-maven-package-with-npm-build-dist/</id>
    <published>2021-03-16T12:46:06.000Z</published>
    <updated>2021-04-20T13:24:04.255Z</updated>
    
    <content type="html"><![CDATA[<p>前后端分离已成为现在的主流。一个项目后端使用Java+SpringBoot的模式，提供接口；前端使用Vue提供用户界面。前后端的差异也体现在了部署上，后端需要一套JDK环境，而前端可能只需要一个静态网页服务器。</p><p>在这种前后端模式成熟的基础上，为什么还需要将前后端部署在一起（同一容器）呢？可能有以下几个原因：</p><ol><li>前端后端都是一个人写的，关联性比较强，可能更适合一起部署</li><li>对JSP等模板渲染有情怀，不想让页面和数据分离</li><li>合并部署可以节省一个容器，节省部署成本 <img class="emoji" draggable="false" alt="🤔" src="https://twemoji.maxcdn.com/2/72x72/1f914.png"/></li></ol><p>那如何进行前后端合并部署？下面直接说配置方法：</p><h1 id="合并部署"><a class="markdownIt-Anchor" href="#合并部署"></a> 合并部署</h1><p>首先需要有一个Maven构建的SpringBoot项目，在此基础上，增加前端代码模块。</p><h2 id="增加前端代码模块"><a class="markdownIt-Anchor" href="#增加前端代码模块"></a> 增加前端代码模块</h2><p>在maven中增加一个模块，将所有前端代码都拷贝到模块目录里，假如你的前端项目使用的也是vue，那么你就会得到一个类似于这样的目录结构。</p><p><img src="1.png" alt="目录结构" /></p><p>别忘了在其它模块中引用该模块的成品jar，使其能够正常参与到构建中。</p><p>下面分步骤来说明如何配置pom.xml文件。</p><h2 id="准备node环境"><a class="markdownIt-Anchor" href="#准备node环境"></a> 准备node环境</h2><p>没有node环境，就需要提前做一步操作，将node环境安装到本机中。如果使用jenkins构建，可以增加一步shell操作，用来安装部署node环境。使用的命令如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">curl -kv  https://mirrors.huaweicloud.com/nodejs/v10.15.3/node-v10.15.3-linux-x64.tar.gz  -o /usr/local/node-v10.15.3-linux-x64.tar.gz</span><br><span class="line">tar -zxvf /usr/local/node-v10.15.3-linux-x64.tar.gz -C /usr/local/</span><br><span class="line">export NODEJS_HOME=&quot;/usr/local/node-v10.15.3-linux-x64&quot;</span><br><span class="line">export PATH=&quot;$&#123;NODEJS_HOME&#125;/bin:$&#123;PATH&#125;&quot;</span><br></pre></td></tr></table></figure><p>需要注意的是下载node的地址需要根据实际情况进行修改。</p><h2 id="存在node环境"><a class="markdownIt-Anchor" href="#存在node环境"></a> 存在node环境</h2><p>如果你的构建环境比较给力，恰巧有node，那一切都简单了。只需要一个 <strong>exec-maven-plugin</strong> 插件，依赖执行配置镜像源、安装依赖、构建成品的npm指令即可。</p><p>此处配置的镜像源使用的是华为云，实际情况下可以更换成对应的内网npm源。需要执行的命令需要根据前端项目package.json里的指令进行修改。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.codehaus.mojo<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>exec-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">id</span>&gt;</span>exec-npm-config<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">phase</span>&gt;</span>prepare-package<span class="tag">&lt;/<span class="name">phase</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">goal</span>&gt;</span>exec<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">executable</span>&gt;</span>npm<span class="tag">&lt;/<span class="name">executable</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">arguments</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">argument</span>&gt;</span>config<span class="tag">&lt;/<span class="name">argument</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">argument</span>&gt;</span>set<span class="tag">&lt;/<span class="name">argument</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">argument</span>&gt;</span>registry<span class="tag">&lt;/<span class="name">argument</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">argument</span>&gt;</span>https://mirrors.huaweicloud.com/repository/npm/<span class="tag">&lt;/<span class="name">argument</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;/<span class="name">arguments</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">id</span>&gt;</span>exec-npm-config-sass<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">phase</span>&gt;</span>prepare-package<span class="tag">&lt;/<span class="name">phase</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">goal</span>&gt;</span>exec<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">executable</span>&gt;</span>npm<span class="tag">&lt;/<span class="name">executable</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">arguments</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">argument</span>&gt;</span>config<span class="tag">&lt;/<span class="name">argument</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">argument</span>&gt;</span>set<span class="tag">&lt;/<span class="name">argument</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">argument</span>&gt;</span>sass_binary_site<span class="tag">&lt;/<span class="name">argument</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">argument</span>&gt;</span>https://mirrors-devcloud.rnd.huawei.com/node-sass<span class="tag">&lt;/<span class="name">argument</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;/<span class="name">arguments</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">id</span>&gt;</span>exec-npm-install<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">phase</span>&gt;</span>prepare-package<span class="tag">&lt;/<span class="name">phase</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">goal</span>&gt;</span>exec<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">executable</span>&gt;</span>npm<span class="tag">&lt;/<span class="name">executable</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">arguments</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">argument</span>&gt;</span>install<span class="tag">&lt;/<span class="name">argument</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;/<span class="name">arguments</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">workingDirectory</span>&gt;</span>$&#123;basedir&#125;<span class="tag">&lt;/<span class="name">workingDirectory</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">id</span>&gt;</span>exec-npm-run-build<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">phase</span>&gt;</span>prepare-package<span class="tag">&lt;/<span class="name">phase</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">goal</span>&gt;</span>exec<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">executable</span>&gt;</span>npm<span class="tag">&lt;/<span class="name">executable</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">arguments</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">argument</span>&gt;</span>run<span class="tag">&lt;/<span class="name">argument</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">argument</span>&gt;</span>build<span class="tag">&lt;/<span class="name">argument</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;/<span class="name">arguments</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">workingDirectory</span>&gt;</span>$&#123;basedir&#125;<span class="tag">&lt;/<span class="name">workingDirectory</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure><h2 id="拷贝打包生成的文件"><a class="markdownIt-Anchor" href="#拷贝打包生成的文件"></a> 拷贝打包生成的文件</h2><p>前面执行完成npm命令后，会生成一些静态的成品文件，需要将其拷贝到默认的静态资源目录中。</p><p>这里将 <code>/dist</code> 目录输出的成品文件拷贝到 <code>/META-INF/resources</code> 目录下。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">  <span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">directory</span>&gt;</span>$&#123;project.basedir&#125;/dist/<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">targetPath</span>&gt;</span>$&#123;project.build.outputDirectory&#125;/META-INF/resources<span class="tag">&lt;/<span class="name">targetPath</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>这样生成的jar包里，就带有了前端的资源文件。</p><h2 id="nginx转发配置"><a class="markdownIt-Anchor" href="#nginx转发配置"></a> nginx转发配置</h2><p>前端路由在使用了 <strong>history</strong> 模式下，刷新会出现404的情况，这时候就需要 nginx 出手解决资源无法找到的问题。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">location / &#123;</span><br><span class="line">  rewrite ^(.*)$ index.html break;</span><br><span class="line">  proxy_pass http://127.0.0.1:8080;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">location /api &#123;</span><br><span class="line">  proxy_pass http://127.0.0.1:8080;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">location /statics &#123;</span><br><span class="line">  proxy_pass http://127.0.0.1:8080;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里要做的有三件事：</p><ul><li>一是/api开头的接口请求正常通过</li><li>二是/statics目录下的静态资源放过请求原地址</li><li>三是其余链接全部修改成返回index.html文件</li></ul><p>/api 和 /statics 需要跟前端协调好，前端打包构建也要生成创建对应的目录。</p><h2 id="一个小技巧"><a class="markdownIt-Anchor" href="#一个小技巧"></a> 一个小技巧</h2><p>本地调试的时候，只需要启动服务端，前台UI有专门调试服务器。但是每次启动服务端的时候都要进行一次页面构建，就比较的不人性。</p><p>可以通过 Maven 的 Profiles 功能，为 exec-maven-plugin 插件增加 profile release 配置，在本地调试的时候不启用此配置，而线上打包的时候增加 <code>-P release</code> 参数。这样本地调试的时候可以充分利用前后端各自的热加载特性。</p><h1 id="why"><a class="markdownIt-Anchor" href="#why"></a> Why</h1><p>基本原理就是，frontend-maven-plugin 插件调用npm执行安装和构建Vue的命令。然后将构建好的文件当做静态资源供SpringBoot引用。</p><p>这里用到的最重要的一个是<a href="https://www.webjars.org/">webjars</a>。这是将css和js等静态资源打包到jar中，以maven依赖的形式对其进行管理的一种方式。而servlet3.0以上版本，可以直接访问jar包中/META-INF/resources目录中的文件作为静态资源。</p><p>所以说本方法只是使用了webjars的资源加载方式来加载生成的静态资源。脚本中还有一些“奇怪”的配置，是为了解决存在内网镜像，但是无法访问外网资源，如何进行构建的该问题。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;前后端分离已成为现在的主流。一个项目后端使用Java+SpringBoot的模式，提供接口；前端使用Vue提供用户界面。前后端的差异也体现在了部署上，后端需要一套JDK环境，而前端可能只需要一个静态网页服务器。&lt;/p&gt;
&lt;p&gt;在这种前后端模式成熟的基础上，为什么还需要将前后</summary>
      
    
    
    
    <category term="实践" scheme="https://sumygg.com/categories/%E5%AE%9E%E8%B7%B5/"/>
    
    
    <category term="maven" scheme="https://sumygg.com/tags/maven/"/>
    
    <category term="spring" scheme="https://sumygg.com/tags/spring/"/>
    
    <category term="npm" scheme="https://sumygg.com/tags/npm/"/>
    
    <category term="node" scheme="https://sumygg.com/tags/node/"/>
    
  </entry>
  
  <entry>
    <title>“毕业” or “辍学”</title>
    <link href="https://sumygg.com/2021/03/15/leave-from-company-a-resign-or-quit/"/>
    <id>https://sumygg.com/2021/03/15/leave-from-company-a-resign-or-quit/</id>
    <published>2021-03-15T15:49:12.000Z</published>
    <updated>2021-04-20T13:24:04.255Z</updated>
    
    <content type="html"><![CDATA[<p>今天北京的沙尘暴真是几年难得一遇，我也怀着平静的心情去公司（就叫做公司A吧）走完最后的离职流程。整个流程持续了两周的事件，最后从公司带走的是一台联想ThinkPad、一台显示器还有一连串可能会被渐渐忘却也不知从何说起的回忆。如果把离职比作“毕业”，我更想把我的这次经历比作“辍学”。我想从头开始，稍微回忆一下博客消失的这一段时间的经历。</p><h1 id="入职象牙塔里的百草书屋"><a class="markdownIt-Anchor" href="#入职象牙塔里的百草书屋"></a> 入职——象牙塔里的百草书屋</h1><p>抛开面试过程不谈，加入公司A是在2017年年底，当时还没毕业就借着实习名义“杀”过去了。领完电脑去找工位时，同事把领导旁边一个放电脑杂物位置腾挪了出来。这就是我这3年所在工位最初的模样，左边是我的直属领导，右边是我的小组长。</p><p>这里先介绍一下组织架构，整个三级部门在直属领导下又划分出来一个虚拟部门，我们向项目组长汇报，项目组长再向直属领导汇报。项目组和项目组之间的交集很少。</p><p>就这样我在一个项目组里定居了下来，这个项目组负责项目B，算是一个内部的核心项目。虽然整个三级部门人员流动频繁，但是项目总体来说还是比较稳定的。现在细想一下，要不是大老板想出了一个拓宽业务方向的战略，我可能会成为项目组的关门弟子了，毕竟前两年一直没有新人加入。</p><h1 id="奋斗亦真亦幻的终点线"><a class="markdownIt-Anchor" href="#奋斗亦真亦幻的终点线"></a> 奋斗——亦真亦幻的终点线</h1><p>我负责的项目算是一个比较核心的项目，经历了三个大版本的迭代更新，现在是已经是第四个版本了。刚来的时候还是3个版本并行，2号版本面临下线的时期。项目核心功能是进行定时执行，虽然功能不是很复杂，但是从中延伸出来的上层应用却是呈“指数”增长。前期平台为了扩大影响力，承接了很多不属于核心功能的开发和维护工作，这也为后续的迁移工作埋下了伏笔。</p><p>17年初第四版立项并开发，当时还是使用的比较流行的Bootstrap和Spring3作为底层，虽然在现在看来比较“落后”。第四版平台处于上升期，由于需要跟第三版平台的功能对齐，于是平台从不缺功能和需求的开发工作。我也是借着这个契机将平台和业务逐渐熟练起来。</p><p>虽然平台不是很完美，经过自己的努力完成任务，并看着平台渐渐完善的感觉充实而又美好。期间同事一起去参加了一个分享会，也从开源上找到了平台的一些灵感，恍惚一瞬间找到了自己努力的方向。</p><h1 id="工作和生活天平的失衡"><a class="markdownIt-Anchor" href="#工作和生活天平的失衡"></a> 工作和生活——天平的失衡</h1><p>随着对业务和平台的熟悉程度的增加，我的工作也从开发往运维倾斜，就是俗话说的开发运维。基本上的状态是，上午在群里解决用户遇到的使用上的问题，下午进行需求确认，晚上开发需求。</p><p>生活上与同事的代沟比较大，虽然离一旬还远，但是关注的内容就天差地别了。房子？车子？罚单？基金？孩子？我的心里就是这些都是啥。。。每天的乐趣也就是找几个要好的同时一起吐槽吐槽工作，畅想一下未来项目的发展，还有便利蜂有什么打折。</p><p>期间也离开了不少同事，也经历了角色改组。感觉再也见不到了，但是还是从心里为他们能有更好的未来而高兴。这么说起来，在公司里找“同好”还是比较困难的。我至今没找到一起玩Switch的同事，虽然安利了好几次，却没有被我生动的描述所打动。我完全不适合做推销（雾。</p><p>平时没事喜欢刷刷微博，看到什么有意思的东西总想试试。比如我发现上线的时候没有changelog，我就自己维护，感谢测试同学给予的鼓励，但到最后还是没有了。好多“小玩具”就这样没有人在乎于是就没了，有一些还是保留下来了，比如mapstruct、lombok、git rebase等等。项目上的话语权也比较小，这可能与小组的结构有关，提过几个方向虽然大家觉得还不错，但是没有得到领导的响应，一直准备着也没有等到将“幻想”变为现实的一天。项目参与度越来越高，但是认同感和归属感却于日递减。</p><h1 id="离职前兆恶魔的低语"><a class="markdownIt-Anchor" href="#离职前兆恶魔的低语"></a> 离职前兆——恶魔的低语</h1><p>听到过一句话感觉很有道理，一个人在公司留下的资本是“钱”“事”“人”，要留下至少要有两项看起来还不错。我自认为坚持5年应该没什么问题，然而去年下半年却是全面崩盘的一年。</p><p>20年下半年在保平台稳定的前提下，启动了一个战略性的项目——xxxxxx（六个字），这个项目由研发牵头，旨在建立一个类似于阿里dataworks的平台，将审批功能提升到一个新的高度。但是这个项目却没有与其配合的底层实现，把其它各个项目的功能“缝合”到一起，就是一个换汤不换药的项目。</p><p>我自然也是反对的一方，我的理由是平台业务乱，需要先规整，底层未配合，上层有些点落地难度大，技术栈落后，老代码难以承载新功能。产品经理侧也有反对的声音。虽然有反对，项目还是继续搞了起来。就这样一个组的人搞了半年，出来一个半成品，没有产品经理，被外面的人牵着鼻子走，需求改动频繁，项目上线推广分了三个阶段，战线拉长，推动困难，士气低落。最终项目推广只好被叫停。</p><p>在这期间项目组又走了一位“老人”，只剩下我和小组长。而新来的员工业务不熟悉，我就在帮新同事分析需求、分析系统、指导代码、应付六个字项目的过程中渐渐失去了耐心。小组长“荣升”管理层，半年内没有碰过核心代码，成了开会、需求、组会、催进度一条龙服务。那段时间的感觉就是，找不到目标找不到方向，每天在**的海洋里堆代码，没有价值。原项目停滞发展了六个月，有时候我就在想做什么不比做六个字的项目强，白白错过了一个相对快速发展的黄金时期。最终我把这些事归因到了小组长身上。</p><p>同事J和同事L劝我，不要因为一个人就想不开，实在不行换个项目也行。但是真的感觉看到他就烦，也不知道如何面对。最终迎来了领导谈话。</p><p>谈话分了两次。上午领导先是举了个栗子说要跳出舒适圈？！！我比较蒙这是啥意思——赶人走？。然后询问了我原因，我说不喜欢六个字项目，因为ABCD，然后领导一一作了解释。晚上的时候我说原来的项目没有向着目标第一的方向发展，领导反驳说人员少、上层压力大、任务重。我说想建立“前端共荣圈”整合前端资源，领导说给我个账号让我负责这阶段的招聘。跟领导谈话无非想确认自己的价值，还有今后项目发展的方向。果然没有得到自己想要的回答。最后我的结论是“想出去看看”。</p><p>在1月份发表了“想出去看看”后，也没有一心扑到求职上，还是在按部就班的工作。谈话之前还发生了一件事，就是有一次晋升的机会没有给，当时的具体原因和判断逻辑已经不清楚了，后面给的原因也很难信服。总之，至此标志着“钱”“事”“人”的全面崩溃。</p><p>又过了两个月，转眼间来到了春天，虽然大家在微妙的平衡里度过，貌似没有人记得起这件事，但是有些事却又在无时无刻不在摧残着我。就仿佛一部好剧被剧透了一样，每一个需求，每一次反馈，都歪歪扭扭写着两个字——敷衍。这样的状态既占用公共资源，又使需求实现大打折扣，最终还是决定。。。</p><h1 id="再会无限远点的交织体"><a class="markdownIt-Anchor" href="#再会无限远点的交织体"></a> 再会——无限远点的交织体</h1><p>最终还是决定走了。。。提离职的那天，我想了好久如何表达，想想我为什么就不能理直气壮一些？——老子不干了？！！我没注意领导的表情，他只是说你想清楚了，现在走可就再也回不来了，还可能上“黑名单”。我最终还是没有将心里话说出来（其实也没什么心里话），只是狠狠的回复了个Y。“两周时间工作交接，好了就这样了”。</p><p>在回来的公交车上看着沙尘暴，突然有了一种释怀的感觉。我在群里发了个红包，“祝大家事业顺利”。就这样不辞而别，真是一个渣男的作风呀，我苦笑着。</p><p>两周的工作交接虽然工作轻松了不少，但就像一辆车的惯性，依旧的向前行驶。最后一个需求，一份交接文档，一份需求上线tips，提测，收拾工位，跟用户请个“长假”。你的话还是那么恶毒，但也无所谓了。没有告诉任何人，就像开始突然“杀”过来一样，我又突然“飞”走了。</p><p>回想这几年，感谢各位同事对我的包容，包容我的犯错，包容我的任性。这次的决定可能不是最好的决定，也可能是最坏的决定。</p><p>最后，江湖路远，各自珍重。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;今天北京的沙尘暴真是几年难得一遇，我也怀着平静的心情去公司（就叫做公司A吧）走完最后的离职流程。整个流程持续了两周的事件，最后从公司带走的是一台联想ThinkPad、一台显示器还有一连串可能会被渐渐忘却也不知从何说起的回忆。如果把离职比作“毕业”，我更想把我的这次经历比作“</summary>
      
    
    
    
    <category term="随笔" scheme="https://sumygg.com/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
    <category term="离职" scheme="https://sumygg.com/tags/%E7%A6%BB%E8%81%8C/"/>
    
  </entry>
  
  <entry>
    <title>使用git中的rebase简化commit提交历史</title>
    <link href="https://sumygg.com/2018/10/28/simplify-commit-history-with-git-rebase/"/>
    <id>https://sumygg.com/2018/10/28/simplify-commit-history-with-git-rebase/</id>
    <published>2018-10-28T10:50:26.000Z</published>
    <updated>2021-04-20T13:24:04.255Z</updated>
    
    <content type="html"><![CDATA[<p>Git作为“现代”开发中不可获取的一部分，平时的最常用的几个命令是 <code>init</code> <code>clone</code> <code>push</code> <code>pull</code> <code>origin</code>。但Git包含的功能却远远不止这些。说起命令，就想起之前面试官提到了<code>rebase</code>，然后就尝试了一下<code>rebase</code>这个命令，最后发现这完全是强迫症的福利。只要平时的开发流里再多几个简单操作，世界就能变得很美好，而且有了IDE的加持，用起来更加简单便捷了。然后，虽然这个前言感觉很唐突，天道好轮回，技术债也是要还的。</p><h1 id="合并的策略"><a class="markdownIt-Anchor" href="#合并的策略"></a> 合并的策略</h1><p>合并从场景来说分为两种， <em>不同分支的合并</em> 和 <em>单个分支的合并</em> 。</p><p>不同分支的合并这个没什么可说的，参照 <code>git merge --no-ff xxx</code> 的命令执行。<br />而单个分支的合并一般在多人开发同一个分支的时候，如果有人提前提交到了远程仓库，那么其它人再想提交的话，就必须先把远程仓库的修改合并到本地，才能再次提交。</p><p>同事们大多数都是commit后发现提交不上去，然后pull一下执行一次同分支合并。这样提交记录里就会华丽丽的看到很多分支自己merge自己的情况了，而这种提交记录是完全没有必要的。（忽略黑黑的打码）</p><img src="/2018/10/28/simplify-commit-history-with-git-rebase/1.png" class="" title="包含很多的Merge"><p>marge 特点：自动创建一个新的commit<br />如果合并的时候遇到冲突，仅需要修改后重新commit<br />优点：记录了真实的commit情况，包括每个分支的详情<br />缺点：因为每次merge会自动产生一个merge commit，所以在使用一些git的GUI tools，特别是commit比较频繁时，看到分支很杂乱。</p><p>rebase 特点：会合并之前的commit历史<br />优点：得到更简洁的项目历史，去掉了merge commit<br />缺点：如果合并出现代码问题不容易定位，因为re-write了history</p><p><strong>单分支</strong> 下，建议使用rebase将远程分支更新到本地。 <strong>多分支</strong> 合并，使用merge策略合并分支。</p><h1 id="rebase使用"><a class="markdownIt-Anchor" href="#rebase使用"></a> rebase使用</h1><p>rebase的其它用法就不再介绍了（其实是暂时用不上，等用上了再说），只说明一下pull的时候的用法。</p><p>有人可能会说，那我在commit之前先pull一下，这样不就可以了？</p><p>这种方法完全可以，“事前”可以用来规避单分支合并出现无用commit的问题，但是不小心到“事后”了会怎样。</p><p>rebase使用起来非常简单，命令行模式下记得在pull的后加 <code>--rebase</code> 参数。常用命令如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">git pull --rebase     # 以rebase方式拉取代码</span><br><span class="line"></span><br><span class="line"># 遇到冲突时</span><br><span class="line">git rebase --continue # 遇到冲突，解决冲突后执行，继续rebase剩余代码</span><br><span class="line">git rebase --skip     # 忽略冲突的commit，继续rebase剩余代码</span><br><span class="line">git rebase --abort    # 终止rebase，回到rebase执行前状态</span><br></pre></td></tr></table></figure><p>GUI以Intellij为例</p><p>提交代码前先更新项目，使用rebase方式</p><img src="/2018/10/28/simplify-commit-history-with-git-rebase/2.png" class="" title="更新项目"><p>遇到冲突时解决冲突，IDE会自动执行 --continue 命令。</p><img src="/2018/10/28/simplify-commit-history-with-git-rebase/3.png" class="" title="解决冲突"><p>与平时使用的merge真的很像。</p><h1 id="总结一下"><a class="markdownIt-Anchor" href="#总结一下"></a> 总结一下</h1><p>rebase的一些用法：</p><ol><li>合并多个commit为一个完整的commit</li><li>将某一段commit粘贴到另一个分支上</li></ol><p>rebase实质是丢弃一些现有的提交，然后相应地新建一些内容一样但实际上不同的提交。</p><p><strong>rebase会改写历史记录，永远不要在已经push了的commit上使用。</strong></p><p>还是稍微吐槽一下 <em>变基</em> 这个名词吧，感觉很magic<img class="emoji" draggable="false" alt="⭐" src="https://twemoji.maxcdn.com/2/72x72/2b50.png"/>️</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Git作为“现代”开发中不可获取的一部分，平时的最常用的几个命令是 &lt;code&gt;init&lt;/code&gt; &lt;code&gt;clone&lt;/code&gt; &lt;code&gt;push&lt;/code&gt; &lt;code&gt;pull&lt;/code&gt; &lt;code&gt;origin&lt;/code&gt;。但Git包含的功能却</summary>
      
    
    
    
    <category term="高效生活" scheme="https://sumygg.com/categories/%E9%AB%98%E6%95%88%E7%94%9F%E6%B4%BB/"/>
    
    
    <category term="git" scheme="https://sumygg.com/tags/git/"/>
    
    <category term="git rebase" scheme="https://sumygg.com/tags/git-rebase/"/>
    
  </entry>
  
  <entry>
    <title>魔法の筆 呪文で絵描くよ 君も描こう！</title>
    <link href="https://sumygg.com/2018/07/31/p5js-version-for-taiko-drum-master-song-void-setup/"/>
    <id>https://sumygg.com/2018/07/31/p5js-version-for-taiko-drum-master-song-void-setup/</id>
    <published>2018-07-31T05:48:45.000Z</published>
    <updated>2021-04-20T13:24:04.254Z</updated>
    
    <content type="html"><![CDATA[<p>好久没更新博客了，今天趁着月末就再来水一篇吧。</p><h1 id="起因原来是太鼓达人"><a class="markdownIt-Anchor" href="#起因原来是太鼓达人"></a> 起因原来是太鼓达人</h1><p>前十几天刷微博的时候发现一个有意思的歌曲，就是歌曲的歌词其实是一个程序，有人还把这首歌的歌词听写出来，然后跑起来了。</p><iframe src="https://www.youtube.com/embed/RuA9ZwIW7Mg" width="560" height="315" frameborder="0" loading="lazy" allowfullscreen></iframe><p>听完魔性的音乐后，一颗搞事的心在熊熊燃烧，就把这段代码抄了下来。。。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setup</span><span class="params">()</span></span>&#123;</span><br><span class="line">  <span class="built_in">size</span>(<span class="number">400</span>,<span class="number">400</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">float</span> a = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">draw</span><span class="params">()</span></span>&#123;</span><br><span class="line">  <span class="built_in">fill</span> (#<span class="number">021050</span>,<span class="number">5</span>);</span><br><span class="line">  <span class="built_in">rect</span> (<span class="number">0</span>,<span class="number">0</span>,width,height);</span><br><span class="line">  <span class="built_in">translate</span> (<span class="number">200</span>+a*<span class="number">10</span>,<span class="number">200</span>+a*<span class="number">10</span>);</span><br><span class="line">  <span class="built_in">rotate</span> (a);</span><br><span class="line">  <span class="built_in">scale</span> (a/<span class="number">15</span>);</span><br><span class="line">  a+= <span class="number">0.05</span>;</span><br><span class="line">  <span class="built_in">kao</span> (<span class="number">0</span>,<span class="number">-50</span>);</span><br><span class="line">  <span class="built_in">kao</span> (<span class="number">1</span>,<span class="number">50</span>);</span><br><span class="line">  <span class="keyword">if</span> (a&gt;<span class="number">30</span>) a-= <span class="number">50</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//魔法の筆 呪文で絵描くよ 君も描こう！</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">kao</span> <span class="params">(<span class="keyword">int</span> don,<span class="keyword">float</span> b)</span></span>&#123;</span><br><span class="line">  <span class="built_in">stroke</span> (<span class="number">0</span>);</span><br><span class="line">  <span class="built_in">strokeWeight</span> (<span class="number">2</span>);</span><br><span class="line">  <span class="built_in">fill</span> (#e7eedd);</span><br><span class="line">  <span class="built_in">ellipse</span> (b,<span class="number">0</span>,<span class="number">50</span>,<span class="number">50</span>);</span><br><span class="line">  <span class="built_in">noStroke</span> ();</span><br><span class="line">  <span class="built_in">fill</span> (#<span class="number">68</span>c0c0 + #<span class="number">8f</span>8768 * don);</span><br><span class="line">  <span class="built_in">ellipse</span> (b,<span class="number">0</span>,<span class="number">38</span>,<span class="number">38</span>);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">stroke</span> (<span class="number">0</span>);</span><br><span class="line">  <span class="built_in">strokeWeight</span> (<span class="number">1.4</span>);</span><br><span class="line">  <span class="built_in">arc</span> (b + <span class="number">4.26</span>,<span class="number">5</span>,<span class="number">8.5</span>,<span class="number">7.3</span>,<span class="number">0.3</span>,PI,OPEN);</span><br><span class="line">  <span class="built_in">arc</span> (b - <span class="number">4.26</span>,<span class="number">5</span>,<span class="number">8.5</span>,<span class="number">7.3</span>,<span class="number">0</span>,PI<span class="number">-0.3</span>,OPEN);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">fill</span> (<span class="number">0</span>);</span><br><span class="line">  <span class="built_in">ellipse</span> (b<span class="number">-11</span>,<span class="number">-2</span>,<span class="number">6.56</span>,<span class="number">7</span>);</span><br><span class="line">  <span class="built_in">ellipse</span> (b+<span class="number">11</span>,<span class="number">-2</span>,<span class="number">6.56</span>,<span class="number">7</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//世界が始まるよーーー</span></span><br></pre></td></tr></table></figure><h1 id="void_setup的即兴转换"><a class="markdownIt-Anchor" href="#void_setup的即兴转换"></a> void_setup的即兴转换</h1><p>查了一下这段代码所用的语言，使用的是一个叫<a href="https://processing.org/">Processing</a>的语言。好巧的是前段时间又正好了解了这个语言的 JavaScript 实现版 <a href="https://p5js.org/">p5.js</a>。能不能将上面的语言实现成下面的这种呢？</p><p>在一个周末，借助文档、搜索引擎和零食，成功的完成了代码的转换工作。由于是同一种语言的不同实现，代码的相似度还是挺高的。这段代码可以在 jsfiddle 中直接运行。</p><iframe scrolling="no" width="100%" height="500px" src="https://jsfiddle.net/89um5a6j/embedded/js,result/light" frameborder="0" loading="lazy" allowfullscreen></iframe><h1 id="魔法的画笔你也一起来画吧"><a class="markdownIt-Anchor" href="#魔法的画笔你也一起来画吧"></a> 魔法的画笔，你也一起来画吧</h1><p>在转换的过程中，遇到了一些“不太兼容”的问题。</p><p>在网页上需要转换成Canvas画布，于是 <code>size()</code> 命令就转成了 <code>createCanvas()</code> 命令。</p><p>Processing中的颜色可以直接作为常亮使用，而JavaScript中的颜色使用字符串的形式表示，不同的写法代表不同的意义。如 <code>rgba()</code> 是颜色附带了透明度的形式。</p><p>颜色还有一个不同的地方是JavaScript的颜色不能直接相加。在Processing中小红的颜色是根据小蓝的颜色 <code>#68c0c0</code> 加上 <code>#8f8768</code> 得到的，这里直接使用了计算后的小红的颜色值 <code>#fb4828</code> 。颜色相加就是普通的二进制相加。</p><p>绘制的算法主要分为两个步骤，第一步是进行画布变换，对画布进行位移、旋转、缩放的变换。第二步则是在变换后的画布上绘制两个图像，图像的绘制由 <code>kao()</code> 函数完成。</p><img src="/2018/07/31/p5js-version-for-taiko-drum-master-song-void-setup/canvas_draw.png" class="" title="画一画"><p>一个很简单的绘图小程序就这样出现了（再次。</p><h1 id="最后才开始吧"><a class="markdownIt-Anchor" href="#最后才开始吧"></a> 最后才开始吧</h1><p>对了，忘了说这首歌叫《void setup》，可惜的是网易云音乐还没有收录该音乐。不过自己已经从油管上下载了音频文件，有空的时候可以慢慢回味一下。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;好久没更新博客了，今天趁着月末就再来水一篇吧。&lt;/p&gt;
&lt;h1 id=&quot;起因原来是太鼓达人&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#起因原来是太鼓达人&quot;&gt;&lt;/a&gt; 起因原来是太鼓达人&lt;/h1&gt;
&lt;p&gt;前十几天刷微博的时候发现一个有意思的歌曲</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>记一次简单的域名解析找回操作</title>
    <link href="https://sumygg.com/2018/06/26/domain-resolves-to-an-unknown-website/"/>
    <id>https://sumygg.com/2018/06/26/domain-resolves-to-an-unknown-website/</id>
    <published>2018-06-26T14:38:55.000Z</published>
    <updated>2021-04-20T13:24:04.254Z</updated>
    
    <content type="html"><![CDATA[<p>前段时间搞了点东西，想放到自己的域名上。很自然的在域名解析里配置了将域名解析到自己服务器上，结果过了一段时间发现，域名被解析到一个**彩网站上面去了。以为自己搞错了解析，再三确认了配置没有错误。然后开始了解析错误查找之旅。</p><p>首先确认了解析有没有过来，使用了<a href="http://ping.chinaz.com">站长工具Ping检测</a>测试了域名的连通情况，发现国内的解析都指向了一个IP地址，国外的解析都是正常的。而直接访问这个IP地址，就是那个什么什么的网站。</p><p>国内国外出现了不同的解析地址，下一步用 <code>dig</code> 命令看一下域名的dns情况：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">sumy@DESKTOP-14HIGI1:/mnt/c/Users/sumy$ dig sumygg.com</span><br><span class="line"></span><br><span class="line">; &lt;&lt;&gt;&gt; DiG 9.11.3-1ubuntu1-Ubuntu &lt;&lt;&gt;&gt; sumygg.com</span><br><span class="line">;; global options: +cmd</span><br><span class="line">;; Got answer:</span><br><span class="line">;; -&gt;&gt;HEADER&lt;&lt;- opcode: QUERY, status: NOERROR, id: 7830</span><br><span class="line">;; flags: qr rd ra; QUERY: 1, ANSWER: 1, AUTHORITY: 2, ADDITIONAL: 11</span><br><span class="line"></span><br><span class="line">;; OPT PSEUDOSECTION:</span><br><span class="line">; EDNS: version: 0, flags:; udp: 4096</span><br><span class="line">;; QUESTION SECTION:</span><br><span class="line">;sumygg.com.                    IN      A</span><br><span class="line"></span><br><span class="line">;; ANSWER SECTION:</span><br><span class="line">sumygg.com.             600     IN      A       45.114.10.107</span><br><span class="line"></span><br><span class="line">;; AUTHORITY SECTION:</span><br><span class="line">sumygg.com.             86202   IN      NS      f1g1ns2.dnspod.net.</span><br><span class="line">sumygg.com.             86202   IN      NS      f1g1ns1.dnspod.net.</span><br><span class="line"></span><br><span class="line">;; ADDITIONAL SECTION:</span><br><span class="line">f1g1ns1.dnspod.net.     166658  IN      A       182.140.167.166</span><br><span class="line">f1g1ns1.dnspod.net.     166658  IN      A       14.215.150.17</span><br><span class="line">f1g1ns1.dnspod.net.     166658  IN      A       58.247.212.36</span><br><span class="line">f1g1ns1.dnspod.net.     166658  IN      A       61.151.180.44</span><br><span class="line">f1g1ns1.dnspod.net.     166658  IN      A       180.163.19.15</span><br><span class="line">f1g1ns2.dnspod.net.     166657  IN      A       61.129.8.159</span><br><span class="line">f1g1ns2.dnspod.net.     166657  IN      A       101.226.220.16</span><br><span class="line">f1g1ns2.dnspod.net.     166657  IN      A       121.51.128.164</span><br><span class="line">f1g1ns2.dnspod.net.     166657  IN      A       182.140.167.188</span><br><span class="line">f1g1ns2.dnspod.net.     166657  IN      A       52.220.136.67</span><br><span class="line"></span><br><span class="line">;; Query time: 46 msec</span><br><span class="line">;; SERVER: 192.168.1.1#53(192.168.1.1)</span><br><span class="line">;; WHEN: Sun Jun 17 00:41:30 DST 2018</span><br><span class="line">;; MSG SIZE  rcvd: 269</span><br></pre></td></tr></table></figure><p>可以发现解析被dnspod接管了，但是我之前并没有在上面配置相关的dns解析？不管怎样还是登陆上去看一看。</p><p>dnspod与域名解析的网站很相似，关键是可以 <strong>自定义</strong> 输入域名，即使那个域名不是dnspod所有。我试着输入了我的域名，提示域名已经被其它账户占用了，是否需要认领。</p><img src="/2018/06/26/domain-resolves-to-an-unknown-website/1.png" class="" title="域名认领提示"><p>认领域名需要认证 <strong>WHOIS</strong> 邮箱，还好之前已经在域名里配置了相关的邮箱，通过WHOIS成功将域名取回到了自己的账户里。</p><p>认领回来第一步就是把错误的域名解析删除，然后 <em>不情愿</em> 的换上了自己的域名解析。</p><p>查看了域名操作记录，发现它在几天前就已经恶意注册了域名解析，过了几天才被我发现。</p><img src="/2018/06/26/domain-resolves-to-an-unknown-website/2.png" class="" title="域名操作记录"><p>限于自己的水平，就没对这个邮箱做进一步处理，域名解析找回来了，可喜可贺，可喜可贺。</p><p>回想这件事，dnspod这种先来先得的域名认领方式存在很大的隐患，还不知道有多少人的域名被恶意认领。规则之下，无至则溃。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;前段时间搞了点东西，想放到自己的域名上。很自然的在域名解析里配置了将域名解析到自己服务器上，结果过了一段时间发现，域名被解析到一个**彩网站上面去了。以为自己搞错了解析，再三确认了配置没有错误。然后开始了解析错误查找之旅。&lt;/p&gt;
&lt;p&gt;首先确认了解析有没有过来，使用了&lt;a</summary>
      
    
    
    
    <category term="网站" scheme="https://sumygg.com/categories/%E7%BD%91%E7%AB%99/"/>
    
    
    <category term="域名" scheme="https://sumygg.com/tags/%E5%9F%9F%E5%90%8D/"/>
    
    <category term="解析" scheme="https://sumygg.com/tags/%E8%A7%A3%E6%9E%90/"/>
    
    <category term="dnspod" scheme="https://sumygg.com/tags/dnspod/"/>
    
  </entry>
  
  <entry>
    <title>优化SQL查询时候的性能</title>
    <link href="https://sumygg.com/2018/05/31/optimize-sql-queries-to-improving-the-performance/"/>
    <id>https://sumygg.com/2018/05/31/optimize-sql-queries-to-improving-the-performance/</id>
    <published>2018-05-31T13:43:49.000Z</published>
    <updated>2021-04-20T13:24:04.253Z</updated>
    
    <content type="html"><![CDATA[<p>最近是特殊时期，都在强调系统性能的优化。在师傅的指导下，对系统中一个比较费劲的功能进行了优化。师傅的理念是： <strong>能用SQL解决的问题绝不用程序处理</strong> 。在实际场景下，通过优化，将3分钟无法完成的业务优化到了1分钟以内。虽然没有优化到极致，但对SQL查询性能的了解前进了一大步，于是稍微记录一下。</p><h1 id="建立索引"><a class="markdownIt-Anchor" href="#建立索引"></a> 建立索引</h1><p>索引是避免全表扫描的一个重要手段。有索引和没有索引，好的索引和差的索引，对于性能的影响都是不同的。对于经常查询的字段可以建立索引，如主键；对于经常组合查询的字段可以建立联合索引。</p><p>这次遇到的情况是：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> table1 <span class="keyword">where</span> a<span class="operator">=</span><span class="number">1</span> <span class="keyword">and</span> b <span class="keyword">in</span> (?, ?);</span><br></pre></td></tr></table></figure><p>这样子可以考虑将 <code>(a, b)</code> 建立组合索引。</p><h1 id="使用in进行批量查询"><a class="markdownIt-Anchor" href="#使用in进行批量查询"></a> 使用IN进行批量查询</h1><p>一般情况下，通过一次查询之后可能不会完全返回需要的所有数据，这时候会对每一条数据进行一次补充查询。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 返回初始数据</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> table1 <span class="keyword">where</span> deleted <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 对初始数据补充查询数据</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> table2 <span class="keyword">where</span> id <span class="operator">=</span> ? <span class="keyword">and</span> deleted <span class="operator">=</span> <span class="number">0</span>;</span><br></pre></td></tr></table></figure><p>如果数据条目比较多，会频繁进行访问数据库操作。</p><p>为了减轻数据库的压力，可以将第一次查询初始数据后的值整合到列表中，查询补充数据的时候通过 <strong>IN</strong> 操作一次全部查询出来，然后在内存中转成map与初始数据对应结合。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> table2 <span class="keyword">where</span> deleted <span class="operator">=</span> <span class="number">0</span> <span class="keyword">and</span> id <span class="keyword">IN</span> (?, ?, ?);</span><br></pre></td></tr></table></figure><h1 id="避免将不同字段作为条件进行or查询"><a class="markdownIt-Anchor" href="#避免将不同字段作为条件进行or查询"></a> 避免将不同字段作为条件进行OR查询</h1><p>使用 <strong>OR</strong> 可以查询出满足多个条件中至少一个条件的数据。但是如果遇到没有索引的字段，可能会造成无用的全表扫描。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> table1 <span class="keyword">where</span> deleted <span class="operator">=</span> <span class="number">0</span> <span class="keyword">and</span> ( a <span class="operator">=</span> ? <span class="keyword">OR</span> b <span class="operator">=</span> ?);</span><br></pre></td></tr></table></figure><p>这种情况下通过将OR进行拆分，作为两个select语句，通过 <strong>UNION ALL</strong> 的方式结合数据。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> table1 <span class="keyword">where</span> deleted <span class="operator">=</span> <span class="number">0</span> <span class="keyword">and</span> a <span class="operator">=</span> ?</span><br><span class="line"><span class="keyword">UNION</span> <span class="keyword">ALL</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> table1 <span class="keyword">where</span> deleted <span class="operator">=</span> <span class="number">0</span> <span class="keyword">and</span> b <span class="operator">=</span> ?</span><br></pre></td></tr></table></figure><p>这样使得两个SQL可以分别根据自己的条件进行优化，避免全表扫描的出现。</p><h1 id="避免进行大量的join操作"><a class="markdownIt-Anchor" href="#避免进行大量的join操作"></a> 避免进行大量的JOIN操作</h1><p>大多数情况下，需要的数据会存在两个或多个表中。使用 <strong>JOIN</strong> 可以很方便的将多个表中需要的字段数据聚合起来。但是如果JOIN的表过多，数据库引擎会先将各个表根据JOIN条件聚合成一个宽表，然后从中查询。JOIN后表记录数是乘积式的增长。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> t1.<span class="operator">*</span> <span class="keyword">from</span> table1 t1</span><br><span class="line">  <span class="keyword">LEFT</span> <span class="keyword">JOIN</span> table2 t2 <span class="keyword">ON</span> t1.id<span class="operator">=</span>t2.t1_id</span><br><span class="line">  <span class="keyword">LEFT</span> <span class="keyword">JOIN</span> table3 t3 <span class="keyword">ON</span> t1.id<span class="operator">=</span>t3.t1_id</span><br><span class="line">  <span class="keyword">LEFT</span> <span class="keyword">JOIN</span> table4 t4 <span class="keyword">ON</span> t1.id<span class="operator">=</span>t4.t1_id</span><br><span class="line"><span class="keyword">where</span></span><br><span class="line">  t1.delted <span class="operator">=</span> <span class="number">0</span>;</span><br></pre></td></tr></table></figure><p>JOIN的表不易过多，1-2张为易，最近看到一张JOIN了5张表的查询，这样做的原因是想在SQL中查询其它表中的字段的聚合数据。这个时候可以考虑使用子查询进行改写：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> t1.<span class="operator">*</span></span><br><span class="line">    (<span class="keyword">select</span> <span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">from</span> table2 t2 <span class="keyword">where</span> t2.t1_id<span class="operator">=</span>t1.id) t2_count,</span><br><span class="line">    (<span class="keyword">select</span> <span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">from</span> table3 t3 <span class="keyword">where</span> t3.t1_id<span class="operator">=</span>t1.id) t3_count,</span><br><span class="line">    (<span class="keyword">select</span> <span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">from</span> table4 t4 <span class="keyword">where</span> t4.t1_id<span class="operator">=</span>t1.id) t4_count,</span><br><span class="line"> <span class="keyword">from</span> table1 t1</span><br><span class="line"> <span class="keyword">where</span></span><br><span class="line">   t1.deleted <span class="operator">=</span> <span class="number">0</span>;</span><br></pre></td></tr></table></figure><p>如果实在需要其它表的一些字段数据，可以参考前面提到的 <strong>批量查询</strong> 的方法，先是几张表进行关联查出基础数据，然后其它表关联查询附加数据，最后在内存中对这些数据进行整合。</p><p>如果这样关联的表还是很多，说明数据库设计有问题。</p><h1 id="总结"><a class="markdownIt-Anchor" href="#总结"></a> 总结</h1><p>拜拜。<img class="emoji" draggable="false" alt="✋" src="https://twemoji.maxcdn.com/2/72x72/270b.png"/></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;最近是特殊时期，都在强调系统性能的优化。在师傅的指导下，对系统中一个比较费劲的功能进行了优化。师傅的理念是： &lt;strong&gt;能用SQL解决的问题绝不用程序处理&lt;/strong&gt; 。在实际场景下，通过优化，将3分钟无法完成的业务优化到了1分钟以内。虽然没有优化到极致，但对S</summary>
      
    
    
    
    <category term="实践" scheme="https://sumygg.com/categories/%E5%AE%9E%E8%B7%B5/"/>
    
    
    <category term="mysql" scheme="https://sumygg.com/tags/mysql/"/>
    
    <category term="sql" scheme="https://sumygg.com/tags/sql/"/>
    
    <category term="优化" scheme="https://sumygg.com/tags/%E4%BC%98%E5%8C%96/"/>
    
    <category term="数据库" scheme="https://sumygg.com/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
</feed>
